{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-flexible-robotics","title":"Welcome to Flexible Robotics","text":""},{"location":"assignments/","title":"Assignments","text":""},{"location":"assignments/#homework-assignments","title":"Homework Assignments","text":"<p>There will be homework assignments throughout the course. The homework assignments are mostly going to be implemented in Python and its related packages. The homework assignments will be on (1) initial prototyping, (2) kinematics, (3) dynamics, (4) parameter identification, (5) design optimization, (6) prototyping and testing. The individual assignments are intended to introduce concepts discussed in class whereas the team projects are intended to reinforce the students on the concepts. </p>"},{"location":"assignments/01-assignment-01/","title":"A01: Mechanism Prototyping","text":""},{"location":"assignments/01-assignment-01/#introduction","title":"Introduction","text":"<p>The purpose of this assignment is to develop your knowledge and understanding of rapid prototyping techniques and the kinematics of folded systems</p>"},{"location":"assignments/01-assignment-01/#instructions","title":"Instructions","text":"<p>This assignment has not yet been released</p>"},{"location":"assignments/01-assignment-01/#rubric","title":"Rubric","text":"Item % Part 1 20 Part 2 30 Part 3 40 Part 4 10 Total 100 <ol> <li> <p>You could take a picture of the mechanism from the side and measure angles graphically, for example. Please ensure you document the approach taken.\u00a0\u21a9</p> </li> </ol>"},{"location":"assignments/02-assignment-02/","title":"A02: Kinematics","text":""},{"location":"assignments/02-assignment-02/#introduction","title":"Introduction","text":"<p>The purpose of this assignment is to demonstrate your knowledge of kinematics through exemplar exercises, specifically the following content</p> <ul> <li>Vectors and vector operations</li> <li>The use of vectors in describing constraints</li> <li>The creation of vector-based expressions to describe key aspects of robotic systems such as the Jacobian and to demonstrate its use</li> <li>Key uses of the quaternion in hinged and foldable systems</li> </ul>"},{"location":"assignments/02-assignment-02/#instructions","title":"Instructions","text":"<p>This assignment has not yet been released</p>"},{"location":"assignments/02-assignment-02/#rubric","title":"Rubric","text":"Item % Part 1 10 Part 2 20 Part 3 30 Part 4 40 Total 100"},{"location":"assignments/03-project-01-part-1/","title":"Team Project 1 -- Part 1","text":""},{"location":"assignments/03-project-01-part-1/#assignment-overview","title":"Assignment Overview","text":"<p>UPDATE: This assignment has been split into two parts.  Please see Part 2 for the rest of the assignment.</p> <p>The goal of this team project is to propose a mechanism design that is interesting, grounded in physical reality, and relevant to the course material. This year, we will be focusing on bio-inspired solutions for terrestrial locomotion.  Your task is to develop and study a mechanism composed of:</p> <ul> <li>Planar mechanisms, such as four and five-bar mechanisms</li> <li>Spherical mechanisms, such as spherical four or five-bar mechanisms</li> <li>Sarrus linkages or other straight-line mechanisms.</li> </ul> <p>The source of bioinspiration can be extant(living) or extinct, but you should be able to find enough information about it to make a set of reasonable assumptions about what you don't know.  Focus on an animal in a size range that you can make at scale, at a reasonable cost, rather than scaling a different-sized animal up or down.  The project is thus broken into several parts:</p> <ul> <li>Project Goal and Fit: Select a research topic that is interesting to you and worth pursuing, and defend your decision.</li> <li>Background Research  Start thinking about the scale of your robot, how to use the motion,behavior, or morphology of biological systems to inspire your design, and how knowledge of biomechanics can inspire a mechanism design.</li> <li>Initial Calculations</li> <li>Specifications generation.</li> </ul> <p>Part 2 of this assignment continues with:</p> <ul> <li>Mechanism Design</li> <li>Modeling and Analysis: Use your knowledge of the mechanism's motion to estimate the forces, and torques, power requirements, and speed of your system.</li> </ul> <p>Please read this whole assignment first.</p>"},{"location":"assignments/03-project-01-part-1/#instructions","title":"Instructions","text":"<p>This assignment has not yet been released</p>"},{"location":"assignments/03-project-01-part-1/#submission","title":"Submission","text":"<p>Please include a report with the following</p> <ol> <li>The requested steps of the procedure, in paragraph form (no sentence fragments).</li> <li>Answers to the discussion points above</li> <li>Plots &amp; Figures</li> <li>Bibliography in IEEE format</li> <li>Code - any code created by your team to in the generation of this report.  If you are using a jupyter notebook, to generate the whole report, you can supply your code inline.</li> </ol> <p>Please follow the \"Submission Best Practices\" document posted the course website.  This assignment should be submitted as a .pdf document and/or a jupyter notebook (.ipynb).  If submitted as a notebook, make sure it is fully compiled.  This can be done by opening the file in the jupyter browser and in the top jupyter menu selecting \"Kernel\" --&gt; \"Restart and Run All\". Attach a pdf version of the compiled notebook as well.</p> <p>You will also present your team's design in class</p>"},{"location":"assignments/03-project-01-part-1/#suggestions","title":"Suggestions","text":"<ul> <li>Be creative in your search terms, and make sure to report the search terms that yielded good results.</li> <li>Write down and use the keywords identified from class.</li> <li>Collect your references in a bibliography program like Zotero or Mendeley for easier handling.</li> </ul>"},{"location":"assignments/03-project-01-part-1/#rubric","title":"Rubric","text":"Description Points Project Definition 100 Background Research 100 Initial Calculations 100 Total 300"},{"location":"assignments/03-project-01-part-1/#external-resources","title":"External Resources","text":"<ul> <li>https://en.wikipedia.org/wiki/Kleiber%27s_law</li> <li>Developing a Research Question</li> <li>Citation Managers:<ul> <li>Mendeley Desktop</li> <li>https://www.zotero.org/</li> </ul> </li> </ul>"},{"location":"assignments/04-project-01-part-2/","title":"Team Project 1 -- Part 2","text":""},{"location":"assignments/04-project-01-part-2/#assignment-overview","title":"Assignment Overview","text":"<p>Note: This assignment is the second part of what was originally one assignment. Please see Part 1 for the first half of the assignment.</p> <p>This portion of the assignment consists of:</p> <ul> <li>Mechanism Design</li> <li>Modeling and Analysis: Use your knowledge of the mechanism's motion to estimate the forces, and torques, power requirements, and speed of your system.</li> </ul> <p>Please read this whole assignment first.</p>"},{"location":"assignments/04-project-01-part-2/#instructions","title":"Instructions","text":"<p>This assignment has not yet been released</p>"},{"location":"assignments/04-project-01-part-2/#rubric","title":"Rubric","text":"Description Points Specifications Table 100 Mechanism Design 100 Modeling and Analysis 100 Total 300"},{"location":"assignments/04-project-01-part-2/#external-resources","title":"External Resources","text":"<ul> <li>https://en.wikipedia.org/wiki/Kleiber%27s_law</li> <li>Developing a Research Question</li> <li>Citation Managers:<ul> <li>Mendeley Desktop</li> <li>https://www.zotero.org/</li> </ul> </li> </ul>"},{"location":"assignments/05-assignment-03/","title":"A03: Dynamics","text":""},{"location":"assignments/05-assignment-03/#introduction","title":"Introduction","text":"<p>The purpose of this assignment is to acquaint you with the concepts of creating and using a dynamic simulation for answering questions</p>"},{"location":"assignments/05-assignment-03/#instructions","title":"Instructions","text":"<p>This assignment has not yet been released</p>"},{"location":"assignments/05-assignment-03/#rubric","title":"Rubric","text":"Item % Part 1 30 Part 2 30 Part 3 40 Total 100"},{"location":"assignments/06-assignment-04/","title":"A04: System Identification","text":""},{"location":"assignments/06-assignment-04/#introduction","title":"Introduction","text":"<p>The purpose of this module is to lead you through the process of collecting data on a flexible system and fitting its behavior to a dynamic model</p>"},{"location":"assignments/06-assignment-04/#instructions","title":"Instructions","text":"<p>This assignment has not yet been released</p>"},{"location":"assignments/06-assignment-04/#rubric","title":"Rubric","text":"Item Points Part 1 40 Part 1.5 10 Part 2 40 Files 10 Total 100"},{"location":"assignments/07-project-02-part-1/","title":"Team Project 2 -- Part 1","text":""},{"location":"assignments/07-project-02-part-1/#introduction","title":"Introduction","text":"<p>The purpose of this project is to integrate all you have learned about kinematics, materials, compliance, and dynamics.</p>"},{"location":"assignments/07-project-02-part-1/#prior-to-the-beginning-of-this-assignment","title":"Prior to the Beginning of this Assignment","text":"<ol> <li> <p>Schedule a time to chat with Dr. Aukes to review project 1.  The goal of this meeting is to find ways to improve, simplify, and optimize your design with the goal of actually making your robot by the end of the semester.</p> <ul> <li>We can meet over zoom.</li> <li>This can be scheduled during office hours, but still check in with Dr. Aukes regarding timing.</li> <li>Three of your teammates must be present at the meeting.</li> <li>Come with your existing model, prototype, etc.</li> <li>Assign someone to take notes</li> </ul> </li> <li> <p>After meeting with Dr. Aukes, discuss decide changes and adaptations you'd like to make to your project 1. goals</p> </li> </ol>"},{"location":"assignments/07-project-02-part-1/#instructions","title":"Instructions","text":"<p>This assignment has not yet been released</p>"},{"location":"assignments/07-project-02-part-1/#rubric","title":"Rubric","text":"Item Points Step 1: Updated Description 50 Part 2: Data Collection Plan 50 Part 3: Optimization Description 100 Part 4: Mujoco Model 100 Total 300"},{"location":"assignments/08-project-02-part-2/","title":"Team Project 2 -- Part 2","text":""},{"location":"assignments/08-project-02-part-2/#introduction","title":"Introduction","text":"<p>The purpose of this project is to integrate all you have learned about kinematics, materials, compliance, and dynamics into a final demonstration.</p>"},{"location":"assignments/08-project-02-part-2/#instructions","title":"Instructions","text":"<p>This assignment has not yet been released</p>"},{"location":"assignments/08-project-02-part-2/#rubric","title":"Rubric","text":"Item Points Step 1: System Identification Writeup 75 Step 2: Optimization Writeup 75 Step 3: Robot Overview and Description 75 Step 4: Data Collection and Analysis 75 Total 300"},{"location":"assignments/09-assignment-05/","title":"A05: Design Optimization","text":""},{"location":"assignments/09-assignment-05/#introduction","title":"Introduction","text":"<p>The purpose of this module is to lead you through the process of determining the optimal stiffness for a jumping robot.  We will work on this assignment in class on Tuesday, Nov 27, but it will be your job to complete and submit your own work for credit by the deadline in Moodle.</p>"},{"location":"assignments/09-assignment-05/#problem-statement","title":"Problem Statement","text":"<p>A cart runs vertically up and down a wall.  Its leg is actuated by a servo mounted in the body at a revolute joint.  The leg is modeled as a compliant beam, with 2 links and 1 passive joint, and can jump by pushing its leg off the ground.</p>  your browser does not support this video tag  <p>Note: I have updated the mass of the body</p> Item Description Value \\(m\\) mass of body .01 kg \\(w\\) length, width, and height of body .05 m \\(m_{leg}\\) mass of leg .002 kg \\(l\\) length of leg (x) .1 m width of leg (y) .0125 m thickness of leg (z) .002 m \\(G\\) gear ratio of servo 55.5 \\(k_{joint}\\) stiffness of passive joint TBD \\(b_{joint}\\) damping loss of passive joint k / 100 \\(t_s\\) timestep 1e-4 s \\(t_{max}\\) timestep 5 s"},{"location":"assignments/09-assignment-05/#references","title":"References","text":"<ul> <li>Lecture 11 Notes</li> <li>Lecture 12 Notes</li> <li>Servo Fitting Example</li> </ul>"},{"location":"assignments/09-assignment-05/#instructions","title":"Instructions","text":"<p>This assignment has not yet been released</p>"},{"location":"assignments/09-assignment-05/#rubric","title":"Rubric","text":"Item % 1. 20 2. 10 3. 10 4. 20 5. 20 6. 10 7. 10 Total 100"},{"location":"assignments/10-assignment-06/","title":"A06: System Prototyping & Validation","text":""},{"location":"assignments/10-assignment-06/#introduction","title":"Introduction","text":"<p>The purpose of this assignment is to obtain friction parameters in MuJoCo that best capture real-world scenario.  In this assignment you will:</p> <ul> <li>Conduct an experiment to measure the friction between a selected material and the floor.</li> <li>Obtain the static and dynamic friction coefficients between two materials from first principles</li> <li>Construct a MuJoCo model of the same experiment</li> <li>Identify the friction parameters in MuJoco that reproduce the behavior you observed</li> </ul>"},{"location":"assignments/10-assignment-06/#instructions","title":"Instructions","text":"<p>This assignment has not yet been released</p>"},{"location":"assignments/10-assignment-06/#grading","title":"Grading","text":"Step % 1-2 10 3 10 4-7 20 8 30 9 30 Total 100"},{"location":"course-info/01-syllabus/","title":"Syllabus","text":"<p>BILKENT UNIVERSITY MECHANICAL ENGINEERING DEPARTMENT ME 473 Flexible Robotics Syllabus -- Fall 2023/2024  </p>"},{"location":"course-info/01-syllabus/#general-information","title":"General Information","text":"<p>Credit Units: 3 ECTS Credit Units: 5 Prerequisites: CS 115, ME 341  </p> <p>Instructor: Dr. Daniel Aukes Office: EA-131 Phone: TBD E-mail: danaukes@asu.edu </p> <p>Lectures: 10:30-12:30 Tuesday, 3:30-4:30 Thursday Office Hours: By appointment Textbook: Compliant Mechanisms by Larry L. Howell, Wiley Press, 1^st^ Ed. (Suggested)</p>"},{"location":"course-info/01-syllabus/#course-description","title":"Course Description","text":"<p>Design and manufacturing of flexible mechanisms. Biomechanics and bioinspiration. Kinematics and dynamics of robots and mechanisms. Mechanics and the effects of compliance on robot dynamics. Design optimization and system identification for flexible robots. Experimental validation of flexible robots.</p>"},{"location":"course-info/01-syllabus/#course-objectives","title":"Course Objectives","text":"<p>Having successfully completed this course, the student will learn the following:</p> <ol> <li>Using bio-inspired approaches in the development and design of mechanisms</li> <li>Understanding the kinematic relationships between forces and motion for rigid mechanical systems</li> <li>Understanding the relationships between force and deflection in flexible systems</li> <li>Being able to build and use physics-based models for understanding the dynamic motion of robotic systems</li> <li>Understanding how the limitations of fabrication processes translate to design constraints and guidelines for flexible systems.</li> <li>The basics of data collection and experiment design</li> <li>How to use optimization approaches in solving a robotics design problem.</li> </ol>"},{"location":"course-info/01-syllabus/#me-department-objectives-and-outcomes-coverage","title":"ME Department Objectives and Outcomes Coverage","text":"<p>This course primarily contributes to Mechanical Engineering program outcomes that develop student abilities to:</p> <p>a. An ability to identify, formulate, and solve complex engineering problems by applying principles of engineering, science, and mathematics, b. An ability to apply engineering design to produce solutions that meet specified needs with consideration of public health, safety, and welfare, as well as global, cultural, social, environmental, and economic factors, c. An ability to communicate effectively with a range of audiences, e. An ability to function effectively on a team whose members together provide leadership, create a collaborative and inclusive environment, establish goals, plan tasks, and meet objectives, f. An ability to develop and conduct appropriate experimentation, analyze and interpret data, and use engineering judgment to draw conclusions, g. An ability to acquire and apply new knowledge as needed, using appropriate learning strategies,  </p>"},{"location":"course-info/01-syllabus/#course-organization","title":"Course Organization","text":""},{"location":"course-info/01-syllabus/#grading","title":"Grading","text":"Item % Homework assignments and quizzes (6 counts -- initial prototyping, kinematics, dynamics, parameter identification, design optimization, final prototyping and testing) 20% Project 1 (initial prototyping of a flexible robot, kinematics modeling, dynamics modeling) 20% Project 2 (compliance modeling, design and manufacturing workflow, design optimization, experiment design, data collection and analysis) 20% Midterm exam 20% Final exam (includes all topics from the course, to be held during the final exam period) 20% Total 100%"},{"location":"course-info/01-syllabus/#qualitative-rubric","title":"Qualitative Rubric","text":"<p>Some assignments will be graded according to rubric with percentagess corresponding to a sliding qualitative scale.  The following is a general description of what each percentage means in this course:</p> Description % Exceeds Expectations. Shows superior effort, quality, mastering of the concepts.  Innovation in the execution of submitted work.  Documentation is publication-ready. 100 Above expectations.  Demonstrates full understanding of the problem, and solution is well executed, documented, and presented. 85 Meets expectations.  Minor mistakes are present, but student demonstrates a general understanding of the concepts.  Documentation present but perhaps not comprehensive. 70 Below expectations. Some effort shown, though there may be serios flaws in analysis or execution.  Documentation lacking in certain areas. 55 Fails to meet minimum expections.  Minimal effort shown.  Does not show understanding and may not have thought through their methods.  Documentation is lacking substance, clarity, completeness, evidence of effort. 40 Not submitted, illegible, not readable, not properly linked 0"},{"location":"course-info/01-syllabus/#fz-grade","title":"FZ Grade","text":"<p>No FZ grade is given in this course.</p>"},{"location":"course-info/01-syllabus/#homework-assignments","title":"Homework Assignments","text":"<p>There will be homework assignments throughout the course. The homework assignments are mostly going to be implemented in Python and its related packages. The homework assignments will be on (1) initial prototyping, (2) kinematics, (3) dynamics, (4) parameter identification, (5) design optimization, (6) prototyping and testing. The individual assignments are intended to introduce concepts discussed in class whereas the team projects are intended to reinforce the students on the concepts. Plagiarism and cheating will be severely punished.</p>"},{"location":"course-info/01-syllabus/#term-projects","title":"Term Projects","text":"<p>There will be two projects within this course. The first project involves the initial design of a flexible robotic mechanism, an idealized kinematic analysis of the design and its dynamic modeling. The second project will include the effects of flexibility in the robot dynamics, the fabrication of a flexible robot, and its testing phases. The students have the option to redefine their designs in the second project. The groups will be given a fixed budget to complete the projects and will not be allowed to go over budget. The first project is expected to be theoretical whereas the second project is expected to be more practical. The students will make a demo of their second project at the end of the semester. Students will work in groups of 3-4.</p>"},{"location":"course-info/01-syllabus/#exams","title":"Exams","text":"<ul> <li>Will include all topics from the course up to that point</li> <li>Will be held during the designated exam period / during a class period*</li> </ul> <p>* Specific date/time will be announced in advance.</p>"},{"location":"course-info/01-syllabus/#make-up-exam-policy","title":"Make-up Exam Policy","text":"<p>There will be no make-up exam unless a documentable extreme medical or family emergency exists.  You must contact the instructor prior* to the exam, or no credit will be given for a missed exam.</p> <p>* 1 day notice minimum</p>"},{"location":"course-info/01-syllabus/#in-class-laboratories-and-tutorial-sessions","title":"In-Class Laboratories and Tutorial Sessions","text":"<p>In laboratory work, the students will apply the methods introduced in class to prototype simple flexible mechanisms as well as to learn validation techniques. In tutorials, the students will model and simulate robots in Python environment, apply optimization techniques, and perform system identification.</p> <p>Students are expected to come to the lab and tutorial sessions with a laptop capable of running Python.</p>"},{"location":"course-info/01-syllabus/#course-policies","title":"Course Policies","text":""},{"location":"course-info/01-syllabus/#attendance","title":"Attendance","text":"<p>Attendance will be taken during lectures and labs. Excused absences will be given for documented medical reasons, university-related travel, or job interview travel. Documentation must be in the form requested by the university (doctor report, travel ticket, etc.).</p> <p>It should also be noted that attendance is extremely important, and irregular attendance always results in poor or mediocre performance.</p>"},{"location":"course-info/01-syllabus/#late-penalities","title":"Late Penalities","text":"<p>Each concept in this class builds on the last, so failing to turn in an assignment on time affects you and your teammates.</p> <ul> <li>It is your responsibility to get in touch with the instructor regarding any questions before assignments are due.  </li> <li>Late submissions will lose one letter grade(10%) for every day they are late.  </li> <li>Any sumbission more than four days late will receive a zero. </li> </ul>"},{"location":"course-info/01-syllabus/#course-honor-code","title":"Course Honor Code","text":"<p>Plagiarism and cheating are not acceptable in the classroom and will be severely punished.</p>"},{"location":"course-info/01-syllabus/#specific-rules","title":"Specific Rules","text":"<ul> <li>Do your own work for individual assignments and tests.</li> <li>Include the your sources of inspiration within assignments and projects.  This will help grow the list of cool references, but more importantly, help distinguish inspiration from wholesale plagarism.</li> <li>Keep code/text/information you use from outside sources separate from your own original content (through the use of separate folders, for example).  Make it explicit what is yours and what is not.</li> <li>Include all the licenses or copyright statements as required by the things you reuse.  This will make your own code more reuseable for yourself and potentially others in the future.</li> <li>See academic handbook for more info.</li> </ul>"},{"location":"course-info/01-syllabus/#how-to-succeed-in-this-course","title":"How to Succeed in this Course","text":"<ul> <li>Attend all class sessions.</li> <li>Complete all pre-class preparation assignments and reading.</li> <li>Complete all post-class follow up assignments and reading.</li> <li>Participate in tutorial sessions and office hours.</li> <li>Check your school email regularly.</li> <li>Log in to the course websites at least once each week.</li> <li>Communicate proactively with your instructor.</li> <li>Create a study schedule so that you don\u2019t fall behind on assignmentats.</li> </ul>"},{"location":"course-info/01-syllabus/#ai-and-the-use-of-chat-gpt","title":"AI and the Use of chat-GPT","text":"<p>Large-language models like ChatGPT will become an ever-more important tool going forward in the field of engineering.  This class, however, is intended to teach you to use both your own knowledge and the tools around you to solve problems related to flexible robotics.  In this class it is expected that you will do your own thinking, analysis, and learning.  It is also important to cite your references when using someone else's work.  Therefore, whenever you use chatGPT or a similar large-language model in completing assignments or projects, you must indicate what it was used for.  You should also include the text used in the query.  The citation can be included as a footnote, citation, or directly in your assignment text.  Queries can be attached at the end of the assignment.</p> <p>It is inappropriate to use chatGPT or other AI-related tools in quizzes and exams.</p>"},{"location":"course-info/01-syllabus/#schedule","title":"Schedule","text":"<p>The class schedule can be found on the course website.  It is subject to change, and will be updated regularly. It is your responsibility to keep track of all due dates and times.</p>"},{"location":"course-info/01-syllabus/#tentative-course-outline-might-change-depending-on-the-progression-of-the-course","title":"Tentative Course Outline (might change depending on the progression of the course)","text":"Week/Date Topics Covered Week 1 Introduction, flexible robot history, flexible robot fabrication methods Week 2 Biomechanics: muscles, workloops, inverted pendulum vs. SLIP, gaits, scaling laws. Manufacturing introduction Week 3 Biomechanics: bioinspiration in robotics. Kinematics: introduction, DoF, joints, linkages, mechanisms Week 4 Project I topics discussions. Kinematics: Jacobians, vectors and vector operations, loop closure equations Week 5 Kinematics: rotations and reference frames, constraints. Week 6 Dynamics: dyads, dyadics, mass and inertia, energy Week 7 Dynamics: forces, mass and inertia, triple pendulum example, project I presentations Week 8 Dynamics: modeling Week 9 Mechanics and compliance. Week 10 Fabrication tutorial. Manufacturing. Week 11 Manufacturing computation and algorithms in Python. Week 12 Tutorials (Tracker, FEA, Mass and inertia and Solidworks, Pseudo-rigid body modeling) Week 13 Design optimization and final prototyping. Week 14 Experimental validation. Student demonstrations. Week 15/16 FINAL EXAM"},{"location":"course-info/01-syllabus/#course-logistics","title":"Course Logistics","text":""},{"location":"course-info/01-syllabus/#software","title":"Software","text":"<ul> <li>You will be expected to install and use either the Anaconda distribution of Python, or use google colab, for completing all assignments and following along in class.</li> <li>This class is friendly to all operating systems.  Students have used Window, Ubuntu or OS/X on their own in the past with no problems.</li> <li>Please see the software list posted on the course site for more information about required and recommended software.  The software listed is either open-source and freely available to download, available through Bilkent, or free for student use.</li> </ul>"},{"location":"course-info/01-syllabus/#computers","title":"Computers","text":"<p>It is expected that you can bring a laptop to class to complete in-class programming tasks.  </p>"},{"location":"course-info/01-syllabus/#materials","title":"Materials","text":"<ul> <li>Students will be responsible for selecting and obtaining the consumable materials used in their project, such as cardboard, adhesive, plastic, etc.  </li> <li>We may be able to supply a limited number of parts and materials which can be used for development, but if students wish to keep their robots they will need to purchase their own components.</li> </ul>"},{"location":"course-info/01-syllabus/#equipment","title":"Equipment","text":"<p>Special equipment for making laminate robots may be available for use on campus at your discretion.  If you wish to use the tools and equipment you will need to pass all safety training required by the University.</p>"},{"location":"course-info/01-syllabus/#copyright","title":"Copyright","text":"<p>All course content and materials, including lectures are copyrighted materials. Students may not share outside the class, upload to online websites not approved by the instructor, sell, or distribute course content.</p>"},{"location":"course-info/01-syllabus/#notice","title":"Notice","text":"<p>Information in this syllabus is subject to change with reasonable advance notice.</p>"},{"location":"course-info/02-submission-best-practices/","title":"Submission Best Practices","text":"<p>This page details how to prepare assignments for submission.  The \"Submission\" section of your assignment should provide the details for what format and where to submit assignments.  This document should be used in conjunction with each assignment to ensure that all required files are submitted, and in the correct format.</p>"},{"location":"course-info/02-submission-best-practices/#general-document-preparation","title":"General Document Preparation","text":"<p>When answering questions, don't just answer the question, phrase the answer in a complete sentence which includes what the question asked. For example:</p> <p>Question:</p> <p>What is the sum of one and one?</p> <p>Response</p> <p>Two</p> <p>Instead, provide context and detail in your answer, like this:</p> <p>Question:</p> <p>What is the sum of one and one?</p> <p>Response:</p> <p>Our group found that the sum of one and one is two. This was verified in two ways. First we ran a simulation using the following code....</p> <p>Second we ran an experiment where we took M&amp;M's and counted how many there were when we put one next to another. We found the answer was two across ten experiments with a mean of 2 and standard deviation of 0.1 M&amp;M's. We attribute the error to the fact that Maxwell ate one.</p> <p>This will help when you transition from assignment reports to your final report. Please still include the question or at least the question number before your answer for the convenience of the grader.</p>"},{"location":"course-info/02-submission-best-practices/#figures-tables","title":"Figures &amp; Tables","text":"<p>Please include figures and tables inline with the text so that it is easy to find when referring to it in the text.  Figures may be composed of images, data-centric plots, or annotated graphics.  Here are some other guidelines:</p> <ul> <li>Use detailed subtitles.</li> <li>Utilize figure numbers when referring to them in the main body of the text. Utilize color schemes in figures which print well in color as well as black and white.</li> </ul>"},{"location":"course-info/02-submission-best-practices/#cad-renderings-or-screenshots","title":"CAD renderings or screenshots","text":"<ul> <li>Photo-realistic renderings look better than screenshots, but take longer to create. These will be required for final reports and presentations.</li> <li>Change background to white before taking screenshots.</li> <li>utilize multiple standard orientations (top, right, iso) in order to provide a clear picture of your design.</li> <li>include source CAD files as specified below</li> </ul>"},{"location":"course-info/02-submission-best-practices/#code-snippets","title":"Code Snippets","text":"<ul> <li>Code Snippets: you may include useful code snippets inline as long as they are well commented and referred to in the main body of the text, but source code must always be supplied in the manner specified below.</li> </ul>"},{"location":"course-info/02-submission-best-practices/#references","title":"References","text":"<p>Literary References must be used in body of your text, and supplied in a bibliography section at the end. ** Use IEEE format.** Reference managers such as Mendeley or Zotero can do this formatting for you automatically.</p>"},{"location":"course-info/02-submission-best-practices/#hyperlinks","title":"Hyperlinks","text":"<p>Plain text, unformatted hyperlinks should not be supplied in the main body of reports and documents. If you wish to use a hyperlink in the main body of a document, please use a footnote to the full-text link<sup>1</sup>. Please do not use masked links in text.</p>"},{"location":"course-info/02-submission-best-practices/#file-format-specific-instructions","title":"File Format-specific instructions","text":"<p>Different assignments may require you to submit documents and supporting files in a number of different formats.  Please see below for the submission guidelines for each file type</p>"},{"location":"course-info/02-submission-best-practices/#pdfs","title":"PDFs","text":"<p>If the document is requested as a pdf, produce a single, monolithic pdf with all document parts such as figures, tables, images, code snippets and references included inline.  </p> <p>When submitting pdf-based submissions, you should only attach two files: 1) the monolithic pdf, and 2) any supporting files in a separate .zip file.</p>"},{"location":"course-info/02-submission-best-practices/#webpages","title":"Webpages","text":"<p>If the document is requested as a web page, produce your site using markdown or html with all document parts such as figures, tables, images, and references embedded inline.  Inline files(media files, data, etc...) will need to be separately uploaded to the web host as well.  Supporting files may be uploaded to the host and linked from the web page.  You may use external sites to render uploaded jupyter notebooks rather than converting them to markdown, if desired.  See the tutorials for more information</p> <p>When submitting web-based assignments, submit the link to the web page and the underlying github repository.  Ensure that any supporting files in are linked from within the web page and render completely from a separate computer.</p>"},{"location":"course-info/02-submission-best-practices/#jupyter-notebooks","title":"Jupyter Notebooks","text":"<p>Jupyter submissions are convenient because they permit code, reporting, figures, photos, etc all to be housed within one dynamic document. This format is highly encouraged or required for many assignments.</p> <p>When you submit a Jupyter notebook, ensure that 1) the notebook has been fully compiled before submitting, and 2) that any external files are included either as a separate .zip file or, if the file is to be added to the website, uploaded to your web server.  The notebook can be recompiled by opening the file in the jupyter browser and in the top jupyter menu selecting \"Kernel\" --&gt; \"Restart and Run All\".</p> <p>If posting jupyter notebooks to a web page, there are two options: 1) download your jupyter notebook as a markdown file (or .zip) and upload that document, or link to the original .ipynb file using an external service.  </p> <p>If submitting jupyter assignments, Submit the source .ipynb file. Ensure that any supporting files are included in a separate .zip file and are also separately uploaded. Include your name or team # at the beginning of all notebooks.</p>"},{"location":"course-info/02-submission-best-practices/#other-code-python-microcontroller-etc","title":"Other Code (python, microcontroller, etc.)","text":"<p>Zip up all files used to run your code (outside of standard packages). Indicate any other packages you installed which are required to run it, where you got, them, how you installed them (conda, pip, etc), and what version you installed. The professor and TA should be able to run your code using the instructions and files provided. After finishing the code, print output as your name in the last line before submission.</p>"},{"location":"course-info/02-submission-best-practices/#cad","title":"CAD","text":"<p>Utilize Solidworks' File --&gt; \"Pack and Go\" Feature to include all files required to view parts and assemblies into a single zip file. Drawings in .dxf format must be exported to .pdf format and submitted separately. Make sure you include your name or team name.</p>"},{"location":"course-info/02-submission-best-practices/#videos","title":"Videos","text":"<p>You may be asked to submit or post recorded presentations or experiments as videos.  Due to space limitations, please embed these videos as embedded YouTube videos in web pages or link to their YouTube pages in .pdf documents. Please make sure the video is \"unlisted\" rather than \"private\" (\"public\" is also ok but is not required).  </p> <p>When taking videos, try to follow these general rules of thumb:</p> <ul> <li>Avoid messy background scenes.  Try to utilize blank backgrounds, or ensure the background does not distract from the action in the foreground</li> <li>Reduce unwanted noise in the scene.  Turn down music, avoid picking up background conversations, etc.</li> <li>Utilize a tripod if possible.  Stay away from handheld video</li> <li>Use landscape rather than portrait aspect ratio.</li> </ul>"},{"location":"course-info/02-submission-best-practices/#images","title":"Images","text":"<ul> <li>If you include an image of a hand-made origami element, over-draw each joint in a vector drawing program to highlight joint locations in the image.</li> </ul>"},{"location":"course-info/02-submission-best-practices/#slides-presentations","title":"Slides &amp; Presentations","text":"<p>Slides may be submitted in .pptx or pdf form. If submitting .pptx files, beware of linked (rather than embedded) videos, unembedded fonts, missing codecs, etc. I can't play -- or grade -- what's not included.</p> <p>If submitting pdf files of presentations, include any embedded videos separately as indicated in the videos section.</p> <ol> <li> <p>http://idealab.asu.edu \u21a9</p> </li> </ol>"},{"location":"course-info/03-parts-list/","title":"Parts List","text":""},{"location":"course-info/03-parts-list/#student-parts-turkey","title":"Student Parts (Turkey)","text":"Items Link units Lira/unit Subtotal Micro Servo link 1 37.1 37.1 Breadboarding wire bundle link 1 49 49 5V Power Supply link 1 139 139 Electrolytic Capacitor, 4700uF link 1 10.23 10.23 6' USB A to micro cable link 1 30.01 30.01 ESP32 link 1 123.69 123.69 Photoresistor link 2 2.73 5.46 Half-size breadboard link 1 66 66 Resistor matched to photoresistor n/a 2 0 0 Total 394.49"},{"location":"course-info/03-parts-list/#student-parts-us","title":"Student Parts (US)","text":"<p>Only one item is needed per student unless otherwise noted. The links below are for US-based bulk ordering.</p> Items Link Units / Student Micro Servo link 1 Breadboarding wire bundle link 1 5V Power Supply link 1 Electrolytic Capacitor, 4700uF link 1 6' USB A to micro cable link 1 ESP32 link 1 Photoresistor (order 2x per student) link 2 Half-size breadboard link 1 6.8kOhm Resistor (order 2x per student) link 2"},{"location":"course-info/03-parts-list/#class-materials-and-equipment","title":"Class Materials and Equipment","text":""},{"location":"course-info/03-parts-list/#adhesive","title":"Adhesive","text":"<p>This item is intended for use with roll laminators, irons, heat presses, etc and can be used to bond rigid materials to flexible materials</p> <p>Note: My previous material is now unavailable, but I think this should be a good alternative</p> Item Link Heat-Activated Adhesive(Roll) link"},{"location":"course-info/03-parts-list/#flexure-materials","title":"Flexure Materials","text":"<p>Also searchable as \"Grafix Duralar\" on amazon</p> Item Link Clear Moisture-Resistant Polyester Film, 40\"x25'x0.001\" link Clear Moisture-Resistant Polyester Film, 40\"x25'x0.002\" link"},{"location":"course-info/03-parts-list/#rigid-materials","title":"Rigid Materials","text":"<p>If you have a good art supply store in the area, there isn't as much need to order ahead. These are just examples</p> Item Link 6-ply railroad board, 22x28 link"},{"location":"course-info/03-parts-list/#laminator","title":"Laminator","text":"<p>https://www.amazon.com/SINCHI-50-Second-Business-Laminating-laminator/dp/B09DYG8K9M/</p>"},{"location":"course-info/03-parts-list/#vinyl-cutter","title":"Vinyl Cutter","text":"<p>https://signwarehouse.com/collections/vinyl-cutters/products/muse-m15-crafters-starter-bundle</p>"},{"location":"lecture-notes/","title":"Lecture Outline","text":""},{"location":"lecture-notes/#class-0","title":"Class 0","text":"<p>9-14-2023</p> <p>(Not held due to late addition)</p>"},{"location":"lecture-notes/#class-1-welcome-and-introduction","title":"Class 1: Welcome and Introduction","text":"<p>9-19-2023</p> <ul> <li>Welcome to Flexible Robotics</li> <li>Go over syllabus<ul> <li>Discuss Course topics</li> </ul> </li> <li>Discuss course logistics<ul> <li>Discuss software-based tools<ul> <li>python</li> </ul> </li> <li>Discuss parts and materials</li> </ul> </li> <li>Go over course websites</li> <li>Lecture: Intro to Flexible Robotics</li> </ul> <p>After:</p> <ul> <li>Share Prior course projects</li> <li>Release Survey</li> <li>Release Assignment 1</li> </ul>"},{"location":"lecture-notes/#class-2-kinematics-i-and-prototyping","title":"Class 2: Kinematics I and Prototyping","text":"<p>9-21-2023</p> <p>Before Class:</p> <ul> <li>bring materials</li> </ul> <p>Class:</p> <ul> <li>Minutae<ul> <li>Discuss Assignment 1</li> <li>Installing Python tutorial / task</li> <li>Discuss Survey</li> </ul> </li> <li>Activity: Prototyping Exercise I<ul> <li>parts/materials needed:<ul> <li>cardstock(recommended), cardboard, or thick paper</li> <li>staplers</li> <li>tape/gluesticks</li> <li>scissors</li> </ul> </li> </ul> </li> <li>Lecture: Kinematics I<ul> <li>Mechanisms</li> <li>Linkages</li> <li>Joints<ul> <li>types</li> <li>Degrees of Freedom</li> </ul> </li> <li>Links</li> <li>System Degrees of Freedom<ul> <li>counting</li> </ul> </li> <li>Origami and Kirigami equivalents</li> </ul> </li> </ul>"},{"location":"lecture-notes/#class-3-kinematics-ii-intro-to-kinematics","title":"Class 3: Kinematics II -- Intro to Kinematics","text":"<p>9-26-2023</p> <ul> <li>Minutae<ul> <li>HW updates and questions.</li> <li>Board images?</li> <li>Discuss Solidworks and autodesk fusion</li> </ul> </li> <li>Wrap up previous lecture<ul> <li>topology</li> </ul> </li> <li>Lecture: Classical Robot Kinematics<ul> <li>Frames</li> <li>Basis Vectors</li> <li>Vectors</li> <li>Rotations</li> <li>Expressing vectors in other reference frames</li> <li>Python Topics<ul> <li>sympy</li> <li>numpy</li> <li>scipy</li> </ul> </li> </ul> </li> <li>Activity: Rotation matrices in Python</li> </ul>"},{"location":"lecture-notes/#class-4-kinematics-iii-sympy-and-quaternions","title":"Class 4: Kinematics III -- Sympy and Quaternions","text":"<p>9-28-2023</p> <ul> <li>Lecture: Kinematics III<ul> <li>Quaternions</li> <li>Sympy and symbolic operations in Python</li> </ul> </li> <li>Activity:<ul> <li>Code up a simple quaternion Class</li> <li>Demonstrate Sympy Usage</li> <li>Solve for a triangle with given lengths in Python/Sympy</li> </ul> </li> </ul>"},{"location":"lecture-notes/#class-5-kinematics-iv-vectors-constraints-and-jacobians","title":"Class 5: Kinematics IV -- Vectors, Constraints, and Jacobians","text":"<p>10-03-2023</p> <ul> <li>Lecture: Kinematics IV<ul> <li>Vector Math<ul> <li>cross, dot</li> <li>Solving geometric problems with vectors</li> </ul> </li> <li>constraints<ul> <li>what are constraints</li> <li>how do you formulate them?</li> </ul> </li> <li>solving nonlinear equations<ul> <li>theory</li> <li>in python</li> </ul> </li> <li>nonlinear optimization</li> <li>Activity: Solve triangle based on lengths</li> <li>Jacobians<ul> <li>velocity in to velocity out</li> <li>Partial Derivatives</li> <li>Virtual Work theorem</li> <li>Force/Torque</li> </ul> </li> <li>Symbolic</li> <li>Activity: Geogebra<ul> <li>four-bar (planar)</li> </ul> </li> </ul> </li> </ul>"},{"location":"lecture-notes/#class-6-kinematics-v-jacobians-continued","title":"Class 6: Kinematics V -- Jacobians Continued","text":"<p>10-05-2023</p> <ul> <li>Lecture: Kinematics V<ul> <li>Numerical jacobians</li> <li>Serial kinematics</li> </ul> </li> <li>Activity: Deriving symbolic jacobians with sympy.</li> <li>Activity: Using motion path to determine numerical Jacobian, estimate forces, speed, and power.  Work on kinematics example in class.</li> </ul>"},{"location":"lecture-notes/#class-7-kinematics-vi-and-biomechanics-i","title":"Class 7: Kinematics VI and Biomechanics I","text":"<p>10-10-2023</p> <ul> <li>Lecture: Kinematics VI -- Cleanup<ul> <li>Jacobians for parallel mechanisms</li> <li>Inverse Kinematics</li> <li>DH Parameters</li> </ul> </li> <li>Activity: Solidworks / Fusion<ul> <li>four-bar (spherical)</li> </ul> </li> <li>Lecture: Biomechanics I -- Introduction to Biomechanics<ul> <li>Muscles<ul> <li>How they work</li> <li>Forces</li> </ul> </li> <li>Work loops</li> </ul> </li> <li>Activity: Form Project Teams</li> </ul>"},{"location":"lecture-notes/#class-8-flex-day","title":"Class 8: Flex Day","text":"<p>10-12-2023</p> <ul> <li>Lecture: Kinematics Review<ul> <li>Transforming points with quaternions</li> <li>Expressing vectors in another frame with quaternions</li> <li>Four-bar</li> <li>Python Examples<ul> <li>expand quaternion code</li> <li>adapt triangle code to four bar linkage</li> <li>adapt four-bar linkage example to implicit joint angles example</li> </ul> </li> </ul> </li> </ul> <p>Extra Hour</p>"},{"location":"lecture-notes/#class-9-biomechanics-ii","title":"Class 9: Biomechanics II","text":"<p>10-17-2023</p> <ul> <li>Lecture<ul> <li>Locomotion<ul> <li>Types of locomotion</li> </ul> </li> <li>Gaits</li> <li>CPGs</li> </ul> </li> </ul>"},{"location":"lecture-notes/#class-10-dynamics-i","title":"Class 10: Dynamics I","text":"<p>10-19-2023</p> <ul> <li>Lecture: Wrap up Biomechanics II</li> <li>Lecture: Dynamics I<ul> <li>Introduction to Mujoco</li> <li>XML Walkthrough</li> </ul> </li> <li>Activity: Translations, Rotations, and Parent/Child relationship in Mujoco</li> </ul>"},{"location":"lecture-notes/#class-11-dynamics-ii","title":"Class 11: Dynamics II","text":"<p>10-24-2023</p> <ul> <li>Lecture: Dynamics II<ul> <li>Finishing the \"transformations\" example<ul> <li>Case Study 1</li> <li>Case Study 2</li> </ul> </li> <li>Double Pendulum Example<ul> <li>XML Walkthrough</li> <li>Python code</li> <li>Parent Child</li> <li>Plotting Data</li> <li>Saving Data to a file</li> <li>Setting Initial Conditions</li> <li>Adding other Joint parameters</li> <li>Adding separate inertial tag</li> <li>Specifying Gravity</li> <li>Specifying Timestep</li> <li>Enabling Contact</li> </ul> </li> </ul> </li> </ul>"},{"location":"lecture-notes/#class-12-dynamics-iii","title":"Class 12: Dynamics III","text":"<p>Extra Hour</p> <p>10-26-2023</p> <ul> <li>Lecture Topics: Wrap up Double Pendulum Example<ul> <li>Changing Render Resolution</li> <li>Outputting rendering to a file</li> <li>Actuators</li> <li>Controllers</li> <li>Constraints</li> <li>Sensors</li> <li>String templates</li> </ul> </li> <li>Midterm Prep and HW discussion</li> </ul>"},{"location":"lecture-notes/#class-13-midterm","title":"Class 13: Midterm","text":"<p>10-31-2023</p>"},{"location":"lecture-notes/#class-14","title":"Class 14","text":"<p>11-02-2023</p> <ul> <li>Finish HW2 Discussion</li> <li>Discuss HW3</li> <li>Distribute Parts</li> <li>New Anaconda Packages</li> <li>ESP 32 / VSCode / Servo Demonstration</li> <li>Servo example</li> </ul>"},{"location":"lecture-notes/#class-15","title":"Class 15","text":"<p>11-07-2023</p> <ul> <li>HW4 Released</li> <li>HW3 Final questions</li> <li>Project Due Friday</li> <li>VSCode Install Issues</li> <li>Compliance</li> <li>Finish Servo Example</li> </ul>"},{"location":"lecture-notes/#class-16","title":"Class 16","text":"<p>11-09-2023</p> <p>Extra Hour</p> <ul> <li>Project Due Friday</li> <li>Servos code shared</li> <li>Compliance wrapup</li> <li>Mass and Inertia Lecture</li> <li>Mass and Inertia Example</li> <li>Using HW3 in projects</li> </ul>"},{"location":"lecture-notes/#class-17","title":"Class 17","text":"<p>11-14-2023</p> <ul> <li>Project 2 Part 1 Posted<ul> <li>Due in 2 weeks</li> <li>Part 2 due Dec 14</li> </ul> </li> <li>Project 1 and Midterm grading will be returned next week.</li> <li>Released more tutorials based on lectures<ul> <li>added info to lec 12 notes (motor controller)</li> </ul> </li> <li>Assignment plan going forward</li> <li>Lecture<ul> <li>Motor Theory and Modeling</li> </ul> </li> <li>Activity<ul> <li>Go through data collection exercise</li> <li>Inertia Calc in Solidworks</li> </ul> </li> <li>Final Exam: Dec 19, in class</li> </ul>"},{"location":"lecture-notes/#class-18","title":"Class 18","text":"<p>11-16-2023</p> <ul> <li>Office Hour oops</li> <li>HW3 Grading Update</li> <li>Project 2 Part 1 Questions?<ul> <li>Meeting scheduled with 1 team</li> <li>find a time with me</li> </ul> </li> <li>Released more motor tutorials<ul> <li>motor theory</li> <li>Steady-state walkthrough</li> <li>second-order</li> <li>first-order</li> <li>first-order lumped</li> </ul> </li> <li>Today:<ul> <li>Series Damping and Compliance</li> <li>Motor \\(k_e\\) / \\(k_e\\) slope</li> <li>Homework walkthrough</li> <li>Psuedo-rigid-body model approximations</li> <li>Inertia Calc in Solidworks</li> </ul> </li> </ul>"},{"location":"lecture-notes/#class-19","title":"Class 19","text":"<p>11-21-2023</p> <ul> <li>Traveling this week, No Class Thursday</li> <li>Office Hours Wednesday TBD</li> <li>HW3 Grading Update</li> <li>Project 2 Part 2 Posted. Due Dec 14.</li> <li>Today:<ul> <li>Psuedo-rigid-body model approximations</li> <li>Servo Modeling</li> <li>Design Optimization</li> <li>Solver setup</li> <li>Four-bar spherical linkage example</li> </ul> </li> <li>Midterm and Project Grades Released</li> <li>HW5 will be worked through in-class on Tuesday.</li> </ul>"},{"location":"lecture-notes/#class-20","title":"Class 20","text":"<p>11-23-2023</p> <p>(Not held due to travel.  Makeup hours added to other classes)</p>"},{"location":"lecture-notes/#class-21","title":"Class 21","text":"<p>11-28-2023</p> <ul> <li>HW3 Released</li> <li>Go over practical example of design optimization with Burak and Yigit<ul> <li>Show simulation</li> <li>discuss optimization</li> <li>show robot</li> </ul> </li> <li>In-class flex-time to work on HW5 (Design Optimization)</li> </ul>"},{"location":"lecture-notes/#class-22","title":"Class 22","text":"<p>11-30-2023</p> <ul> <li>HW3 Released</li> <li>HW4 Grading update</li> <li>Servo Mounting Solutions</li> <li>In-class flex-time to work on HW5 (Design Optimization)<ul> <li>Discuss and implement different types of optimizers / algorithms available</li> </ul> </li> </ul>"},{"location":"lecture-notes/#class-23","title":"Class 23","text":"<p>12-05-2023</p> <ul> <li>IDEAlab Research talk (with a focus on experimentation)</li> </ul>"},{"location":"lecture-notes/#class-24","title":"Class 24","text":"<p>12-07-2023</p> <ol> <li>Go over HW4<ul> <li>No one discussed their results</li> <li>no one plotted their results</li> <li>Many optimization results were wrong</li> </ul> </li> <li>In-class time to work on HW6<ul> <li>Have a student come up to the front to do the coding</li> <li>help them convert hw5 code to a sliding friction example</li> <li>We got to the point where the simulation runs, you can change the angle of the ramp and the system starts at 1m/s, at the right height<ul> <li>change the friction coefficient to show how the box either accelerates or decelerates</li> </ul> </li> <li>The homework will be due after next class so students can ask questions, but we won't work on it next Tues</li> </ul> </li> </ol>"},{"location":"lecture-notes/#class-25","title":"Class 25","text":"<p>12-12-2023</p> <ul> <li>Lecture: Data Collection and Verification</li> </ul>"},{"location":"lecture-notes/#class-26","title":"Class 26","text":"<p>12-14-2023</p> <ul> <li>Lecture: Today's Lecture is based off of several sources:<ul> <li>Fabrication Process:  </li> <li>Video Tutorial of the Process</li> <li>Shapely tutorial</li> <li>manufacturing computation</li> <li>Cut-File Generation</li> </ul> </li> <li>Final Demonstration of Robots</li> </ul>"},{"location":"lecture-notes/#class-27","title":"Class 27","text":"<p>12-19-2023</p> <ul> <li>Final Exam Held in class</li> </ul> <ul> <li>HW4 Questions</li> <li> <p>If there's time: Go over HW3</p> <ul> <li>Present Projects</li> </ul> </li> <li> <p>Motor Theory and Modeling</p> </li> <li>Scaling Simulations</li> <li>Go over HW2</li> <li>Go over HW3</li> <li>Go over HW4</li> <li>Releasing Ground</li> <li>Measuring Contact Forces</li> <li>Altering solver parameters</li> </ul>"},{"location":"lecture-notes/#class-13","title":"Class 13","text":"<ul> <li>Discuss HW3</li> <li> <p>Activity: programming a gait in ESP32</p> </li> <li> <p>Lecture: Masses and Inertias</p> <ul> <li>Mass</li> <li>Center of Mass</li> <li>Inertia<ul> <li>example problem with a particle particle particle pendulum with ball joints</li> </ul> </li> <li>why do you get numerical issues</li> <li>kinetic energy of a body<ul> <li>show in triple pendulum example</li> </ul> </li> </ul> </li> <li>Lecture Simulating Motors and Servos</li> </ul>"},{"location":"lecture-notes/#class-compliant-mechanisms","title":"Class: Compliant Mechanisms","text":""},{"location":"lecture-notes/#misc-topics","title":"Misc Topics","text":"<ul> <li>Simulating a spherical mechanism</li> </ul>"},{"location":"lecture-notes/#class-dynamics-iii-forces-energy","title":"Class: Dynamics III: Forces &amp; Energy","text":"<ul> <li>Lecture<ul> <li>damping</li> <li>friction</li> <li>torsional friction</li> <li>how to add / apply forces in pynamics</li> <li>potential energy<ul> <li>spring</li> </ul> </li> </ul> </li> </ul> <p>Present on Project 1</p>"},{"location":"lecture-notes/#class-dynamics-iv","title":"Class: Dynamics IV","text":"<ul> <li>Discussion<ul> <li>non-ideal behavior -- where does your model go wrong?<ul> <li>beam stiffness *joint stiffness</li> <li>damping due to material / loss</li> <li>masses and inertias</li> <li>resistance of a fluid</li> <li>granular material interactions</li> <li>knowledge of friction coefficient between materials</li> <li>motor parameters - stall torque, current, KV, resistance, inertia, inductance, etc</li> </ul> </li> <li>will be selecting materials and motors, will be measuring values, and bringing it back together.</li> <li>improve dynamic model</li> <li>how to collect data</li> <li>manufacturing</li> </ul> </li> <li>Activity<ul> <li>system dynamics drafts checkin</li> </ul> </li> <li>Lecture: Dynamics IV modeling grab bag<ul> <li>scaling issues<ul> <li>tutorial/example: unit scaling example</li> </ul> </li> <li>breaking ground constraints</li> </ul> </li> </ul>"},{"location":"lecture-notes/#class-dynamics-v","title":"Class: Dynamics V","text":"<ul> <li>Lecture: Dynamics IV<ul> <li>breaking free from ground</li> </ul> </li> <li>Tutorial / Example: falling rod example<ul> <li>add new variables</li> <li>add new contact / friction forces</li> <li>change friction properties</li> </ul> </li> <li>Tutorial / Example: four-bar dynamics with unit scaling<ul> <li>kinematic solution for valid initial configuration</li> <li>differentiating constraints and adding them</li> <li>scaling</li> </ul> </li> <li>Lecture: Dynamics IV<ul> <li>Flat plate models and the rest of the slides</li> </ul> </li> <li>Activity: project work and flex time</li> </ul>"},{"location":"lecture-notes/lecture-01/","title":"Lecture 1 Notes","text":""},{"location":"lecture-notes/lecture-01/#course-overview","title":"Course Overview","text":""},{"location":"lecture-notes/lecture-01/#vocabulary","title":"Vocabulary","text":"<ul> <li>Rigid</li> <li>Adaptive</li> <li>Stiff vs Compliant</li> <li>Flexible</li> <li>Soft</li> <li>Series Elastic eg (\"Series Elastic Actuator\")</li> <li>Reflected inertia</li> <li>Continuum</li> <li>RHEX Robot</li> <li>Cost of Transport (COT)</li> <li>Degrees of Freedom (DOF)</li> <li>Strain</li> <li>Material</li> <li>Adaptive: responds to forces</li> <li>Flexible</li> <li>Stiff materials vs. stiff systems</li> <li>Passive</li> </ul>"},{"location":"lecture-notes/lecture-01/#rigid-robots","title":"Rigid Robots","text":"<p>Traditionally, robots have been</p> <ul> <li>rigid</li> <li>highly-geared</li> <li>heavy</li> <li>slow</li> <li>unsafe</li> <li>expensive</li> </ul>"},{"location":"lecture-notes/lecture-01/#soft-robots","title":"Soft Robots","text":"<ul> <li>typically involves \"soft\" materials<ul> <li>silicone and other rubbers</li> <li>pneumatic actuation</li> </ul> </li> <li>limited modeling capabilities</li> </ul>"},{"location":"lecture-notes/lecture-01/#modeling-challenge","title":"Modeling Challenge","text":""},{"location":"lecture-notes/lecture-01/#exemplar-flexible-robots","title":"Exemplar Flexible Robots","text":"<p>series elastic | flexure mechanisms</p> <ul> <li>Arms</li> <li>Legs</li> <li>Wings</li> <li>Flippers</li> <li>Grippers / Hands</li> </ul>"},{"location":"lecture-notes/lecture-01/#example","title":"Example","text":""},{"location":"lecture-notes/lecture-01/#birdbot","title":"Birdbot","text":""},{"location":"lecture-notes/lecture-01/#flexure-mechanisms","title":"Flexure Mechanisms","text":""},{"location":"lecture-notes/lecture-01/#scram-mechanisms","title":"SCRAM Mechanisms","text":"<p>Soft Curved Reconfigurable Anisotropic Mechanisms  </p>"},{"location":"lecture-notes/lecture-01/#flexible-robots","title":"Flexible Robots","text":"<p>Can be</p> <ul> <li>lighter</li> <li>simpler</li> <li>safer</li> <li>sensing-compatible</li> </ul> <p>Can also be</p> <ul> <li>slower</li> <li>harder to control</li> <li>...</li> </ul> <p>* there are always exceptions</p>"},{"location":"lecture-notes/lecture-01/#case-study","title":"Case Study","text":""},{"location":"lecture-notes/lecture-01/#comparison","title":"Comparison","text":"Aspect Rigid Flexible Soft Joints mechanical joints soft links or joints with springs No joints; weaker or stiffer regions Strain none bending stretching Materials stiff mixed soft DOFs fully actuated specific, passive DOFs completely soft Dynamics simple more complex intractable for common use"},{"location":"lecture-notes/lecture-01/#foldable-mechanisms","title":"Foldable Mechanisms","text":"<p>one type of flexible mechanism</p>"},{"location":"lecture-notes/lecture-01/#foldable-mechanisms_1","title":"Foldable Mechanisms","text":"<ul> <li>Use affordable materials</li> <li>Accessible, planar fabrication techniques</li> <li>Compliance accompanies material / geometry choice</li> <li>Can add benefits of flexible systems to the precision rigid, kinematics-driven systems</li> </ul>"},{"location":"lecture-notes/lecture-01/#in-this-class","title":"In this class","text":"<p>we will study</p> <ul> <li>traditional mechanisms<ul> <li>how to prototype &amp; analyze them</li> </ul> </li> <li>flexible material systems<ul> <li>how to build flexibility into selected materials</li> </ul> </li> <li>rapid prototyping techniques<ul> <li>how to compute and fabricate flexible robots</li> </ul> </li> <li>dynamics of flexible systems<ul> <li>how to create simple but sufficient models</li> </ul> </li> <li>experimental characterization, validation, and optimization<ul> <li>how to close the design loop</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-01/#characterization-example","title":"Characterization Example","text":"<p>private media shown in class</p>"},{"location":"lecture-notes/lecture-01/#model-fitting","title":"Model Fitting","text":"<p>private media shown in class</p>"},{"location":"lecture-notes/lecture-01/#applications-for-fit-models","title":"Applications for Fit Models","text":"<p>private media shown in class</p>"},{"location":"lecture-notes/lecture-01/#optimization","title":"Optimization","text":"<p>private media shown in class</p>"},{"location":"lecture-notes/lecture-01/#recent-projects-from-foldable-robotics","title":"Recent Projects from Foldable Robotics","text":""},{"location":"lecture-notes/lecture-01/#2021-2022-projects","title":"2021-2022 Projects","text":"Team Website Final Presentation 1 https://ajcrouch.github.io/SalamaderRobot.github.io/ https://www.youtube.com/watch?v=GTOWfeRm0v4 2 https://aniiot.github.io/Foldable_Robotics_Team_2_Swimming/ https://www.youtube.com/watch?v=5slSRJoQ5 3 https://schen304joseph.github.io/team3.github.io/ https://www.youtube.com/watch?v=SO6cIK69wg0 4 https://matt-nolan11.github.io/ https://www.youtube.com/watch?v=7N7I_g8Vz8A 5 https://bornamm.github.io/EGR557.Gripper.github.io/ https://bornamm.github.io/EGR557.Gripper.github.io/Finalpresentation.mp4 6 https://tessellationrobot.github.io/ https://www.youtube.com/watch?v=nSZbOi5HaqA 7 n/a https://www.youtube.com/watch?v=6jy8N0BB_gE"},{"location":"lecture-notes/lecture-02/","title":"Lecture 2 Notes","text":""},{"location":"lecture-notes/lecture-02/#kinematics","title":"Kinematics","text":""},{"location":"lecture-notes/lecture-02/#keywords","title":"Keywords","text":"<ul> <li>Machine</li> <li>Mechanism</li> <li>Linkage</li> <li>Link</li> <li>Joint</li> <li>Degrees of Freedom</li> <li>System</li> <li>Cross-sectional moment of inertia</li> <li>Proximal / distal</li> <li>End-effector</li> <li>Flexure</li> </ul>"},{"location":"lecture-notes/lecture-02/#why-are-we-talking-about-foldable-mechanisms","title":"Why are we talking about foldable mechanisms?","text":"<ul> <li>Robots are mechanisms, or machines.</li> <li>Serial vs. Parallel</li> <li>Composed of links and joints</li> </ul>"},{"location":"lecture-notes/lecture-02/#kinematics_1","title":"Kinematics","text":"<p>branch of physics and a subdivision of classical mechanics concerned with the geometrically possible motion of a body or system of bodies without consideration of the forces involved (i.e., causes and effects of the motions).</p> <p>Britannica, The Editors of Encyclopaedia. \"kinematics\". Encyclopedia Britannica, Invalid Date, https://www.britannica.com/science/kinematics. Accessed 24 January 2022.</p>"},{"location":"lecture-notes/lecture-02/#not-to-be-confused-with","title":"Not to be confused with","text":""},{"location":"lecture-notes/lecture-02/#kinetics","title":"Kinetics","text":"<p>branch of classical mechanics that concerns the effect of forces and torques on the motion of bodies having mass. Authors using the term kinetics apply the nearly synonymous name dynamics (q.v.) to the classical mechanics of moving bodies.</p> <p>Britannica, The Editors of Encyclopaedia. \"kinetics\". Encyclopedia Britannica, Invalid Date, https://www.britannica.com/science/kinetics. Accessed 24 January 2022.</p>"},{"location":"lecture-notes/lecture-02/#mechanisms","title":"Mechanisms","text":""},{"location":"lecture-notes/lecture-02/#mechanisms_1","title":"Mechanisms","text":"<ul> <li>A system of parts working together in a machine; a piece of machinery.</li> <li>https://en.wikipedia.org/wiki/Mechanism_(engineering)</li> <li>https://languages.oup.com/google-dictionary-en/</li> </ul>"},{"location":"lecture-notes/lecture-02/#linkage","title":"Linkage","text":"<ul> <li>A type of mechanism</li> <li>Refers to a system of rigid bodies connected by joints or links</li> <li>Allow relative motion between them.</li> <li>Used to transmit and control motion or force in mechanical systems.</li> </ul> <p>&lt;https://en.wikipedia.org/wiki/Linkage_(mechanical)&gt;</p>"},{"location":"lecture-notes/lecture-02/#serial-mechanisms","title":"Serial Mechanisms","text":"<ul> <li>A serial mechanism, serial chain or serial linkage</li> <li>a mechanical system in which components or links are arranged in a linear sequence,<ul> <li>Each component is connected to the one before and after it.</li> <li>The output motion or force is transmitted through each link in a sequential manner from the input to the final output.</li> </ul> </li> <li>Motion or force is transmitted through a series of interconnected links or elements, typically connected by joints or hinges.</li> <li>Each link is responsible for transmitting or transforming the input motion or force to the next link in the chain, until it reaches the final output.</li> </ul>"},{"location":"lecture-notes/lecture-02/#parallel-mechanisms","title":"Parallel Mechanisms","text":"<ul> <li>A mechanical system consisting of multiple interconnected links that are</li> <li>Connected in a way that allows them to move simultaneously and independently of each other.</li> <li>Links are arranged in a parallel configuration, meaning they share a common base and have multiple patways to one or more end-effectors.</li> <li>Example: Delta robot. A Delta robot<ul> <li>consists of three parallel arms connected to a base</li> <li>connected also to a distal common platform (end-effector).</li> <li>Each arm has multiple joints that allow it to move in various directions.</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-02/#link","title":"Link","text":"<p>An intermediate rod or piece for transmitting force or motion; especially, a short connecting rod with a hole or pin at each end.</p>"},{"location":"lecture-notes/lecture-02/#joints","title":"Joints","text":"<ul> <li>The connections between rigid bodies, which facilitate motion</li> <li>Many different kinds of joints with different degrees of freedom</li> <li>Folded devices use systems of joints</li> </ul> <p>Flores, Paulo &amp; Lankarani, Hamid. (2016). Contact Force Models for Multibody Dynamics.</p>"},{"location":"lecture-notes/lecture-02/#more-complex-joints","title":"More Complex Joints","text":"<p>Chase, Kenneth &amp; Magleby, Spencer &amp; Glancy, Charles. (2000). A Comprehensive System for Computer-Aided Tolerance Analysis of 2-D and 3-D Mechanical Assemblies. 10.1007/978-1-4615-5797-5_23.</p>"},{"location":"lecture-notes/lecture-02/#joints_1","title":"Joints","text":"<p>https://24.media.tumblr.com/tumblr_mck6ejg15N1r0v3zro3_1280.jpg</p>"},{"location":"lecture-notes/lecture-02/#biological-joint-types","title":"Biological Joint Types","text":""},{"location":"lecture-notes/lecture-02/#linkage-inspiration","title":"Linkage Inspiration","text":""},{"location":"lecture-notes/lecture-02/#degrees-of-freedom","title":"Degrees of Freedom","text":"<ul> <li>Refer to the number of independent ways an object or system can move.</li> <li>\u201cThe number of independent parameters that define its configuration or state\u201d</li> <li>Represents the different directions or types of motion that an object is capable of.</li> </ul> <p>https://en.wikipedia.org/wiki/Degrees_of_freedom_(mechanics)</p>"},{"location":"lecture-notes/lecture-02/#simple-example","title":"Simple example","text":"<p>The position of a single railcar (engine) moving along a track.  </p> <p>. . .</p> <p>How many degrees of freedom does it have?</p>"},{"location":"lecture-notes/lecture-02/#body-example","title":"Body Example","text":"<p>A rigid body in space has 6 degrees of freedom.  </p> <p>. . .</p> <p>Can you list them?</p>"},{"location":"lecture-notes/lecture-02/#prototyping-activity","title":"Prototyping Activity","text":""},{"location":"lecture-notes/lecture-02/#origami-and-kirigami","title":"Origami and Kirigami","text":""},{"location":"lecture-notes/lecture-02/#partsmaterials-needed","title":"parts/materials needed","text":"<ul> <li>paper, cardboard, cardstock, posterboard</li> <li>scissors</li> <li>stapler</li> <li>tape/gluesticks</li> </ul>"},{"location":"lecture-notes/lecture-02/#joint","title":"Joint","text":"<ol> <li>Cut a long thin rectangle</li> <li>Bend in the middle until it is weakened</li> </ol>"},{"location":"lecture-notes/lecture-02/#discussion","title":"Discussion","text":"<ul> <li>What are some different ways to make a joint?</li> <li>What joints can you make with only origami/kirigami techniques?</li> <li>How can you weaken material to create a better joint?<ul> <li>\u2026</li> <li>\u2026</li> <li>\u2026</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-02/#link_1","title":"Link","text":""},{"location":"lecture-notes/lecture-02/#discussion_1","title":"Discussion","text":"<ul> <li>How can you stiffen material to create a better link?<ul> <li>\u2026</li> <li>\u2026</li> <li>\u2026</li> </ul> </li> <li>Engineering Context: I-beams</li> </ul>"},{"location":"lecture-notes/lecture-02/#try-them","title":"Try them","text":"<ul> <li>stiffening a link with trianglular cross-section</li> </ul>"},{"location":"lecture-notes/lecture-02/#serial-mechanisms_1","title":"Serial Mechanisms","text":"<ul> <li>Cut a long thing strip</li> <li>Make one Joint</li> <li>Attach to desk</li> <li>Add mass</li> </ul>"},{"location":"lecture-notes/lecture-02/#activity","title":"Activity","text":"<p>Make a four-bar linkage</p>"},{"location":"lecture-notes/lecture-02/#discussion_2","title":"Discussion","text":"<p>What are the disadvantages of developing serial-chain mechanisms with flexible materials?</p>"},{"location":"lecture-notes/lecture-02/#benefits-of-parallel-mechanisms","title":"Benefits of Parallel Mechanisms","text":"<ul> <li>Flexible robotic systems are soft</li> <li>Flexure hinges are not perfect pin joints; they allow torsion</li> <li>Serial mechanisms thus are exhibit a lot of non-ideal behavior<ul> <li>drooping</li> <li>Slower &amp; less responsive</li> <li>Less stable behavior</li> <li>Less precise</li> <li>unintended drooping and twisting</li> <li>distally mounted actuators (or more packaging to transmit joint forces to distal joints)</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-02/#conversely-parallel-joints","title":"Conversely, Parallel joints","text":"<ul> <li>Increase system stiffness in directions orthogonal to motion</li> <li>Permit actuators to be mounted proximally</li> <li>leads to more precise and faster behavior</li> <li>Permits the use of softer materials because overall loads are lower.</li> </ul>"},{"location":"lecture-notes/lecture-02/#parallel-mechanisms_1","title":"Parallel Mechanisms","text":"<ul> <li>Planar Mechanisms<ul> <li>four-bar linkage ()</li> <li>inverse four-bar</li> <li>five-bar linkage</li> <li>...</li> </ul> </li> <li>Spherical Mechanisms<ul> <li>4, 5, and 6-bar spherical ball joint</li> </ul> </li> <li>More Complex Linkages<ul> <li>Sarrus Mechanisms</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-02/#topology","title":"Topology","text":"<ul> <li>related to the network of links and joints</li> <li>related to math &amp; graph theory</li> <li>not to geometry of links, dimensions, etc.</li> <li>different ways exist to fabricate the same topology with foldable techniques</li> </ul>"},{"location":"lecture-notes/lecture-02/#topological-analogs-four-bar","title":"Topological Analogs -- Four-bar","text":"<ul> <li>four bar next to each other</li> <li>four bar looped around.</li> </ul>"},{"location":"lecture-notes/lecture-02/#topological-analogs-sarrus","title":"Topological Analogs -- Sarrus","text":"<p>media shown in class</p> <p>By Van helsing at English Wikipedia, CC BY 2.5, https://commons.wikimedia.org/w/index.php?curid=47496305 http://www.cutoutfoldup.com/1703-sarrus-straight-line-polyhedral-linkage.php</p>"},{"location":"lecture-notes/lecture-02/#applications","title":"Applications","text":"<ul> <li>straight line mechanismss</li> <li>solar panel</li> <li>wings and fins</li> </ul>"},{"location":"lecture-notes/lecture-02/#types-of-linkages","title":"Types of Linkages","text":"<ul> <li>Planar</li> <li>four-bar</li> <li>five-bar</li> <li>six-bar</li> <li>\u2026</li> <li>Spherical</li> <li>four-bar</li> <li>five-bar</li> <li>six-bar</li> <li> <p>\u2026</p> </li> <li> <p>Other:</p> </li> <li>Sarrus</li> <li>Straight-line</li> <li>Slider-Crank</li> <li>More Info</li> <li>https://en.wikipedia.org/wiki/Linkage_(mechanical)#Image_gallery</li> <li>https://engineering.library.cornell.edu/kmoddl/</li> </ul>"},{"location":"lecture-notes/lecture-02/#activity_1","title":"Activity","text":"<ul> <li>Find an example of a simple, or complicated pop up book.</li> <li>Once you have found one, provide the link in the text box on your screen and be prepared to discuss the types of linkages, mechanisms, and joints demonstrated by your example.</li> <li>Get out construction paper, scissors, staplers, etc</li> <li>Create at least one flip book page using any combination of mechanisms.</li> <li>As a team combine your pages into one book.</li> </ul>"},{"location":"lecture-notes/lecture-02/#extra-vocab","title":"Extra Vocab","text":"<ul> <li>end-effector</li> <li>proximal / distal</li> </ul>"},{"location":"lecture-notes/lecture-02/#board-drawings","title":"Board Drawings","text":""},{"location":"lecture-notes/lecture-03/","title":"Lecture 3 Notes","text":""},{"location":"lecture-notes/lecture-03/#website-links","title":"Website links","text":"<p>today's lecture is associated with the following tutorials:</p> <ul> <li>Frames</li> <li>Basis Vectors</li> <li>Vectors</li> <li>Rotations</li> <li>Expressing Vectors in Other Frames</li> </ul>"},{"location":"lecture-notes/lecture-03/#code","title":"Code","text":"<p>Code from class</p>"},{"location":"lecture-notes/lecture-03/#images","title":"Images","text":""},{"location":"lecture-notes/lecture-03/rotation/","title":"rotation.ipynb","text":"<p>link to original notebook</p>"},{"location":"lecture-notes/lecture-03/rotation/#here-is-a-heading","title":"Here is a heading","text":"<p>Bulleted list</p> <ul> <li>item 1</li> <li>item 2</li> <li>item 3</li> </ul> <p>Numbered list</p> <ol> <li>item 1</li> <li>item 2</li> <li>item 3</li> </ol> <p>Math Mode inline: \\(ax+by+c=d^2\\)</p> \\[a+b+c=d^2\\] <pre><code>import numpy\n</code></pre> <pre><code>R = numpy.array([[1,2,3],[4,5,6],[7,8,9]])\nR\n</code></pre> <pre><code>array([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n</code></pre> <pre><code>R.shape\n\n</code></pre> <pre><code>(3, 3)\n</code></pre> <pre><code>R[0:1,:].shape\n</code></pre> <pre><code>(1, 3)\n</code></pre> <pre><code>from math import sin,cos,pi\nimport math\nmath.sin\nmath.pi\n</code></pre> <pre><code>3.141592653589793\n</code></pre> <pre><code>pi\n</code></pre> <pre><code>3.141592653589793\n</code></pre> <pre><code>theta = pi/6\n</code></pre> <pre><code>Rz = numpy.array([[cos(theta),-sin(theta),0],[sin(theta),cos(theta),0],[0,0,1]])\n</code></pre> <pre><code>Rz\n</code></pre> <pre><code>array([[ 0.8660254, -0.5      ,  0.       ],\n       [ 0.5      ,  0.8660254,  0.       ],\n       [ 0.       ,  0.       ,  1.       ]])\n</code></pre> <pre><code>bx = numpy.array([[1,0,0]]).T\nby = numpy.array([[0,1,0]]).T\nbz = numpy.array([[0,0,1]]).T\n\n</code></pre> <pre><code>bx\n</code></pre> <pre><code>array([[1],\n       [0],\n       [0]])\n</code></pre> <pre><code>\nby\n</code></pre> <pre><code>array([[0],\n       [1],\n       [0]])\n</code></pre> <pre><code>bz\n</code></pre> <pre><code>array([[0],\n       [0],\n       [1]])\n</code></pre> <pre><code>v1 = Rz.dot(bx)\n</code></pre> <pre><code>v1\n</code></pre> <pre><code>array([[0.8660254],\n       [0.5      ],\n       [0.       ]])\n</code></pre> <pre><code>Rz.dot(by)\n</code></pre> <pre><code>array([[-0.5      ],\n       [ 0.8660254],\n       [ 0.       ]])\n</code></pre> <pre><code>Rz.dot(bz)\n</code></pre> <pre><code>array([[0.],\n       [0.],\n       [1.]])\n</code></pre> <pre><code>def Rz(theta):\n        R = numpy.array([[cos(theta),-sin(theta),0],[sin(theta),cos(theta),0],[0,0,1]])\n        return R\n</code></pre> <pre><code>Rz(90*pi/180)\n</code></pre> <pre><code>array([[ 6.123234e-17, -1.000000e+00,  0.000000e+00],\n       [ 1.000000e+00,  6.123234e-17,  0.000000e+00],\n       [ 0.000000e+00,  0.000000e+00,  1.000000e+00]])\n</code></pre> <pre><code>import matplotlib.pyplot as plt\n\n</code></pre> <pre><code>la = 3\nlb = 2\nR1 = Rz(45*pi/180)\n\np0 = numpy.array([[0,0,0]]).T\n</code></pre> <pre><code>p0p1 = numpy.array([[la,0,0]]).T\np1p2 = numpy.array([[lb,0,0]]).T\n\np1 = p0+p0p1\np2 = p0+p0p1+R1.dot(p1p2)\n</code></pre> <pre><code>points = numpy.array([p0,p1,p2])\npoints = points.squeeze()\npoints\n</code></pre> <pre><code>array([[0.        , 0.        , 0.        ],\n       [3.        , 0.        , 0.        ],\n       [4.41421356, 1.41421356, 0.        ]])\n</code></pre> <pre><code>plt.plot(points[:,0],points[:,1])\nplt.axis('equal')\n</code></pre> <pre><code>(-0.22071067811865475,\n 4.63492424049175,\n -0.07071067811865475,\n 1.4849242404917498)\n</code></pre> <p></p> <pre><code>\n</code></pre>"},{"location":"lecture-notes/lecture-04/","title":"Lecture 4 Notes","text":"<p>Todays code</p>"},{"location":"lecture-notes/lecture-04/#website-links","title":"Website links","text":"<p>today's lecture is associated with the following tutorials:</p> <ul> <li>Quaternions</li> <li>Sympy</li> </ul>"},{"location":"lecture-notes/lecture-04/#board-images","title":"Board Images","text":""},{"location":"lecture-notes/lecture-05/","title":"Lecture 5 Notes","text":"<p>Todays code</p>"},{"location":"lecture-notes/lecture-05/#website-links","title":"Website links","text":"<p>today's lecture is associated with the following tutorials:</p> <ul> <li>Vector Operations</li> <li>Constraints</li> <li>Jacobians</li> </ul>"},{"location":"lecture-notes/lecture-05/#board-images","title":"Board Images","text":""},{"location":"lecture-notes/lecture-05/triangle/","title":"Index","text":"<p>original notebook</p> <pre><code>import matplotlib.pyplot as plt\nimport scipy.optimize as so\nimport numpy\n</code></pre> <pre><code>desired_length1=2**.5\ndesired_length2=1\ndesired_length3=1\n</code></pre> <pre><code>def objective_function(x):\n\n    x1,y1,x2,y2,x3,y3 = x\n\n    p1 = numpy.array([x1,y1])\n    p2 = numpy.array([x2,y2])\n    p3 = numpy.array([x3,y3])\n\n    v1 = p2-p1\n    v2 = p3-p2\n    v3 = p1-p3\n\n    l1 = (v1.dot(v1))**.5\n    l2 = (v2.dot(v2))**.5\n    l3 = (v3.dot(v3))**.5\n\n\n    error = []\n    error.append(l1-desired_length1)\n    error.append(l2-desired_length2)\n    error.append(l3-desired_length3)\n    error.append(x1-0)\n    error.append(y1-0)\n    error.append(y3-0)\n\n    error = numpy.array(error)\n    sum_of_squares = ((error**2).sum())**.5\n    return sum_of_squares    \n</code></pre> <pre><code>objective_function([0,0,1,1,1,0])\n</code></pre> <pre><code>0.0\n</code></pre> <pre><code>x_0=[0,0,2,1,1,0]\nresult=so.minimize(objective_function,x_0,method=\"powell\")\nresult\n</code></pre> <pre><code> message: Optimization terminated successfully.\n success: True\n  status: 0\n     fun: 7.455577439243278e-12\n       x: [-5.365e-13 -2.583e-13  1.000e+00  1.000e+00  1.000e+00\n            1.357e-13]\n     nit: 16\n   direc: [[ 1.281e-05 -1.149e-04 ...  1.318e-05 -1.967e-04]\n           [-1.725e-03  2.730e-03 ... -1.728e-03 -1.221e-03]\n           ...\n           [ 0.000e+00  0.000e+00 ...  1.000e+00  0.000e+00]\n           [ 4.823e-12  2.881e-12 ...  4.474e-12 -3.499e-12]]\n    nfev: 1887\n</code></pre> <pre><code>result.x\n</code></pre> <pre><code>array([-5.36524777e-13, -2.58294282e-13,  1.00000000e+00,  1.00000000e+00,\n        1.00000000e+00,  1.35663106e-13])\n</code></pre> <pre><code>def plot_x(x):\n    x1,y1,x2,y2,x3,y3 = x\n    p1 = numpy.array([[x1,y1]]).T\n    p2 = numpy.array([[x2,y2]]).T\n    p3 = numpy.array([[x3,y3]]).T\n\n    p = numpy.hstack([p1,p2,p3])\n    plt.plot(p[0,(0,1,2,0)],p[1,(0,1,2,0)])\n    for ii,item in enumerate(p.T):\n        plt.text(item[0],item[1],'p'+str(ii+1))\n    plt.axis('equal')\n    plt.show()\n</code></pre> <pre><code>plot_x(result.x)\n</code></pre> <p></p> <pre><code>\n</code></pre>"},{"location":"lecture-notes/lecture-06/","title":"Lecture 5 Notes","text":"<p>todays code</p>"},{"location":"lecture-notes/lecture-06/#website-links","title":"Website links","text":"<p>today's lecture is associated with the following tutorials:</p> <ul> <li>Jacobians</li> <li>Jacobians for Parallel Mechanisms</li> </ul>"},{"location":"lecture-notes/lecture-06/2dofrobot/","title":"Index","text":"<p>original notebook</p> <pre><code># %matplotlib qt\n%matplotlib inline\n</code></pre> <pre><code>import numpy\nimport math\nimport sympy\n</code></pre> <pre><code>l1,l2 = sympy.symbols('l1,l2')\n</code></pre> <pre><code>l1\n</code></pre> <p>\\(\\displaystyle l_{1}\\)</p> <pre><code>t1,t2 = sympy.symbols('t1,t2')\nt1\n</code></pre> <p>\\(\\displaystyle t_{1}\\)</p> <pre><code>t1n = 30*math.pi/180\nt2n = 30*math.pi/180\nl1n = 1\nl2n = 1\n</code></pre> <pre><code>def Rz(theta):\n    c = math.cos(theta)\n    s = math.sin(theta)\n    R = numpy.array([[c,-s,0],\n                  [s,c,0],\n                  [0,0,1]])\n    return R\n</code></pre> <pre><code>Rab = Rz(t1n)\nRbc = Rz(t2n)\n</code></pre> <pre><code>bx_in_b = numpy.array([[1,0,0]]).T\nbx_in_a = Rab.dot(bx_in_b)\nbx_in_a\n</code></pre> <pre><code>array([[0.8660254],\n       [0.5      ],\n       [0.       ]])\n</code></pre> <pre><code>cx_in_c = numpy.array([[1,0,0]]).T\ncx_in_b = Rbc.dot(cx_in_c)\ncx_in_a = Rab.dot(cx_in_b)\ncx_in_a\n</code></pre> <pre><code>array([[0.5      ],\n       [0.8660254],\n       [0.       ]])\n</code></pre> <pre><code>r = l1n*bx_in_a+l2n*cx_in_a\nr\n</code></pre> <pre><code>array([[1.3660254],\n       [1.3660254],\n       [0.       ]])\n</code></pre> <pre><code>p0=numpy.array([[0,0,0]]).T\np1=l1n*bx_in_a\np = numpy.hstack([p0,p1,r])\n</code></pre> <pre><code># import matplotlib.pyplot as plt\n# plt.plot(p[0,:],p[1,:])\n# plt.axis('equal')\n</code></pre> <pre><code>J = numpy.array([\n    [-l1*sympy.sin(t1)-l2*sympy.sin(t1+t2), -l2*sympy.sin(t1+t2)],\n    [l1*sympy.cos(t1)+l2*sympy.cos(t1+t2), l2*sympy.cos(t1+t2)],\n    [0,0]])\n</code></pre> <pre><code>J = sympy.Matrix(J)\n</code></pre> <pre><code>Jn = numpy.array(J.subs({t1:t1n,t2:t2n,l1:l1n,l2:l2n}))\nJn\n</code></pre> <pre><code>array([[-1.36602540378444, -0.866025403784439],\n       [1.36602540378444, 0.500000000000000],\n       [0, 0]], dtype=object)\n</code></pre> <pre><code>\nt_d = numpy.array([[0,1]]).T\nt_d\n</code></pre> <pre><code>array([[0],\n       [1]])\n</code></pre> <pre><code>v = Jn.dot(t_d)\nv\n</code></pre> <pre><code>array([[-0.866025403784439],\n       [0.500000000000000],\n       [0]], dtype=object)\n</code></pre> <pre><code>dt1 = 1*math.pi/180\ndt2 = 1*math.pi/180\n\nt1n_1 = t1n-dt1\nt1n_2 = t1n+dt1\n\nt2n_1 = t2n-dt2\nt2n_2 = t2n+dt2\n\nr_dt1_1 = l1n*Rz(t1n_1).dot(bx_in_b+l2n*Rz(t2n).dot(cx_in_c))\nr_dt1_2 = l1n*Rz(t1n_2).dot(bx_in_b+l2n*Rz(t2n).dot(cx_in_c))\n\nr_dt2_1 = l1n*Rz(t1n).dot(bx_in_b+l2n*Rz(t2n_1).dot(cx_in_c))\nr_dt2_2 = l1n*Rz(t1n).dot(bx_in_b+l2n*Rz(t2n_2).dot(cx_in_c))\n\ndr_dt1 = r_dt1_2 - r_dt1_1\ndr_dt2 = r_dt2_2 - r_dt2_1\n</code></pre> <pre><code>dr_dt1\n</code></pre> <pre><code>array([[-0.04768086],\n       [ 0.04768086],\n       [ 0.        ]])\n</code></pre> <pre><code>dr_dt2\n</code></pre> <pre><code>array([[-0.03022845],\n       [ 0.01745241],\n       [ 0.        ]])\n</code></pre> <pre><code>Jn2 = numpy.hstack([dr_dt1/2/dt1,dr_dt2/2/dt2])\n</code></pre> <pre><code>Jn2\n</code></pre> <pre><code>array([[-1.36595605, -0.86598144],\n       [ 1.36595605,  0.49997462],\n       [ 0.        ,  0.        ]])\n</code></pre> <pre><code>v2 = Jn2.dot(t_d)\n</code></pre> <pre><code>import matplotlib.pyplot as plt\n\ns1 = .2\ns2 = .1\n\np = numpy.hstack([p0,p1,r])\nplt.plot(p[0,:],p[1,:])\nuv = numpy.hstack([r,r+v*s1])\nplt.plot(uv[0,:],uv[1,:],'r-')\nuv = numpy.hstack([r,r+v2*s2])\nplt.plot(uv[0,:],uv[1,:],'g-')\nplt.axis('equal')\nplt.show()\n</code></pre> <p></p> <pre><code>\n</code></pre>"},{"location":"lecture-notes/lecture-07/","title":"Lecture 7 Notes","text":""},{"location":"lecture-notes/lecture-07/#jacobians-for-parallel-mechanisms","title":"Jacobians for parallel mechanisms","text":"<p>see this tutorial</p>"},{"location":"lecture-notes/lecture-07/#inverse-kinematics","title":"Inverse Kinematics","text":"<ul> <li>What are inverse kinematics?<ul> <li>finding the joint positions as a function of end-effector positions</li> </ul> </li> <li>How do you find inverse kinematics?<ul> <li>Algebraically</li> <li>Graphically</li> <li>Iteratively<ul> <li>With Newton's method</li> <li>With Optimization</li> <li>With AI</li> </ul> </li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-07/#how-do-you-use-optimization","title":"How do you use optimization?","text":"<ul> <li>Solve a different minimization problem</li> <li>Instead of specifying an input value, specify an output value</li> </ul>"},{"location":"lecture-notes/lecture-07/#denavit-hartenberg-parameters","title":"\"Denavit-Hartenberg\" Parameters","text":"<ul> <li>Common standard for describing serial kinematics</li> <li>Advantages<ul> <li>a common approach with simple representation.</li> <li>Fewer parameters than general transformation (3 position, 3 rotation)</li> </ul> </li> <li>Disadvantages:<ul> <li>less efficient for non-traditional kinematics</li> <li>not always intuitive</li> </ul> </li> <li>Alternatives<ul> <li>Screw Theory</li> <li>4x4 Transformation Matrix</li> <li>Quaternions</li> <li>Product of Exponentials</li> <li>...and many others</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-07/#biomechanics","title":"Biomechanics","text":""},{"location":"lecture-notes/lecture-07/#key-terms","title":"Key Terms","text":"<ul> <li>Biomechanics</li> <li>Bio-inspiration</li> <li>Biomimicry</li> <li>Servo</li> <li>Work Loop</li> <li>Limit Cycle</li> <li>Inverted Pendulum</li> <li>Spring Loaded Inverted Pendulum</li> </ul>"},{"location":"lecture-notes/lecture-07/#comparison-of-terms","title":"Comparison of terms","text":"<p>Biomechanics: </p> <p>Field of study that combines biology and physics to understand how living organisms move and interact with their environment.</p> <p>Bio-inspiration: </p> <p>Taking inspiration from nature and using it to solve human problems or create innovative designs and technologies.</p> <p>Biomimicry: </p> <p>An attempt to directly copy features and morphologies seen in nature</p>"},{"location":"lecture-notes/lecture-07/#muscles","title":"Muscles","text":"<p>We are talking about skeletal muscle tissue</p> <p>https://open.oregonstate.education/aandp/chapter/10-2-skeletal-muscle/</p> <p>Anatomy &amp; Physiology by Lindsay M. Biga, Sierra Dawson, Amy Harwell, Robin Hopkins, Joel Kaufmann, Mike LeMaster, Philip Matern, Katie Morrison-Graham, Devon Quick &amp; Jon Runyeon is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License, except where otherwise noted.</p>"},{"location":"lecture-notes/lecture-07/#muscle-architecture","title":"Muscle Architecture","text":"<p>\"Biewener, Animal Locomotion\"</p>"},{"location":"lecture-notes/lecture-07/#muscle-geometry","title":"Muscle Geometry","text":"<p>Biewener, Animal Locomotion</p>"},{"location":"lecture-notes/lecture-07/#variable-behavior","title":"Variable Behavior","text":"<p>A. Biewener and G. B. Gillis, \"Dynamics of muscle function during locomotion: accommodating variable conditions.,\" J. Exp. Biol., vol. 202, no. Pt 23, pp. 3387\u20133396, 1999.</p>"},{"location":"lecture-notes/lecture-07/#passive-and-active-behavior","title":"Passive and Active Behavior","text":"<p>Biewener, Animal Locomotion</p>"},{"location":"lecture-notes/lecture-07/#muscles-can-do-different-things","title":"Muscles can do Different things","text":"<p>Roberts, T. J., &amp; Azizi, E. (2011). Flexible mechanisms: the diverse roles of biological springs in vertebrate movement. Journal of Experimental Biology, 214(3), 353\u2013361. https://doi.org/10.1242/jeb.038588</p>"},{"location":"lecture-notes/lecture-07/#time-based-interactions","title":"Time-based Interactions","text":"<p>Muscles behave differently because of the timing between external forces and muscle behavior</p> <p>Biewener, Animal Locomotion</p>"},{"location":"lecture-notes/lecture-07/#work-loop","title":"Work Loop","text":"<p>Another perspective of the time-based interactions between muscles the world is the \"work loop\"</p> <ul> <li>Work: the energy required to move an object.</li> <li>Walking is often considered  a \"limit cycle\", \"a periodic orbit that is a limit set of the dynamical system\"</li> <li>A work loop is a way to visualize and understand the work done on an object as it moves through a closed path or loop.</li> </ul> <p>Biewener, Animal Locomotion https://en.wikipedia.org/wiki/Work_loop https://underactuated.mit.edu/simple_legs.html </p>"},{"location":"lecture-notes/lecture-07/#muscle-stress-vs-strain","title":"Muscle Stress vs. Strain","text":"<p>Work loops can be seen within specific muscles as well...</p> <p>M. A. Daley and A. A. Biewener, \"Muscle force-length dynamics during level versus incline locomotion: a comparison of in vivo performance of two guinea fowl ankle extensors.,\" J. Exp. Biol., vol. 206, no. Pt 17, pp. 2941\u201358, Sep. 2003.</p>"},{"location":"lecture-notes/lecture-07/#terrestrial-locomotion","title":"Terrestrial Locomotion","text":""},{"location":"lecture-notes/lecture-07/#ip-vs-slip","title":"IP vs SLIP","text":"<ul> <li>\"Inverted Pendulum\"</li> <li>\"Spring-loaded inverted pendulum\" *</li> </ul>"},{"location":"lecture-notes/lecture-07/#passive-dynamic-walkers","title":"Passive Dynamic Walkers","text":"<p>Credit: Andy Ruina, Cornell https://www.youtube.com/embed/FfKQSUhYjlY</p>"},{"location":"lecture-notes/lecture-07/#slip-legs","title":"SLIP Legs","text":"<p>M. H. Raibert, \"Legged robots,\" Artif. Intell. MIT Expand. Front., vol. Vol.2, no. 6, pp. 499\u2013514, 1990.</p>"},{"location":"lecture-notes/lecture-07/#slips-accuracy","title":"SLIP's accuracy","text":"<p>Roberts, T. J., &amp; Azizi, E. (2011). Flexible mechanisms: the diverse roles of biological springs in vertebrate movement. Journal of Experimental Biology, 214(3), 353\u2013361. https://doi.org/10.1242/jeb.038588</p>"},{"location":"lecture-notes/lecture-07/#implementations-of-slip","title":"Implementations of SLIP","text":"<p>A. Sprowitz, A. Tuleu, M. Vespignani, M. Ajallooeian, E. Badri, and A. J. Ijspeert, \"Towards dynamic trot gait locomotion: Design, control, and experiments with Cheetah-cub, a compliant quadruped robot,\" Int. J. Rob. Res., vol. 32, no. 8, pp. 932\u2013950, Jul. 2013.</p>"},{"location":"lecture-notes/lecture-07/#leg-stiffness","title":"Leg Stiffness","text":"<p>P. Holmes, R. J. Full, D. Koditschek, and J. Guckenheimer, \u201cThe Dynamics of Legged Locomotion: Models, Analyses, and Challenges,\u201d SIAM Rev., vol. 48, no. 2, pp. 207\u2013304, Jan. 2006, doi: 10.1137/S0036144504445133.</p>"},{"location":"lecture-notes/lecture-07/#gaits","title":"Gaits","text":"<p>Biewener, Animal Locomotion</p>"},{"location":"lecture-notes/lecture-07/#gait-patterns","title":"Gait Patterns","text":"<p>Biewener, Animal Locomotion</p>"},{"location":"lecture-notes/lecture-07/#walk","title":"Walk","text":"<p>A. E. Minetti and L. P. Ardigo, \"The Relationship Between Mechanical Work and Energy Expenditure of Locomotion in Horses.,\" J. Exp. Biol., vol. 202, no. 17, p. 2329, 1999.</p>"},{"location":"lecture-notes/lecture-07/#trot","title":"Trot","text":"<p>A. E. Minetti and L. P. Ardigo, \"The Relationship Between Mechanical Work and Energy Expenditure of Locomotion in Horses.,\" J. Exp. Biol., vol. 202, no. 17, p. 2329, 1999.</p>"},{"location":"lecture-notes/lecture-07/#gallop","title":"Gallop","text":"<p>A. E. Minetti and L. P. Ardigo, \"The Relationship Between Mechanical Work and Energy Expenditure of Locomotion in Horses.,\" J. Exp. Biol., vol. 202, no. 17, p. 2329, 1999.</p>"},{"location":"lecture-notes/lecture-07/#types-of-models","title":"Types of Models","text":""},{"location":"lecture-notes/lecture-07/#templates-and-anchors","title":"Templates and Anchors","text":"<p>Full, R. J., &amp; Koditschek, D. E. (1999). Templates and anchors: neuromechanical hypotheses of legged locomotion on land. Journal of Experimental Biology, 202(23), 3325\u20133332. https://doi.org/10.1242/jeb.202.23.3325</p>"},{"location":"lecture-notes/lecture-07/#example-cockroach-legs","title":"Example: Cockroach Legs","text":"<p>Full, R. J., &amp; Koditschek, D. E. (1999). Templates and anchors: neuromechanical hypotheses of legged locomotion on land. Journal of Experimental Biology, 202(23), 3325\u20133332. https://doi.org/10.1242/jeb.202.23.3325</p>"},{"location":"lecture-notes/lecture-07/#metrics-scaling-laws","title":"Metrics &amp; Scaling Laws","text":""},{"location":"lecture-notes/lecture-07/#speed-vs-metabolic-cost","title":"Speed vs. Metabolic Cost","text":"<p>A. E. Minetti and L. P. Ardigo, \"The Relationship Between Mechanical Work and Energy Expenditure of Locomotion in Horses.,\" J. Exp. Biol., vol. 202, no. 17, p. 2329, 1999.</p>"},{"location":"lecture-notes/lecture-07/#cost-of-transport","title":"Cost of Transport","text":"<p>\\(COT = P/mgv\\) (J/m/kg)</p> <ul> <li>the smaller the COT the more energy-effective</li> <li>different COTs depending on what \"powers\" are included (total, locomotion, mechanical, etc)</li> <li>sometimes referred to as specific resistance</li> </ul>"},{"location":"lecture-notes/lecture-07/#cot-in-animals","title":"COT in Animals","text":"<p>Tucker, V. A. \u201cThe Energetic Cost of Moving About: Walking and Running Are Extremely Inefficient Forms of Locomotion. Much Greater Efficiency Is Achieved by Birds, Fish\u2014and Bicyclists.\u201d American Scientist, vol. 63, no. 4, Sigma Xi, The Scientific Research Society, 1975, pp. 413\u201319, http://www.jstor.org/stable/27845576.</p>"},{"location":"lecture-notes/lecture-07/#cot-in-robots","title":"COT in Robots","text":"<p>Baisch, A. T., Ozcan, O., Goldberg, B., Ithier, D., &amp; Wood, R. J. (2014). High speed locomotion for a quadrupedal microrobot. The International Journal of Robotics Research. https://doi.org/10.1177/0278364914521473</p>"},{"location":"lecture-notes/lecture-07/#cot-in-both","title":"COT in both","text":"<p>S. Seok et al., \u201cDesign Principles for Energy-Efficient Legged Locomotion and Implementation on the MIT Cheetah Robot,\u201d IEEE/ASME Trans. Mechatron., vol. 20, no. 3, pp. 1117\u20131129, Jun. 2015, doi: 10.1109/TMECH.2014.2339013.</p>"},{"location":"lecture-notes/lecture-07/#froude-number","title":"Froude Number","text":"\\[Fr = v^2/gl\\] <ul> <li>Essentially the ratio of kinetic to potential energy</li> <li>often viewed as a dimensionless number</li> <li>l is a characteristic leg length (often taken in running robots as the distance from the hip to the ground)</li> <li>dynamically similar legged locomotors should exhibit equal ratios of inertial to gravitation forces for equivalent gaits</li> </ul>"},{"location":"lecture-notes/lecture-07/#similar-across","title":"Similar across","text":"<p>Alexander, R. M. &amp; Jayes, A. S. A dynamic similarity hypothesis for the gaits of quadrupedal mammals. J. Zool. 135\u2013152 (1983). doi:10.1111/j.1469-7998.1983.tb04266.x</p>"},{"location":"lecture-notes/lecture-07/#bio-inspired-dynamic-legged-robots","title":"Bio-inspired Dynamic Legged Robots","text":"<ol> <li>R. Altendorfer, N. Moore, H. Komsuoglu, M. Buehler, H. B. Brown Jr., D. McMordie, U. Saranli, R. Full, and D. E. Koditschek, \"RHex: a biologically inspired hexapod runner,\" Auton. Robots, vol. 11, no. 3, pp. 207\u2013213, 2001.</li> <li>M. J. Spenko, G. C. Haynes, J. A. Saunders, M. R. Cutkosky, a. a. Rizzi, R. J. Full, and D. E. Koditschek, \"Biologically inspired climbing with a hexapedal robot,\" J. F. Robot., vol. 25, no. 4\u20135, pp. 223\u2013242, Apr. 2008.</li> <li>P. Birkmeyer, K. Peterson, and R. S. Fearing, \"DASH: A dynamic 16g hexapedal robot,\" 2009 IEEE/RSJ Int. Conf. Intell. Robot. Syst., pp. 2683\u20132689, Oct. 2009.</li> </ol>"},{"location":"lecture-notes/lecture-07/#cockroach-vs-robot","title":"Cockroach vs. robot","text":"<p>D. E. Koditschek, R. J. Full, and M. Buehler, \"Mechanical aspects of legged locomotion control.,\" Arthropod Struct. Dev., vol. 33, no. 3, pp. 251\u201372, Jul. 2004.</p>"},{"location":"lecture-notes/lecture-07/#cockroach-inspired","title":"Cockroach-Inspired","text":"<p>http://www.ted.com/talks/robert_full_on_engineering_and_evolution</p>"},{"location":"lecture-notes/lecture-07/#sprawl","title":"Sprawl","text":"<p>http://www.ted.com/talks/robert_full_on_engineering_and_evolution</p>"},{"location":"lecture-notes/lecture-07/#sprawl_1","title":"Sprawl","text":"<p>J. G. Cham, S. A. Bailey, J. E. Clark, R. J. Full, and M. R. Cutkosky, \"Fast and Robust: Hexapedal Robots via Shape Deposition Manufacturing,\" Int. J. Rob. Res., vol. 21, no. 10\u201311, pp. 869\u2013882, Oct. 2002.</p>"},{"location":"lecture-notes/lecture-07/#rhex","title":"RHEX","text":"<p>http://www.ted.com/talks/robert_full_on_engineering_and_evolution</p>"},{"location":"lecture-notes/lecture-07/#rhex-leg-iterations","title":"RHEX Leg iterations","text":"<p>D. E. Koditschek, R. J. Full, and M. Buehler, \"Mechanical aspects of legged locomotion control.,\" Arthropod Struct. Dev., vol. 33, no. 3, pp. 251\u201372, Jul. 2004.</p>"},{"location":"lecture-notes/lecture-07/#legged","title":"Legged","text":"<ul> <li>Cheetah Cub: \"A. Sprowitz, A. Tuleu, M. Vespignani, M. Ajallooeian, E. Badri, and A. J. Ijspeert, \"Towards dynamic trot gait locomotion: Design, control, and experiments with Cheetah-cub, a compliant quadruped robot,\" Int. J. Rob. Res., vol. 32, no. 8, pp. 932\u2013950, Jul. 2013.\"</li> <li>MIT Cheetah 2</li> <li>RHEX</li> <li>Outrunner</li> <li>ATRIAS Family</li> <li>Cassie</li> <li>ATLAS</li> </ul>"},{"location":"lecture-notes/lecture-07/#sensory-feedback","title":"Sensory Feedback","text":"<p>M. H. Dickinson, \"How Animals Move: An Integrative View,\" Science (80-. )., vol. 288, no. 5463, pp. 100\u2013106, Apr. 2000.</p>"},{"location":"lecture-notes/lecture-07/#hair-sensors","title":"Hair Sensors","text":"<p>J. C. Spagna, D. I. Goldman, P.-C. Lin, D. E. Koditschek, and R. J. Full, \"Distributed mechanical feedback in arthropods and robots simplifies control of rapid running on challenging terrain.,\" Bioinspir. Biomim., vol. 2, no. 1, pp. 9\u201318, Mar. 2007.</p>"},{"location":"lecture-notes/lecture-07/#other-types-of-locomotion","title":"Other Types of Locomotion","text":""},{"location":"lecture-notes/lecture-07/#different-animals","title":"Different Animals","text":"<p>M. H. Dickinson, \"How Animals Move: An Integrative View,\" Science (80-. )., vol. 288, no. 5463, pp. 100\u2013106, Apr. 2000.</p>"},{"location":"lecture-notes/lecture-07/#gait-depends-on-the-medium","title":"Gait depends on the Medium","text":"<p>A. Biewener and G. B. Gillis, \"Dynamics of muscle function during locomotion: accommodating variable conditions.,\" J. Exp. Biol., vol. 202, no. Pt 23, pp. 3387\u20133396, 1999.</p>"},{"location":"lecture-notes/lecture-07/#different-forcemotion-profiles","title":"Different Force/Motion Profiles","text":"<p>M. H. Dickinson, \"How Animals Move: An Integrative View,\" Science (80-. )., vol. 288, no. 5463, pp. 100\u2013106, Apr. 2000.</p>"},{"location":"lecture-notes/lecture-07/#level-vs-incline-running","title":"Level vs. Incline Running","text":"<p>A. Biewener and G. B. Gillis, \"Dynamics of muscle function during locomotion: accommodating variable conditions.,\" J. Exp. Biol., vol. 202, no. Pt 23, pp. 3387\u20133396, 1999.</p>"},{"location":"lecture-notes/lecture-07/#bio-inspired-jumping","title":"Bio-inspired Jumping","text":"<p> T. Geng, Y. Yang, and X. Xu, \"A novel one-legged robot: cyclic gait inspired by a jumping frog,\" in 2001 IEEE International Conference on Systems, Man and Cybernetics. e-Systems and e-Man for Cybernetics in Cyberspace (Cat.No.01CH37236), 2001, vol. 3, pp. 1412\u20131417.</p>"},{"location":"lecture-notes/lecture-07/#penn-jerboa","title":"Penn Jerboa","text":"<p>A. De and D. E. Koditschek, \"The Penn Jerboa: A Platform for Exploring Parallel Composition of Templates,\" no. May, 2015.</p> <p>https://www.youtube.com/watch?v=wvYthkpRFfk</p>"},{"location":"lecture-notes/lecture-07/#small-hopping-robot","title":"Small Hopping Robot","text":"<p>U. Scarfogliero, C. Stefanini, and P. Dario, \"The use of compliant joints and elastic energy storage in bio-inspired legged robots,\" Mech. Mach. Theory, vol. 44, no. 3, pp. 580\u2013590, Mar. 2009.</p>"},{"location":"lecture-notes/lecture-07/#rhex-jumping","title":"RHEX Jumping","text":""},{"location":"lecture-notes/lecture-07/#bio-inspired-climbing","title":"Bio-inspired Climbing","text":""},{"location":"lecture-notes/lecture-07/#stickybot","title":"Stickybot","text":"<p>M. J. Spenko, G. C. Haynes, J. A. Saunders, M. R. Cutkosky, a. a. Rizzi, R. J. Full, and D. E. Koditschek, \"Biologically inspired climbing with a hexapedal robot,\" J. F. Robot., vol. 25, no. 4\u20135, pp. 223\u2013242, Apr. 2008.</p>"},{"location":"lecture-notes/lecture-07/#flipperbot","title":"Flipperbot","text":""},{"location":"lecture-notes/lecture-07/#flapping-wing-locomotion","title":"Flapping Wing Locomotion","text":"<ul> <li>Robotic Ray</li> <li>RoboBee</li> <li>Robotic Sea Turtle</li> <li>U-Cat</li> </ul>"},{"location":"lecture-notes/lecture-07/#undulatory-locomotion","title":"Undulatory Locomotion","text":"<ul> <li>Salamander robot: https://www.youtube.com/watch?v=f6mA8walaSk</li> <li>Knifefish: https://www.youtube.com/watch?v=9NBHvUHOPoQ</li> <li>https://www.youtube.com/watch?v=Bbmmqwx2I3M https://www.youtube.com/watch?v=CkZszsl2aIU</li> </ul>"},{"location":"lecture-notes/lecture-07/#different-media","title":"Different Media","text":"<ul> <li>Water</li> <li>Air</li> <li>Sand: https://www.youtube.com/watch?v=9mwJsGbTkOk</li> </ul>"},{"location":"lecture-notes/lecture-07/#board-images","title":"Board Images","text":""},{"location":"lecture-notes/lecture-07/#external-media","title":"External Media","text":""},{"location":"lecture-notes/lecture-08/","title":"Lecture 8 Notes","text":""},{"location":"lecture-notes/lecture-08/#example-1-transforming-points","title":"Example 1: Transforming Points","text":"<p>Say we have a vector \\(\\vec{p}=\\begin{pmatrix}2\\\\1\\\\0\\end{pmatrix}\\) that we want to rotate about the vector \\(\\vec{r}=\\begin{pmatrix}1\\\\0\\\\0\\end{pmatrix}\\) by the amount \\(\\theta=90^{\\circ}\\).  We form two quaternions:</p> \\[p=2i+1j+0k\\] \\[r=\\cos\\left(\\frac{\\theta}{2}\\right) +\\sin\\left(\\frac{\\theta}{2}\\right)(1i+0j+0k)\\] <p>Noting that this quaternion is already a unit quaternion (\\(|r|=1\\)), We can then compute the quaternion \\(p'\\) with the equation</p> \\[p'=rpr^*\\] <p>The result in vector notation is \\(\\vec{p}'=\\begin{pmatrix}2\\\\0\\\\1\\end{pmatrix}\\).  </p>"},{"location":"lecture-notes/lecture-08/#example-2-transforming-points","title":"Example 2: Transforming Points","text":"<p>Say we have a vector \\(\\vec{p}=\\begin{pmatrix}2\\\\1\\\\0\\end{pmatrix}\\) that we want to rotate about the vector \\(\\vec{r}=\\begin{pmatrix}1\\\\1\\\\0\\end{pmatrix}\\) by the amount \\(\\theta=180^{\\circ}\\).  We form two quaternions:</p> \\[p=2i+1j+0k\\] \\[r=\\cos\\left(\\frac{\\theta}{2}\\right) +\\sin\\left(\\frac{\\theta}{2}\\right)\\frac{(1i+1j+0k)}{\\sqrt{2}}\\] <p>Noting that the original vector needed to be normalized, (hence dividing by \\(\\sqrt{2}\\)) or else the resulting quaternion would have needed to be normalized (\\(r_{new}=\\frac{r}{|r|}\\)), we can then compute the quaternion \\(p'\\) with the equation</p> \\[p'=rpr^*\\] <p>The result in vector notation is \\(\\vec{p}'=\\begin{pmatrix}1\\\\2\\\\0\\end{pmatrix}\\).  </p>"},{"location":"lecture-notes/lecture-08/#example-3-compund-rotations","title":"Example 3: Compund Rotations","text":"<p>Say we have a vector v representing a robot arm, initially expressed in its native (non-inertial) reference frames, as in</p> \\[\\vec{v}_1 = l_b \\hat{b}_x\\] \\[\\vec{v}_2 = l_c \\hat{c}_x\\] \\[\\vec{p}_{end} = \\vec{v}_1+ \\vec{v}_2\\] <p>In quaternion form,</p> \\[v_{1(B)} = l_b i\\] \\[v_{2(C)} = l_c i\\] <p>If frame \\(B\\) is rotated from the base inertial frame \\(A\\) by \\(\\theta_1\\) about \\(\\hat{a}_z\\), we can create a unit quaternion which represents this rotation.</p> \\[r_{ab}=\\cos\\left(\\frac{\\theta_1}{2}\\right) +\\sin\\left(\\frac{\\theta_1}{2}\\right)(0i+0j+1k)\\] <p>We can then express \\(v_{1(B)}\\) in the \\(A\\) frame:</p> \\[v_{1(A)}=r_{ab}v_{1(B)}r_{ab}^*\\] \\[v_{1(A)}=r_{ab}(l_b i)r_{ab}^*\\] <p>Similarly, if frame \\(C\\) is rotated from \\(B\\) by \\(\\theta_2\\) about \\(\\hat{b}_z\\), we can create a second unit quaternion which represents this rotation.</p> \\[r_{bc}=\\cos\\left(\\frac{\\theta_2}{2}\\right) +\\sin\\left(\\frac{\\theta_2}{2}\\right)(0i+0j+1k)\\] <p>We can then express \\(v_{2(C)}\\) in the \\(B\\) frame, and then the \\(A\\) frame, respectively:</p> \\[v_{2(B)}=r_{bc}v_{2(C)}r_{bc}^*\\] \\[v_{2(A)}=r_{ab}v_{2(B)}r_{ab}^*\\] \\[v_{2(A)}=r_{ab}r_{bc}v_{2(C)}r_{bc}^*r_{ab}^*\\] \\[v_{2(A)}=r_{ab}r_{bc}(l_c i)r_{bc}^*r_{ab}^*\\] <p>We can now express \\(\\vec{p}_{end}\\) in \\(A\\)</p> \\[\\begin{align} {p}_{end(A)} = &amp;{v}_{1(A)}+ {v}_{2(A)}\\\\  = &amp;r_{ab}(l_b i + r_{bc}(l_c i)r_{bc}^*)r_{ab}^* \\end{align}\\]"},{"location":"lecture-notes/lecture-08/#discussion-finding-the-internal-jacobian-for-a-four-bar-linkage","title":"Discussion: Finding the internal Jacobian for a four-bar linkage","text":"<p>Consider the above four-bar linkage, which, without additional constraint equations, is a chain of four links from \\(\\vec{p}_1\\) to \\(\\vec{p}_4\\), and back to \\(\\vec{p}_1'\\). The incremental rotations about \\(\\hat{a}_z\\) between each link are described by \\(\\alpha_1\\) - \\(\\alpha_4\\).  It should be pretty clear that you need to add  constraints using the expressions for \\(\\vec{p}_1'\\) and \\(\\vec{p}_1\\) that \"glues\" (or constrains) \\(\\vec{p}_1'\\) to \\(\\vec{p}_1\\).  In this case, we know the length of \\(\\vec{p}_1'-\\vec{p}_1\\) should be \\(0\\), or</p> \\[\\vec{p}_1'-\\vec{p}_1=\\vec{0}\\] <p>But this is a vector expression, not a scalar expression, which makes it hard to use in solvers.  So we can dot this expression with \\(\\hat{a}_x\\) and \\(\\hat{a}_y\\) in order to decompose this vector expression into two independent scalar expressions.</p> \\[(\\vec{p}_1'-\\vec{p}_1)\\cdot \\hat{a}_x=0\\] \\[(\\vec{p}_1'-\\vec{p}_1)\\cdot \\hat{a}_y=0\\] <p>Question: Why can't we just use the expression for the length of this vector is 0, or \\(|\\vec{p}_1'-\\vec{p}_1|=0\\)?  That's also a scalar expression. Answer 1: This only produces one equation, when we need two constraint equations to fully constrain the four bar. Answer 2: This would be a \"degenerate\" form of \\(|\\vec{p}_1'-\\vec{p}_1|=l\\), which would effectively create a fifth link of our mechanism.  When \\(l=0\\), solvers would probably be able to find a solution, but it would not generally work, and there would still technically be an extra degree of freedom in your mechanism that would not be accounted for.</p> <p>But the expression for \\(\\vec{p}_1'\\) in \\(A\\) only uses three of our four variables, \\(\\alpha_1\\) - \\(\\alpha_3\\).  This means that \\(\\alpha_4\\) is not used in the system of constraint equations generated, either.  What is the result?  In this case, </p> \\[\\begin{align} J = &amp;\\left[\\begin{array}{c | c c} j_{11}&amp;j_{12}&amp;j_{13}\\\\ j_{21}&amp;j_{22}&amp;j_{23} \\end{array}\\right]\\\\ 0=&amp;J\\dot{\\alpha}\\\\ = &amp;\\left[\\begin{array}{c | c c} j_{11}&amp;j_{12}&amp;j_{13}\\\\ j_{21}&amp;j_{22}&amp;j_{23} \\end{array}\\right] \\begin{bmatrix}     \\dot\\alpha_1 \\\\\\hline \\dot\\alpha_2\\\\\\dot\\alpha_3 \\end{bmatrix} \\\\ 0= &amp;  \\underbrace{ \\begin{bmatrix}     j_{11}\\\\     j_{21} \\end{bmatrix}  }_A \\underbrace{\\begin{bmatrix}\\dot \\alpha_1\\end{bmatrix}}_\\dot{q_i} +  \\underbrace{ \\begin{bmatrix}     j_{12}&amp;j_{13}\\\\     j_{22}&amp;j_{23} \\end{bmatrix} }_B \\underbrace{ \\begin{bmatrix}     \\dot\\alpha_2\\\\\\dot\\alpha_3 \\end{bmatrix} }_\\dot{q_d}\\\\ \\end{align}\\] <p>So how do we include \\(\\alpha_4\\) in our expressions so that we can find the relationships between it and our independent state variable, \\(\\alpha_4\\)?  Create another constraint expression from a vector that uses it!</p> \\[(\\vec{p}_2'-\\vec{p}_2)\\cdot \\hat{a}_y=0\\] <p>Recalculating, we now have three equations, three unknowns, and one independent variable, \\(\\alpha_1\\)</p> \\[\\begin{align} J = &amp;\\left[\\begin{array}{c | c c c} j_{11}&amp;j_{12}&amp;j_{13}&amp;j_{14}\\\\ j_{21}&amp;j_{22}&amp;j_{23}&amp;j_{24}\\\\ j_{31}&amp;j_{32}&amp;j_{33}&amp;j_{34} \\end{array}\\right]\\\\ 0=&amp;J\\dot{\\alpha}\\\\ = &amp;\\left[\\begin{array}{c | c c c} j_{11}&amp;j_{12}&amp;j_{13}&amp;j_{14}\\\\ j_{21}&amp;j_{22}&amp;j_{23}&amp;j_{24}\\\\ j_{31}&amp;j_{32}&amp;j_{33}&amp;j_{34} \\end{array}\\right] \\begin{bmatrix}     \\dot\\alpha_1 \\\\\\hline \\dot\\alpha_2\\\\\\dot\\alpha_3\\\\\\dot \\alpha_4 \\end{bmatrix} \\\\ 0= &amp;  \\underbrace{ \\begin{bmatrix}     j_{11}\\\\     j_{21}\\\\     j_{31} \\end{bmatrix}  }_A \\underbrace{\\begin{bmatrix}\\dot \\alpha_1\\end{bmatrix}}_\\dot{q_i} +  \\underbrace{ \\begin{bmatrix}     j_{12}&amp;j_{13}&amp;j_{14}\\\\     j_{22}&amp;j_{23}&amp;j_{24}\\\\     j_{32}&amp;j_{33}&amp;j_{34} \\end{bmatrix} }_B \\underbrace{ \\begin{bmatrix}     \\dot\\alpha_2\\\\\\dot\\alpha_3\\\\\\dot \\alpha_4 \\end{bmatrix} }_\\dot{q_d}\\\\ \\end{align}\\]"},{"location":"lecture-notes/lecture-08/#board-images","title":"Board Images","text":"<p>Ways to specify \\(\\alpha_1\\)</p>"},{"location":"lecture-notes/lecture-08/#code","title":"Code","text":"<ul> <li>quaternion-updated</li> <li>four-bar-points</li> <li>four-bar-alphas</li> </ul>"},{"location":"lecture-notes/lecture-09/","title":"Lecture 9 Notes","text":""},{"location":"lecture-notes/lecture-09/#what-is-a-gait","title":"What is a \"Gait\"","text":""},{"location":"lecture-notes/lecture-09/#different-animals","title":"Different Animals","text":"<p>https://en.wikipedia.org/wiki/Gait</p>"},{"location":"lecture-notes/lecture-09/#two-legged","title":"Two-legged","text":"<ul> <li>Walk</li> <li>Run</li> </ul>"},{"location":"lecture-notes/lecture-09/#four-legged-horse","title":"Four-legged (horse)","text":"<ul> <li>walk</li> <li>trot</li> <li>canter</li> <li>gallop</li> <li>pronk</li> </ul>"},{"location":"lecture-notes/lecture-09/#six-legged","title":"Six-legged","text":"<ul> <li>Alternating Tripod</li> <li>...many others</li> </ul>"},{"location":"lecture-notes/lecture-09/#representing-visualizing","title":"Representing / Visualizing","text":"<ul> <li>Footprints</li> <li>Footfall Patterns</li> <li>Still frames</li> <li>Marker based motion</li> <li>Ground force reactions</li> <li>Muscle Activation patterns</li> </ul>"},{"location":"lecture-notes/lecture-09/#reproducing-gaits","title":"Reproducing Gaits","text":"<ul> <li>CPGs</li> <li>Other Periodic Functions</li> </ul>"},{"location":"lecture-notes/lecture-09/#periodic-functions","title":"Periodic Functions","text":"\\[y = A\\sin(t)\\]"},{"location":"lecture-notes/lecture-09/#additional-parameters","title":"Additional parameters","text":"\\[y = A\\sin(2\\pi(ft-l)) + b\\] <ul> <li>\\(f\\): frequency (Hz)</li> <li>\\(b\\): vertical offset</li> <li>\\(t\\): time</li> <li>\\(l\\): percentage of cycle</li> </ul>"},{"location":"lecture-notes/lecture-09/#amplitude","title":"Amplitude","text":""},{"location":"lecture-notes/lecture-09/#frequency","title":"Frequency","text":""},{"location":"lecture-notes/lecture-09/#offset","title":"Offset","text":""},{"location":"lecture-notes/lecture-09/#time-offset","title":"Time Offset","text":""},{"location":"lecture-notes/lecture-09/#time-offset_1","title":"Time Offset","text":""},{"location":"lecture-notes/lecture-09/#superposition","title":"Superposition","text":""},{"location":"lecture-notes/lecture-09/#python-functions","title":"Python Functions","text":"<pre><code>\ndef myfunction(variable1,variable2):\n    internal_variable = variable1+variable2\n    return internal_variable\n\n</code></pre>"},{"location":"lecture-notes/lecture-09/#board-images","title":"Board Images","text":""},{"location":"lecture-notes/lecture-10/","title":"Lecture 10 Notes","text":""},{"location":"lecture-notes/lecture-10/#agenda","title":"Agenda","text":"<ul> <li>Go over homework 2 Tuesday</li> <li>Introduction to mujoco</li> <li>Begin transformations tutorial</li> </ul>"},{"location":"lecture-notes/lecture-11/","title":"Lecture 11 notes","text":""},{"location":"lecture-notes/lecture-11/#agenda","title":"Agenda","text":"<ul> <li>Finishing the \"transformations\" example<ul> <li>Case Study 1</li> <li>Case Study 2</li> </ul> </li> <li>Double Pendulum Example<ul> <li>XML Walkthrough</li> <li>Python code</li> <li>Parent Child</li> <li>Plotting Data</li> <li>Saving Data to a file</li> <li>Setting Initial Conditions</li> <li>Adding other Joint parameters</li> <li>Adding separate inertial tag</li> <li>Specifying Gravity</li> <li>Specifying Timestep</li> <li>Enabling Contact</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-11/#finishing-transformations-tutorial","title":"Finishing Transformations Tutorial","text":"<p>See the transformations tutorial</p>"},{"location":"lecture-notes/lecture-11/#pendulum-example-walkthrough","title":"Pendulum Example Walkthrough","text":"<p>See the pendulum tutorial</p>"},{"location":"lecture-notes/lecture-12/","title":"Lecture 12 notes","text":""},{"location":"lecture-notes/lecture-12/#agenda","title":"Agenda","text":"<ul> <li>Finish the Double Pendulum Tutorial<ul> <li>Changing Render Resolution</li> <li>Outputting rendering to a file</li> <li>Actuators</li> <li>Controllers</li> <li>Constraints</li> <li>Sensors</li> <li>String templates</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-12/#finishing-the-double-pendulum-tutorial","title":"Finishing the double pendulum Tutorial","text":"<p>See the pendulum tutorial</p>"},{"location":"lecture-notes/lecture-12/#board-images","title":"Board images","text":""},{"location":"lecture-notes/lecture-13/","title":"Lecture 13 Notes","text":""},{"location":"lecture-notes/lecture-13/#agenda","title":"Agenda","text":"<ul> <li>Finish HW2 Discussion</li> <li>Discuss HW3</li> <li>Distribute Parts</li> <li>New Anaconda Packages</li> <li>ESP 32 / VSCode / Servo Demonstration</li> <li>Servo example</li> </ul>"},{"location":"lecture-notes/lecture-13/#concepts-covered-today","title":"Concepts Covered today","text":"<ul> <li>Homework questions<ul> <li>There was a question about the data.yml file:  Please refer to lecture 11 notes.  We will be loading this file using the second half of the yaml saving/loading example done in class.</li> <li>Q: I can't set initial conditions correctly.  What could I be doing wrong?<ul> <li>A: Make sure you set initial conditions after resetting the sim</li> <li>A: Remember that joint angles are given in radians in the python code, while you can define it in the XML file to be radians or degrees.</li> </ul> </li> <li>Q: What's a good way to plot the output in Part 2?<ul> <li>A: See matplotlib examples, specifically this example</li> </ul> </li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-13/#overview-of-esp32","title":"Overview of ESP32","text":"<ul> <li>I will fix dead links in this page</li> <li>ESP32 is a module.  The dev kit is the board it is mounted on, which includes other parts, including<ul> <li>3.3V voltage regulator</li> <li>USB-serial converter</li> <li>LEDs and resistors</li> <li>Header pins for use with breadboard</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-13/#breadboard-connections","title":"Breadboard connections","text":"<ul> <li>The ESP32 is quite wide, so that only one side of pins is accessible when plugged into the breadboard.  <ul> <li>We want to expose the <code>Vin</code> and <code>Gnd</code> side of the board when you plug it into the breadboard.</li> <li>We don't need to access the 3.3V output</li> <li>Connect vin to the red rail</li> <li>Connect gnd to the blue rail</li> </ul> </li> <li>Servo<ul> <li>See this overview.  We will probably go over in more detail</li> <li>3 wires:<ul> <li>Brown/Black is ground</li> <li>Red is +V (we will connect to <code>Vin</code>)</li> <li>Yellow is signal</li> </ul> </li> <li>timing of the PWM signal corresponds to position</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-13/#walkthrough-of-esp32-installation-steps","title":"Walkthrough of ESP32 installation steps","text":"<ul> <li>Need new packages installed in your base conda environment.  I updated the conda page, but the esp32 installation page also has the instructions.</li> <li>Need to install CP2102 USB-Serial driver in windows.</li> <li>We will be using thonny to flash micropython to our device.<ul> <li>Use v1.20 or newer.</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-13/#vs-code-introduction","title":"VS Code Introduction","text":"<p>We will be using VS code to develop our python project</p> <ul> <li>VS Code is not VisualStudio.net; it's more like a fancy text editor with plugins.</li> <li>The keyboard shortcuts are awesome, specifically <code>ctrl</code>+<code>shift</code>+<code>p</code></li> <li>See this page to install and use vscode.</li> <li> <p>You can install all the plugins listed, but we will be using pymakr-preview, so make sure you install that one.  Below is the command you can run from <code>cmd</code></p> <p><code>bash code --install-extension Pycom.pymakr-preview</code></p> </li> </ul>"},{"location":"lecture-notes/lecture-13/#vs-code-interaction-with-esp32","title":"VS Code Interaction with ESP32","text":"<p>This is just a summary.  This is covered in more detail here</p> <ul> <li>Once pymakr-preview is installed, create a new workspace in vs code and add a new pymakr-preview project.</li> <li>Interaction will happen in the top bar.</li> <li>select your esp32 if it is connected (COM1, COM2, etc if windows, ttyUSBX or similar if linux/Mac)</li> <li>Use the icons to connect to your esp32, program, interact with it</li> <li>boot.py runs first</li> <li>main.py runs next</li> <li>Use <code>ctrl</code>+<code>c</code> to kill a running program before you can interact in the interpreter or download new code.</li> <li>Use the <code>en</code> button on the esp32 dev board to hard reset the board.  this will trigger it to load boot.py and main.py</li> </ul> <p></p> <p></p> <p></p> <p></p>"},{"location":"lecture-notes/lecture-13/#code-examples","title":"Code Examples","text":""},{"location":"lecture-notes/lecture-13/#example-1","title":"Example 1","text":"<pre><code>from machine import Pin, PWM\nfrom time import sleep\nfrequency = 50\nrange_low = 28\nrange_high = 122\n\nservo1 = PWM(Pin(13),frequency)\n\nwhile(True):\n    servo1.duty(range_low)\n    sleep(1)\n    servo1.duty(range_high)\n    sleep(1)\n</code></pre>"},{"location":"lecture-notes/lecture-13/#example-2","title":"Example 2","text":"<pre><code>from machine import Pin, PWM\nfrom time import sleep\nfrequency = 50\nrange_low = 28\nrange_high = 122\n\nservo1 = PWM(Pin(13),frequency)\nservo2 = PWM(Pin(12),frequency)\nservo3 = PWM(Pin(14),frequency)\nservo4 = PWM(Pin(27),frequency)\n\nwhile(True):\n    servo1.duty(range_low)\n    servo2.duty(range_low)\n    servo3.duty(range_low)\n    servo4.duty(range_low)\n    sleep(1)\n    servo1.duty(range_high)\n    servo2.duty(range_high)\n    servo3.duty(range_high)\n    servo4.duty(range_high)\n    sleep(1)\n</code></pre>"},{"location":"lecture-notes/lecture-13/#example-3","title":"Example 3","text":"<p>In this example, we create an <code>angle_to_pwm()</code> function that converts a desired angle in terms of the servo's angular range to a PWM range</p> <pre><code>from machine import Pin, PWM\nfrom time import sleep\nfrequency = 50\nrange_low = 28\nrange_high = 122\n\nservo1 = PWM(Pin(13),frequency)\n\ndef angle_to_pwm(angle):\n    output_range = range_high-range_low\n    input_range = 180-0\n    output_pwm = (angle/input_range)*output_range+range_low\n    return int(output_pwm)\n\nfor angle in range(180):\n    servo1.duty(angle_to_pwm(angle))\n    sleep(.01)\n</code></pre>"},{"location":"lecture-notes/lecture-14/","title":"Lecture 14 Notes","text":""},{"location":"lecture-notes/lecture-14/#agenda","title":"Agenda","text":"<ul> <li>HW4 Released</li> <li>HW3 Final questions</li> <li>Project Due Friday</li> <li>VSCode Install Issues</li> <li>Compliance</li> <li>Finish Servo Example</li> </ul>"},{"location":"lecture-notes/lecture-14/#terms","title":"Terms","text":"<ul> <li>Flexure</li> </ul>"},{"location":"lecture-notes/lecture-14/#other-advantages-of-compliant-mechanism","title":"Other advantages of compliant Mechanism","text":"<ul> <li>Fewer pinch points</li> <li>Biocompatibility</li> </ul>"},{"location":"lecture-notes/lecture-14/#series-compliance","title":"Series Compliance","text":"<p>please see the new tutorial on series and parallel elements</p>"},{"location":"lecture-notes/lecture-14/#code-from-todays-example","title":"Code from today's example","text":"<pre><code>from machine import Pin, PWM\nfrom time import sleep\nfrequency = 50\nrange_low = 28\nrange_high = 122\n\nservo1 = PWM(Pin(13),frequency)\n\ndef angle_to_pwm(angle):\n    output_range = range_high-range_low\n    input_range = 180-0\n    output_pwm = (angle/input_range)*output_range+range_low\n    if output_pwm&lt;range_low:\n        output_pwm=range_low\n    if output_pwm&gt;range_high:\n        output_pwm=range_high\n    return int(output_pwm)\n\n# for angle in range(180):\n#     servo1.duty(angle_to_pwm(angle))\n#     sleep(.01)\n\nimport time\nt0=time.time_ns()\n\nimport math\n\nA = 90\nf = 2\nl=.25\n\nwhile True: \n    t=time.time_ns()\n    dt = (t - t0)/1e9\n    y = A*math.sin(dt*2*(f*math.pi+l))+90\n    servo1.duty(angle_to_pwm(y))\n</code></pre>"},{"location":"lecture-notes/lecture-14/#extended-version-of-todays-code","title":"Extended Version of Today's code","text":"<p>Can be found here</p>"},{"location":"lecture-notes/lecture-14/#board-photos","title":"Board Photos","text":""},{"location":"lecture-notes/lecture-15/","title":"Lecture 15 Notes","text":""},{"location":"lecture-notes/lecture-15/#agenda","title":"Agenda","text":"<ul> <li>Project Due Friday</li> <li>Servos code shared</li> <li>Compliance wrapup</li> <li>Mass and Inertia Lecture</li> <li>Mass and Inertia Example</li> <li>Using HW3 in projects</li> </ul>"},{"location":"lecture-notes/lecture-15/#mass-and-inertia","title":"Mass and Inertia","text":"<p>see this tutorial on the theory</p>"},{"location":"lecture-notes/lecture-15/#using-solidworks-to-find-inertia","title":"Using Solidworks to find inertia","text":"<p>see this tutorial to learn how to identify the inertia of shapes using solidworks</p>"},{"location":"lecture-notes/lecture-15/#example","title":"Example","text":"<p>see this tutorial for a practical example</p>"},{"location":"lecture-notes/lecture-15/#board-photos","title":"Board Photos","text":""},{"location":"lecture-notes/lecture-16/","title":"Lecture 16 Notes","text":"<ul> <li>Project 2 Part 1 Posted<ul> <li>Due in 2 weeks</li> <li>Part 2 due Dec 14</li> </ul> </li> <li>Project 1 and Midterm grading will be returned next week.</li> <li>Released more tutorials based on lectures<ul> <li>added info to lec 12 notes (motor controller)</li> </ul> </li> <li>Assignment plan going forward</li> <li>Lecture<ul> <li>Motor Theory and Modeling</li> </ul> </li> <li>Activity<ul> <li>Go through data collection exercise</li> <li>Inertia Calc in Solidworks</li> </ul> </li> <li>Final Exam: Dec 19, in class</li> </ul>"},{"location":"lecture-notes/lecture-16/#assignment-plan-going-forward","title":"Assignment plan going forward","text":"<ul> <li>Work through problems in class more, before due</li> <li> <p>Requires you to</p> <ul> <li>come prepared</li> <li>bring your problems</li> <li>work in advance</li> <li>more active participation</li> </ul> </li> <li> <p>Assignments are still due</p> <ul> <li>do your own work unless we do it together in class.</li> </ul> </li> <li>Your job to complete them.</li> </ul>"},{"location":"lecture-notes/lecture-16/#thursday","title":"Thursday","text":"<ul> <li>copme with a video</li> <li>come with an initial model that runs</li> <li>work in paris to collect data in part 1 is ok<ul> <li>state who you worked with for Yigits sake</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-16/#steady-state-motors","title":"Steady State Motors","text":"<ul> <li>See this tutorial on basic motor theory</li> <li>see this tutorial on steady state behavior</li> </ul>"},{"location":"lecture-notes/lecture-16/#board-photos","title":"Board Photos","text":""},{"location":"lecture-notes/lecture-17/","title":"Lecture 17 Notes","text":"<ul> <li>Office Hour oops</li> <li>Project 2 Part 1 Questions?<ul> <li>Meeting scheduled with 1 team</li> <li>find a time with me</li> </ul> </li> <li>Released more motor tutorials<ul> <li>motor theory</li> <li>Steady-state walkthrough</li> <li>second-order</li> <li>first-order</li> <li>first-order lumped</li> </ul> </li> <li>Today:<ul> <li>Series Damping and Compliance</li> <li>Motor \\(k_e\\) / \\(k_e\\) slope</li> <li>Homework walkthrough</li> <li>Inertia Calc in Solidworks</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-17/#motor-k_e-k_e-slope","title":"Motor \\(k_e\\) / \\(k_e\\) slope","text":"<p>please see the Steady-state walkthrough for improved plot from what was shown last lecture</p>"},{"location":"lecture-notes/lecture-17/#inertia-calc-in-solidworks","title":"Inertia Calc in Solidworks","text":"<p>See Here for a new tutorial</p>"},{"location":"lecture-notes/lecture-17/#series-compliance-and-damping","title":"Series Compliance and Damping","text":"<p>please see the new tutorial on series and parallel elements</p>"},{"location":"lecture-notes/lecture-17/#homework-discussion","title":"Homework discussion","text":"<ul> <li>How do we get the deflection of the end point?</li> <li>how do we import / massage data from tracker into python?</li> <li>we have xpos as initial conditions, but we can't set xpos, only qpos.  How do we do it?</li> <li>should the joints be equally spaced?<ul> <li>yes.  the assumption of equal joint stiffness is based on the assumption of equal spacing.  if you put more joints in one area you would probably need to stiffen those joints more.  more discussion on tuesday...</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-17/#getting-end-point-deflectino","title":"Getting end-point deflectino","text":"<p>add a small geom to the distal-most body, at the location where your tracking marker is located.  Make sure the mass of this extra geom is negligible.  MuJoCo will add the information about this point's center of mass to the xpos list.</p>"},{"location":"lecture-notes/lecture-17/#massaging-data","title":"Massaging data","text":"<ul> <li>use tracker's options for coordinate system, including origin and angle, as well as a \"calibration stick\" in order to scale and shift your position data before it comes into python</li> <li>Use either <code>pandas.read_csv()</code> or <code>numpy.getfromtxt()</code> functions</li> </ul>"},{"location":"lecture-notes/lecture-17/#setting-initial-conditions","title":"Setting Initial Conditions","text":"<p>Setting your simulation to match the initial conditions of your experiment can be hard without planning.  here is a summary of the many ways you could obtain initial condition information based on some guesswork</p> <p>In reality, this is an iterative process, where you use an initial assumption to get better data, that you use iteratively to improve your guess until there is little change.  In practice for the assignment, we will be only doing / expecting one pass.</p>"},{"location":"lecture-notes/lecture-17/#options","title":"Options","text":"<ul> <li>Use FEA or static beam theory, along with a guess about material properties and loading to get the initial shape of the beam.</li> <li>Use a still frame (image) of the first image of your experiment video to extract / measure the positions of your beams in the pseudo-rigid body model</li> <li>With a guess for joint stiffness values, apply a small external load to the end of the beam in mujoco (using <code>xfrc_applied</code>), varying the load until you get the deflection observed in your experiment.  use those <code>qpos</code> values as your initial conditions for the optimization step</li> <li>Take direct measurements of the deflections prior to running the experiment</li> </ul> <p>or</p> <ul> <li>change your initial conditions in your experiment so that the beam starts from an undeflected state.s</li> </ul>"},{"location":"lecture-notes/lecture-17/#adding-external-cartesion-forces-to-simulation","title":"Adding external cartesion forces to simulation","text":"<p>add before the <code>step()</code> function within your simulation loop:</p> <pre><code>data.body('B').xfrc_applied[2] = -200\n</code></pre> <ul> <li>xfrc applied is a 6-element array, of x,y,z,tx,ty,tz elements.</li> <li>the command above applies a 200N force to body \"B\" in the negative y direction.</li> </ul>"},{"location":"lecture-notes/lecture-17/#interpolation","title":"Interpolation","text":"<p>Data comes in at 30fps but mujoco runs at a different timestep.  How do you get the numbers to line up?</p>"},{"location":"lecture-notes/lecture-17/#options_1","title":"Options","text":"<ol> <li>Interpolate experimental data to fit the precision of the simulation.  <ul> <li>see <code>scipy.interpolate</code> module documentation<ul> <li>can do linear, quadratic, cubic, etc...many options</li> <li>essentially feed in data and get out a function</li> <li>you can evaluate the function anywhere within the domain of the data you fed in, and sometimes you can extrapolate too!</li> </ul> </li> <li>interpolation is really necessary when you have \"irregular\" timings.  In our case, we just have different sample rates</li> </ul> </li> <li>change mujoco timestep<ul> <li>not desired because it impacts simulation precision</li> </ul> </li> <li>Decimate your data after the fact<ul> <li>fractional differences in timing might produce irregularities and still require interpolation...</li> <li>means you generate a lot of data and then throw it away</li> </ul> </li> <li>select a data \"sampling\" frequency just like we have already done with rendering &amp; animation.<ul> <li>only collect data every so many time steps.</li> <li> <p>should set your base timestep to a whole-number fraction of your data-collection framerate</p> <p>if experimental data was collected at 30fps, run your simulation at 600Hz, 3000Hz, 12000Hz, etc, but maybe not 1000Hz, because \\(1000/30=33.33\\bar{3}\\), ie not a whole number.</p> </li> </ul> </li> </ol>"},{"location":"lecture-notes/lecture-17/#minimization-function","title":"Minimization Function","text":"<ul> <li><code>scipy.optimize.minimize()</code> is a function that can use many underlying algorithms.  Instead of using the default, you should select the \"right\" algorithm.</li> <li>each algorithm has extra arguments that control different things</li> <li>you should look for algorithms that permit supplying \"constraints\" or \"bounds\" so that you don't try to find negative k or b values, for example</li> <li>look for algorithms' \"tolerance\" terms.<ul> <li>The larger the error tolerance, the more likely it is to solve</li> <li>I use 1e-3, which is ~1mm if measuring error in distance</li> <li>1e-8 could take much longer to solve and you may not need that precision.</li> <li>usually called <code>tol</code>, <code>atol</code>, <code>rtol</code>, <code>ftol</code>, <code>fatol</code>, etc.</li> </ul> </li> <li>I like the \"powell\" algorithm.</li> </ul>"},{"location":"lecture-notes/lecture-17/#board-images","title":"Board Images","text":""},{"location":"lecture-notes/lecture-18/","title":"Lecture 18 Notes","text":"<ul> <li>Went over the tutorial on series and parallel elements</li> <li>Walkthrough of Servo data collection process</li> <li>Walkthrough of servo model fitting example</li> </ul>"},{"location":"lecture-notes/lecture-18/#board-images","title":"Board Images","text":""},{"location":"lecture-notes/lecture-19/","title":"Lecture 19 Notes","text":""},{"location":"lecture-notes/lecture-19/#agenda","title":"Agenda","text":"<ul> <li>Go over practical example of design optimization with Burak and Yigit<ul> <li>Show simulation</li> <li>discuss optimization</li> <li>show robot</li> </ul> </li> <li>In-class flex-time to work on HW5 (Design Optimization)</li> </ul>"},{"location":"lecture-notes/lecture-19/#board-images","title":"Board Images","text":""},{"location":"lecture-notes/lecture-20/","title":"Lecture 20 Notes","text":""},{"location":"lecture-notes/lecture-20/#agenda","title":"Agenda","text":"<ul> <li>HW3 Released</li> <li>HW4 Grading update</li> <li>Servo Mounting Solutions</li> <li>In-class flex-time to work on HW5 (Design Optimization)<ul> <li>Discuss and implement different types of optimizers / algorithms available</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-20/#board-photos","title":"Board Photos","text":""},{"location":"lecture-notes/lecture-21/","title":"Lecture 21 Notes","text":""},{"location":"lecture-notes/lecture-21/#agenda","title":"Agenda","text":"<ul> <li>IDEAlab Research talk (with a focus on experimentation)</li> </ul>"},{"location":"lecture-notes/lecture-21/#board-photos","title":"Board Photos","text":""},{"location":"lecture-notes/lecture-22/","title":"Lecture 22 Notes","text":""},{"location":"lecture-notes/lecture-22/#agenda","title":"Agenda","text":"<ul> <li>In-class flex-time to work on HW6</li> </ul>"},{"location":"lecture-notes/lecture-22/#board-photos","title":"Board Photos","text":""},{"location":"lecture-notes/lecture-23/","title":"Lecture 23 Notes","text":""},{"location":"lecture-notes/lecture-23/#minutae","title":"Minutae","text":""},{"location":"lecture-notes/lecture-23/#project","title":"Project","text":"<ul> <li>You should be building yoru roobot</li> <li>verify your robot this week</li> <li>Compare simulation to real-world data</li> <li>Bring your robot, simulation, report to class Thursday<ul> <li>10 minute informal presentations from each team</li> </ul> </li> <li>Office hours will be in person this week.  Please come for last minute advice</li> </ul>"},{"location":"lecture-notes/lecture-23/#final","title":"Final","text":"<ul> <li>Review all material on the website</li> <li>URLs Linked-to in lecture notes and tutorials</li> <li>All homeworks</li> </ul>"},{"location":"lecture-notes/lecture-23/#data-collection-and-verification","title":"Data Collection and Verification","text":""},{"location":"lecture-notes/lecture-23/#modes-of-data-collection","title":"Modes of Data Collection","text":"<ul> <li>Static - static beam deflection example<ul> <li>what about large deformations and nonlinear materials?</li> <li>have to perform multiple experiments to obtain stiffness at different loading conditions</li> </ul> </li> <li>Dynamic - dynamic beam deflection example<ul> <li>permits you to obtain stiffness values across a range of positions.</li> <li>why did your HW4 data fit better at the beginning than the end? More signal, higher errors...implicitly weighted</li> <li>split your data into different time-based chunks, calibrate by small deflection and large deflection.</li> </ul> </li> <li>Constant Force, Changing Displacement (Isotonic)</li> <li>Constant Displacement, Changing Force (Isometric)</li> <li>Variable Force / Displacement</li> </ul>"},{"location":"lecture-notes/lecture-23/#sensing-modes","title":"Sensing Modes","text":"<ul> <li>Force-Sensing</li> <li>Force / Motion</li> <li>Motion Generation</li> <li>Motion Tracking<ul> <li>Offboard</li> <li>Onboard</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-23/#experiment-types","title":"Experiment Types","text":""},{"location":"lecture-notes/lecture-23/#constant-force","title":"Constant Force","text":"<ul> <li>Terminology<ul> <li>\"Isotonic\"</li> <li>\"Free Displacement\"</li> </ul> </li> <li>Examples</li> </ul>"},{"location":"lecture-notes/lecture-23/#fixed-displacement","title":"Fixed Displacement","text":"<ul> <li>Terms<ul> <li>\"Blocked Force\"</li> <li>\"Isometric\"</li> </ul> </li> <li>Examples<ul> <li>Stall torque measurement in a motor</li> <li>Example of hydrogel testing</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-23/#mixed-methods","title":"Mixed methods","text":"<ul> <li>Sometimes required because<ul> <li>Input torque is not well characterized</li> </ul> </li> <li>Uses concept of \\(F=ma\\).  If you know or can independently obtain m, you can measure F and x, determine v and a, and then explain or understand system behavior</li> <li>Examples<ul> <li>Cars</li> <li>Biological systems</li> <li>Robots operating in the world</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-23/#constant-velocity","title":"Constant Velocity","text":"<ul> <li>Variant of Blocked force test: You control the position AND the speed, and still measure the force</li> <li>Universal testing machines</li> <li>Hydrogel example</li> </ul>"},{"location":"lecture-notes/lecture-23/#motor-testing-options","title":"Motor Testing Options","text":"<ul> <li>Blocked Force</li> <li>Free Displacement: Inertial load<ul> <li>measure the acceleration as a function of a \"load\" inertia</li> <li>transient data has only a few samples, need to take as a function of different inertia values</li> </ul> </li> <li>Combine both tests with a dynamometer<ul> <li>a characterized motor connected to an unknown motor</li> <li>you can set the torque and observe speed</li> <li>you can drive the unknown motor to obtain \\(k_e\\)</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-23/#force-sensing","title":"Force Sensing","text":""},{"location":"lecture-notes/lecture-23/#strain-gauges","title":"Strain Gauges","text":"<p>https://www.me-systeme.de/en/technology-first/strain-gauge/catalogs</p>"},{"location":"lecture-notes/lecture-23/#how-it-works","title":"How it Works","text":"<ul> <li>https://www.futek.com/strain-gauge-load-cell</li> <li>https://learn.sparkfun.com/tutorials/getting-started-with-load-cells/all</li> </ul>"},{"location":"lecture-notes/lecture-23/#beam-type-load-cell","title":"Beam-type Load cell","text":"<ul> <li>Cheap, easily obtainable, easily defined by two drilled holes</li> <li>four strain gauges mounted on four flexible areas</li> <li>two spots are in compression, two are in tension</li> <li>Use a wheatstone bridge to measure the load</li> <li>Temperature-dependence can be mitigated by placing strain gauges in places where only thermal expansion is measured.</li> <li>Can add elements to create an \"S-type\" load cell</li> </ul>"},{"location":"lecture-notes/lecture-23/#whats-inside","title":"What's inside?","text":"<ul> <li>Strain gauges mounted over four points</li> </ul>"},{"location":"lecture-notes/lecture-23/#force-gauge","title":"Force Gauge","text":"<ul> <li>Combines <ul> <li>S-type Load cell capable of measuring tension / compression</li> <li>mechancial attachment options</li> <li>signal condidioning circuitry</li> <li>digital readout</li> <li>functions<ul> <li>taring</li> <li>units</li> </ul> </li> <li>often a serial output</li> <li>permits you to measure the input force in a free-displacement test, when impossible or impractical to specify a known input.<ul> <li>similar concept used in biomechanics motion studies</li> </ul> </li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-23/#3-axis-load-cell","title":"3-Axis Load Cell","text":"<p>You can combine single-axis load cells into a single unit</p>"},{"location":"lecture-notes/lecture-23/#force-torque-sensors","title":"Force Torque Sensors","text":"<ul> <li>ATI is a well-known company with many different sizes, for example</li> </ul>"},{"location":"lecture-notes/lecture-23/#ati-nano-17","title":"ATI Nano 17","text":"<ul> <li>One of the smaller six-axis load cells</li> <li>Smaller than that, you have to instrument and calibrate your own experimental setup...requires additional experiments and design iterations</li> </ul>"},{"location":"lecture-notes/lecture-23/#load-cells","title":"Load cells","text":"<ul> <li>are temperature dependent</li> <li>calibration curves can be obtained, but often this makes force based sensing less desirable</li> <li>can switch to free-displacement under fixed loading conditions to solve this problem</li> <li>example: hydrogel</li> </ul>"},{"location":"lecture-notes/lecture-23/#a-note-on-fsrs","title":"A note on FSRs","text":"<ul> <li>Force Sensing Resistors</li> <li>Come in a variety of shapes and sizes</li> <li>Don't use for data collection</li> <li>Hysteretic</li> <li>Time-dependent</li> <li>Temperature dependent</li> <li>Noisy</li> <li>Good for qualitative data</li> <li>Bad for quantitative data</li> </ul>"},{"location":"lecture-notes/lecture-23/#defining-position","title":"Defining Position","text":""},{"location":"lecture-notes/lecture-23/#linear-stages","title":"Linear Stages","text":"<ul> <li>Motorized or manual</li> <li>Macro to Micron-level control</li> <li>can be motorized or manual</li> <li>Permit one to prescribe the position accurately in a blocked-force test</li> </ul>"},{"location":"lecture-notes/lecture-23/#position-sensing","title":"Position Sensing","text":"<p>Variants:</p> <ul> <li>optical encoder</li> <li>inductive</li> <li>magnetic</li> <li>capacitive</li> </ul> <p>Details</p> <ul> <li>Can be linear or rotary</li> <li>Can be relative or absolute<ul> <li>absolute encoders encode 360 degree position as a unique number</li> <li>relative just keep track of the number of \"ticks\" from starting.</li> <li>relative encoders often have an extra \"home\" signal for 0 degrees</li> <li>relative encoders can / should be used with homing procedures and extra absolute positioning schemes like limit switches</li> <li>Rely on the concept of \"quadrature\"<ul> <li>two sensors offset to get delayed sinusoidal information from the same physical reading.</li> <li>Helps determine the direction of motion.</li> <li>applies to all underlying technologies (capacitive, inductive, magnetic, optical)</li> </ul> </li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-23/#lvdt","title":"LVDT","text":"<ul> <li>Ususally a linear device<ul> <li>uses a ferrous material sliding between different coils.  </li> <li>The relative inductance difference between coils can be used to accurately locate a linear position.</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-23/#combined-forcemotion","title":"Combined Force/Motion","text":"<ul> <li>Biomechanics studies are often performed in a \"gait lab\"<ul> <li>combination of force sensing AND motion tracking</li> </ul> </li> <li>force sensing<ul> <li>fixed plates you walk over</li> <li>treadmills with split sides for measuring each foot</li> <li>each has their own benefits and tradeoffs</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-23/#spatial-motion-tracking","title":"Spatial Motion Tracking","text":""},{"location":"lecture-notes/lecture-23/#popular-cameras","title":"Popular Cameras","text":"<ul> <li>Vicon</li> <li>Optitrack</li> <li>Others<ul> <li>Qualisys</li> <li>Sony</li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-23/#types-of-markers","title":"Types of Markers","text":"<ul> <li>Color</li> <li>Shape</li> <li>Passive IR Reflective<ul> <li>Tape, Sphere,</li> </ul> </li> <li>Active</li> <li> <p>QR, ArToolKit, AprilTag, ArUco...</p> </li> <li> <p>https://www.slideshare.net/JensGrubert/a-short-introduction-to-computer-visionbased-marker-tracking</p> </li> </ul>"},{"location":"lecture-notes/lecture-23/#active-marker-example","title":"Active Marker Example","text":"<ul> <li>HTC Tracker</li> </ul>"},{"location":"lecture-notes/lecture-23/#markerless","title":"Markerless","text":"<ul> <li>Uhlrich SD, Falisse A, Kidzi\u0144ski \u0141, Muccini J, Ko M, Chaudhari AS, et al. (2023) OpenCap: Human movement dynamics from smartphone videos. PLoS Comput Biol 19(10): e1011462. https://doi.org/10.1371/journal.pcbi.1011462</li> <li>https://web.stanford.edu/group/biomotion/markerless.html</li> </ul>"},{"location":"lecture-notes/lecture-23/#other-types-of-range-imaging","title":"Other Types of Range Imaging","text":"<ul> <li>Structured Light: Using a 2d pattern projected from a projector along with a camera to infer the 3d shape of objects</li> <li>RGB-D Camera: Many different technologies that can be used to produce a 2d image with four values (red, green, blue, distance)</li> <li>Stereoscopy: specific technology using the geometry of cameras and lenses to infer the distance to key points</li> <li>Kinect: Specific implementation of an RGB-D camera</li> <li>Lidar: Scanning curtain of laser light that typically uses time of flight to measure the distance to objects, generating a \"point cloud\"</li> <li>Time of Flight: Measure the time it takes for light to arrive at a location to infer distance</li> <li>Light Field Camera: obtain information about the path/depth of light traveling from objects to capture images from different distances separately, saving a depth-based image of a scene, allowing you to reconstruct images at different focal planes</li> <li>Interferometry: measuring the phase-shift of light to determine distance/depth/speed information</li> <li>Particle Image Velocimetry (PIV): Use a curtain of laser light to illuminate thin slices of particles, in order to view their flow in a fluid.  Useful for aerodynamic studies</li> <li>Optical Flow / SLAM: Measuring the motion of key points in a video, and using the relative motion of those points to infer information about the environment an object is moving through as well as the location of the object itself.</li> </ul> <p>https://en.wikipedia.org/wiki/Range_imaging</p>"},{"location":"lecture-notes/lecture-23/#onboard-data-collection","title":"Onboard Data Collection","text":"<ul> <li>Onboard<ul> <li>IMU<ul> <li>Accelerometer</li> <li>Gyroscope</li> <li>Magnetometer</li> </ul> </li> <li>GPS</li> <li>Sensor fusion can combine different sensor data together gracefully, in order to eliminate poor characteristics of each one.<ul> <li>difficult to implement</li> <li>Kalman filtering is useful.</li> </ul> </li> </ul> </li> </ul>"},{"location":"lecture-notes/lecture-23/#other-considerations","title":"Other Considerations","text":""},{"location":"lecture-notes/lecture-23/#data-collection","title":"Data Collection","text":"<ul> <li>ADCs and DAQs</li> <li>Latency</li> <li>Synchronization<ul> <li>concept of a clap-board in the movies</li> </ul> </li> <li>Communication</li> </ul>"},{"location":"lecture-notes/lecture-23/#generating-motion","title":"Generating Motion","text":"<ul> <li>Motor Controllers<ul> <li>Brushed</li> <li>Brushless</li> </ul> </li> <li>Communication Protocols</li> <li>Driver Boards</li> <li>Latency</li> <li>Controller Design</li> </ul>"},{"location":"lecture-notes/lecture-23/#other-types-of-motion","title":"Other types of motion","text":"<ul> <li>Pneumatic</li> <li>Hydraulic</li> <li>...</li> </ul>"},{"location":"lecture-notes/lecture-23/#external-references","title":"External References","text":"<ul> <li>https://www.motioncontroltips.com/faq-what-are-capacitive-encoders-and-where-are-they-suitable/</li> <li>https://e.sentech.nl/en/news/inductive-encoder-accurately-measure-displacement-in-harsh-conditions</li> <li>https://en.wikipedia.org/wiki/File:SynTouch_BioTac.jpg</li> <li>https://www.youtube.com/watch?v=ksTlfklav-k</li> <li>https://www.mdpi.com/1424-8220/17/12/2762</li> <li>Yuan W, Dong S, Adelson EH. GelSight: High-Resolution Robot Tactile Sensors for Estimating Geometry and Force. Sensors. 2017; 17(12):2762. https://doi.org/10.3390/s17122762</li> <li>https://resou.osaka-u.ac.jp/en/research/2018/20181114_2</li> </ul>"},{"location":"lecture-notes/lecture-23/#board-images","title":"Board Images","text":""},{"location":"lecture-notes/lecture-24/","title":"Lecture 24 Notes","text":"<p>Today's Lecture is based off of several sources:</p> <ul> <li>Fabrication Process:  </li> <li>Video Tutorial of the Process</li> <li>Shapely tutorial</li> <li>manufacturing computation</li> <li>Cut-File Generation</li> </ul>"},{"location":"lecture-notes/lecture-24/#foldable-robotics-code","title":"Foldable Robotics Code","text":"<pre><code>pip install foldable-robotics\n</code></pre> <p>https://idealab.asu.edu/code_foldable_robotics/ https://github.com/idealabasu/code_foldable_robotics</p>"},{"location":"lecture-notes/lecture-24/#subfolders","title":"Subfolders","text":""},{"location":"lecture-notes/lecture-24/#pictures","title":"Pictures","text":""},{"location":"lecture-notes/lecture-24/#videos","title":"Videos","text":""},{"location":"tutorials/dynamics/compliant_beam_analysis/01-theory/","title":"Theory","text":""},{"location":"tutorials/dynamics/compliant_beam_analysis/01-theory/#series-dampers","title":"Series Dampers","text":"\\[F = -b_1(v_2-v_1)\\] \\[F = -b_2(v_3-v_2)\\] \\[F = -b(v_3-v_1)\\] \\[v_2 = v_3 + \\frac{F}{b_2}\\] \\[F = -b_1(v_2-v_1)\\] \\[F = -b_1((v_3 + \\frac{F}{b_2}))-v_1) \\] \\[F = -b_1 v_3 + b_1 v_1 - \\frac{b_1 F}{b_2} \\] \\[F (1+\\frac{b_1}{b_2}) = -b_1 v_3 + b_1 v_1  \\] \\[-b(v_3-v_1) (1+\\frac{b_1}{b_2}) = -b_1 (v_3 - v_1)  \\] \\[b (1+\\frac{b_1}{b_2}) = b_1 \\] \\[b = \\frac{b_1}{(1+\\frac{b_1}{b_2}) } \\] \\[b = \\frac{b_1 b_2}{b_2+b_1 } \\] <p>So...</p> \\[b = \\frac{1}{\\sum_{i=1}^N \\frac{1}{b_i}}\\]"},{"location":"tutorials/dynamics/compliant_beam_analysis/01-theory/#series-springs","title":"Series Springs","text":"\\[F = -k_1(x_2-x_1)\\] \\[F = -k_2(x_3-x_2)\\] \\[F = -k(x_3-x_1)\\] \\[x_2 = x_3 + \\frac{F}{k_2}\\] \\[F = -k_1(x_2-x_1)\\] \\[F = -k_1((x_3 + \\frac{F}{k_2}))-x_1) \\] \\[F = -k_1 x_3 + k_1 x_1 - \\frac{k_1 F}{k_2} \\] \\[F (1+\\frac{k_1}{k_2}) = -k_1 x_3 + k_1 x_1  \\] \\[-k(x_3-x_1) (1+\\frac{k_1}{k_2}) = -k_1 (x_3 - x_1)  \\] \\[k (1+\\frac{k_1}{k_2}) = k_1 \\] \\[k = \\frac{k_1}{(1+\\frac{k_1}{k_2}) } \\] \\[k = \\frac{k_1 k_2}{k_2+k_1 } \\] <p>So...</p> \\[k = \\frac{1}{\\sum_{i=1}^N \\frac{1}{k_i}}\\]"},{"location":"tutorials/dynamics/compliant_beam_analysis/01-theory/#parallel-springs-and-dampers","title":"Parallel Springs and Dampers","text":"\\[k = k_1+k_2 \\] \\[b = b_1+b_2\\]"},{"location":"tutorials/dynamics/compliant_beam_analysis/02-compliant_beam_analysis/","title":"Compliant Beam Analysis","text":"<pre><code>import os\nimport mujoco\nimport numpy\nimport mediapy as media\nimport matplotlib.pyplot as plt\nimport scipy.optimize as so\n</code></pre> <pre><code>k_total = 10\nb_total = .2\n</code></pre> <pre><code>main_template = \"\"\"\n&lt;mujoco&gt;\n    &lt;option&gt;&lt;flag contact=\"disable\"/&gt;&lt;/option&gt;\n    &lt;worldbody&gt;\n        &lt;light name=\"top\" pos=\"0 0 1\"/&gt;\n        &lt;body name=\"body_1\" pos=\"0 0 0\"&gt;\n            &lt;joint name=\"joint_1\" type=\"hinge\" axis=\"0 1 0\" pos=\"0 0 0\" stiffness=\"{k}\" damping=\"{b}\"/&gt;\n            &lt;geom type=\"box\" size=\"{l1_2} .05 .05\" pos=\"{l1_2} 0 0\" rgba=\"1 0 0 1\" mass=\"{m}\"/&gt;\n            {inner}\n        &lt;/body&gt;\n    &lt;/worldbody&gt;\n&lt;/mujoco&gt;\n\"\"\"\n\nbody_template = '''\n&lt;body name=\"body_{ii}\" pos=\"{l1} 0 0\"&gt;\n    &lt;joint name=\"joint_{ii}\" type=\"hinge\" axis=\"0 1 0\" pos=\"0 0 0\" stiffness=\"{k}\" damping=\"{b}\"/&gt;\n    &lt;geom type=\"box\" size=\"{l1_2} .05 .05\" pos=\"{l1_2} 0 0\" rgba=\"1 0 0 1\" mass=\"{m}\"/&gt;\n    {inner}\n&lt;/body&gt;\n'''\n\ntest_point='''\n&lt;geom type=\"sphere\" size=\".25\" pos=\"{l1} 0 0\" rgba=\"0 0 1 1\" mass=\"1\"/&gt;\n'''\n</code></pre> <pre><code>def run_sim(num_joints,k_i,b_i,m_total,render=False):\n    n_joints = num_joints\n    n_bodies = n_joints\n    l = 1\n    l_i=l/n_bodies\n    m_i=m_total/n_bodies\n\n    body_numbers = numpy.r_[n_bodies:1:-1]    \n\n    s=''\n    for item in body_numbers:\n        if item == body_numbers.max():\n            s = body_template.format(inner=test_point.format(l1='{l1}'),ii=item,l1='{l1}',l1_2='{l1_2}',b='{b}',k='{k}',m='{m}')\n        else:\n            s = body_template.format(inner=s,ii=item,l1='{l1}',l1_2='{l1_2}',b='{b}',k='{k}',m='{m}')\n\n    s=main_template.format(inner = s,l1='{l1}',l1_2='{l1_2}',b='{b}',k='{k}',m='{m}')        \n\n    xml = s.format(l1=l_i,l1_2=l_i/2,k=k_i,b=b_i,m=m_i)\n\n    model = mujoco.MjModel.from_xml_string(xml)\n    data = mujoco.MjData(model)\n    renderer = mujoco.Renderer(model)\n\n    duration = 3  # (seconds)\n    framerate = 30  # (Hz)\n\n    q = []\n    t = []\n    xyz = []\n    frames = []\n    mujoco.mj_resetData(model, data)\n\n    while data.time &lt; duration:\n        mujoco.mj_step(model, data)\n        q.append(data.qpos.copy())\n        xyz.append(data.xpos.copy())\n        t.append(data.time)\n        if render:\n            if len(frames) &lt; data.time * framerate:\n                renderer.update_scene(data)\n                pixels = renderer.render()\n                frames.append(pixels)\n\n    if render:\n        media.show_video(frames, fps=framerate)\n\n\n    t = numpy.array(t)\n    xyz = numpy.array(xyz)\n    return t, xyz\n\n</code></pre> <pre><code>nn = 100\nk_ii = 1/((1/k_total)/nn)\nb_ii = 1/((1/b_total)/nn)\nt,xyz_100_elements = run_sim(num_joints = nn,k_i = k_ii, b_i = b_ii,m_total=1,render=True)\nnn = 2\nk_ii = 1/((1/k_total)/nn)\nb_ii = 1/((1/b_total)/nn)\nt,xyz_10_elements = run_sim(num_joints = nn,k_i = k_ii, b_i = b_ii,m_total=1,render=True)\n\n\n</code></pre>        This browser does not support the video tag.               This browser does not support the video tag.        <pre><code>plt.figure()\nplt.plot(t,xyz_100_elements[:,-1,2],label='100 elements')\nplt.plot(t,xyz_10_elements[:,-1,2],label='10 elements')\n</code></pre> <pre><code>[&lt;matplotlib.lines.Line2D at 0x7f6ca4137390&gt;]\n</code></pre> <pre><code>ini = [40,.5]\n\nresults = []\n\nnum_elements_to_try = numpy.array([2,3,4,5,6,8,12,25,50,75])\n\ndef calc_error(x,nn):\n    k,b = x\n    t,xyz_sim = run_sim(nn,k_i=k,b_i=b,m_total=1)\n\n    diff = xyz_100_elements[:,-1,:]-xyz_sim[:,-1,:]\n    mse = ((diff**2).sum())**.5\n    return mse\n</code></pre> <pre><code>error_agnostic = []\nfor nn in num_elements_to_try:\n    k_ii = 1/((1/k_total)/nn)\n    b_ii = 1/((1/b_total)/nn)\n    error = calc_error((k_ii,b_ii),nn)\n    error_agnostic.append(error)\n\nerror_agnostic = numpy.array(error_agnostic)\nplt.plot(num_elements_to_try,error_agnostic)\n</code></pre> <pre><code>[&lt;matplotlib.lines.Line2D at 0x7f6cb63af090&gt;]\n</code></pre> <pre><code>for nn in num_elements_to_try:\n\n    def calc_error_internal(x):\n        return calc_error(x,nn)\n\n    result = so.minimize(calc_error_internal,ini,method='powell',bounds=((1e-2,1e3),(1e-3,1e2)))\n    results.append([nn,*result.x,result.fun])\n\n    ini = result.x\n\n    print(results[-1])\n\n</code></pre> <pre><code>[2, 38.37119344905753, 0.4739920024887962, 18.41397962452784]\n[3, 47.44226923283394, 0.7100962098383387, 12.067387305257935]\n[4, 56.88700920394214, 0.925576580572986, 8.920359651214298]\n[5, 66.48628534503482, 1.133092252581301, 7.042603509728443]\n[6, 76.16355899302715, 1.3371069995060145, 5.795713924841388]\n[8, 95.6363549627212, 1.7402208035411737, 4.243245838314734]\n[12, 134.78021010109077, 2.5394170326498617, 2.6982859507054617]\n[25, 262.4393540290383, 5.123460293935163, 1.100388259097371]\n[50, 508.24442897107076, 10.083542670483048, 0.3662338285896654]\n[75, 754.1141588826828, 15.041961696975088, 0.12201394530834614]\n</code></pre> <pre><code>results = numpy.array(results)\nplt.plot(num_elements_to_try,error_agnostic,label=\"guess\")\nplt.plot(results[:,0],results[:,3],label='optimized')\nplt.legend()\n</code></pre> <pre><code>&lt;matplotlib.legend.Legend at 0x7f6cb6a9a810&gt;\n</code></pre> <pre><code>k_ii = 1/((1/k_total)/num_elements_to_try)\n\nplt.figure()\nplt.plot(results[:,0],results[:,1])\nplt.plot(num_elements_to_try,k_ii)\n</code></pre> <pre><code>[&lt;matplotlib.lines.Line2D at 0x7f6cb6564b90&gt;]\n</code></pre> <pre><code>b_ii = 1/((1/b_total)/num_elements_to_try)\nplt.figure()\nplt.plot(results[:,0],results[:,2])\nplt.plot(num_elements_to_try,b_ii)\n</code></pre> <pre><code>[&lt;matplotlib.lines.Line2D at 0x7f6cb6576fd0&gt;]\n</code></pre> <pre><code>nn,k_ii,b_ii,error=results[0]\n\nt,xyz = run_sim(num_joints = nn,k_i = k_ii, b_i = b_ii,m_total=1,render=True)\n\nplt.figure()\nplt.plot(t,xyz_100_elements[:,-1,2])\nplt.plot(t,xyz[:,-1,2])\n</code></pre>        This browser does not support the video tag.        <pre><code>[&lt;matplotlib.lines.Line2D at 0x7f6c88718750&gt;]\n</code></pre> <pre><code>\n</code></pre>"},{"location":"tutorials/dynamics/examples/spherical_four_bar/","title":"Spherical Four-Bar Mechanisms in MuJoCo","text":""},{"location":"tutorials/dynamics/examples/spherical_four_bar/#introduction","title":"Introduction","text":"<p>The purpose of this example is to show how easy it is to create spherical mechanisms in MuJoCo.  </p> <p>MuJoCo is a great resource for studying dynamics of rigid body systems, is great for robotics, and has been a recent focus of mine as I am converting some of my course material over to use it for studying foldable mechanisms.  </p> <p>This example goes through the following steps.  It permits you to specify four joints in the x-y plane that serve as your spherical joints.  It then creates four thin meshes based on those joint locations and populates an xml template with the joint locations and mesh file information.  The simulation then runs, showing off the parallel nature of the mechanism</p> <p>The <code>&lt;weld&gt;</code> element in the xml is responsible for closing the kinematic loop, and is quite easy to use for flat-foldable kinematics.  One thing to note in my example is that I create a duplicate body (<code>\"Ap\"</code>) to my fixed base (<code>\"A\"</code>), and then use a weld to constrain (<code>\"A\"</code>) to (<code>\"Ap\"</code>).  Because the mechanism is defined in its flat state, the transformation to map (<code>\"Ap\"</code>) to (<code>\"A\"</code>) needs no offset and no rotation (<code>relpose=\"0 0 0 1 0 0 0\" anchor=\"0 0 0\"</code>).  Below is a description of the code in more detail.</p>"},{"location":"tutorials/dynamics/examples/spherical_four_bar/#steps","title":"Steps","text":"<p>First, import the necessary packages</p> <pre><code>import os\nimport mujoco\nimport numpy\nimport mediapy as media\nimport matplotlib.pyplot as plt\nimport pygmsh\n</code></pre> <p>Define four joints as 3d vectors in the xy plane</p> <pre><code>v1 = [0,-1,0]\nv2 = [1,-1,0]\nv3 = [1,1,0]\nv4 = [-2,1,0]\n</code></pre> <p>Assemble vectors into sequences I can use for generating meshes</p> <pre><code>v = v1,v2,v3,v4\n\nab = []\nfor a,b in zip(v,v[1:]+v[:-1]):\n    ab.append((a,b))\n\nprint(ab)\n</code></pre> <pre><code>[([0, -1, 0], [1, -1, 0]), ([1, -1, 0], [1, 1, 0]), ([1, 1, 0], [-2, 1, 0]), ([-2, 1, 0], [0, -1, 0])]\n</code></pre> <p>Create meshes by extruding triangles by a <code>thickness</code></p> <pre><code>thickness = .1\nfilenames = []\n\nfor ii,(a,b) in enumerate(ab):\n    filename = 'mesh_{0:02.0f}'.format(ii)\n    print(filename)\n\n    with pygmsh.geo.Geometry() as geom:\n        #create a triangle from 0,0 to the next two vertices\n        poly = geom.add_polygon([(0,0),a[:2],b[:2]],mesh_size=2)\n        #extrude the polygon\n        geom.extrude(poly, [0.0, 0, thickness], num_layers=1)\n        mesh = geom.generate_mesh()\n    filenames.append(filename)\n    mesh.write(filename+'.stl',file_format='stl',binary=True)\n</code></pre> <pre><code>mesh_00\n</code></pre> <pre>Warning: STL can only write triangle cells. Discarding vertex, line, tetra.\n</pre> <pre><code>mesh_01\n</code></pre> <pre>Warning: STL can only write triangle cells. Discarding vertex, line, tetra.\n</pre> <pre><code>mesh_02\n</code></pre> <pre>Warning: STL can only write triangle cells. Discarding vertex, line, tetra.\n</pre> <pre><code>mesh_03\n</code></pre> <pre>Warning: STL can only write triangle cells. Discarding vertex, line, tetra.\n</pre> <p>I got some warnings about meshio here, which can be ignored.  </p> <p>It should be noted that pygmsh does not do a good job of finding the proper vertex order for identifying outward normal vectors for faces, which could lead to improper mass calculations if not handled properly by mujoco.  Future work should include finding a better mesher, or, temporarily, using meshlab to correct triangle normals to face outward, as is standard.</p> <p>Define xml template.  The filenames and joint axes are automatically generated. </p> <p>(This should eventually be further abstracted so as to generate n bodies (recursively), but for now its statically defined for four bodies.)</p> <pre><code>xml_template = \"\"\"\n&lt;mujoco&gt;\n    &lt;visual&gt;\n        &lt;global offwidth=\"800\" offheight=\"600\" /&gt;\n    &lt;/visual&gt;    \n\n  &lt;option&gt;\n     &lt;flag contact=\"disable\" /&gt;\n  &lt;/option&gt;\n  &lt;asset&gt;{filenames}\n  &lt;/asset&gt;\n  &lt;worldbody&gt;\n    &lt;light name=\"top\" pos=\"0 0 1\"/&gt;\n    &lt;body  name=\"A\"&gt;\n      &lt;geom type=\"mesh\" pos=\"0 0 0\"  density=\"1000\" mesh=\"mesh_00\" rgba=\"1 0 0 1\"/&gt;\n        &lt;body&gt;\n          &lt;joint type=\"hinge\" axis=\"{j2}\" pos=\"0 0 0\"/&gt;\n          &lt;geom type=\"mesh\" pos=\"0 0 0\"  density=\"1000\" mesh=\"mesh_01\" rgba=\"1 0 1 1\"/&gt;\n            &lt;body&gt;\n              &lt;joint type=\"hinge\" axis=\"{j3}\" pos=\"0 0 0\"/&gt;\n              &lt;geom type=\"mesh\" pos=\"0 0 0\"  density=\"1000\" mesh=\"mesh_02\" rgba=\"1 1 0 1\"/&gt;\n                &lt;body&gt;\n                  &lt;joint type=\"hinge\" axis=\"{j4}\" pos=\"0 0 0\"/&gt;\n                  &lt;geom type=\"mesh\" pos=\"0 0 0\"  density=\"1000\" mesh=\"mesh_03\" rgba=\"0 1 0 1\"/&gt;\n                &lt;body name=\"Ap\"&gt;\n                  &lt;joint type=\"hinge\" axis=\"{j1}\" pos=\"0 0 0\"/&gt;\n                  &lt;geom type=\"mesh\" pos=\"0 0 0\"  density=\"1000\" mesh=\"mesh_00\" rgba=\"1 0 0 1\"/&gt;\n                &lt;/body&gt;\n                &lt;/body&gt;\n            &lt;/body&gt;\n        &lt;/body&gt;\n    &lt;/body&gt;\n  &lt;/worldbody&gt;\n  &lt;equality&gt;\n      &lt;weld name=\"weld1\" active=\"true\" body1=\"A\" body2=\"Ap\" relpose=\"0 0 0 1 0 0 0\" anchor=\"0 0 0\" /&gt;\n  &lt;/equality&gt;\n&lt;/mujoco&gt;\n\"\"\"\n</code></pre> <p>populate xml template with joint and file information</p> <pre><code>filename_string = ''\nfor filename in filenames:\n    s='\\n&lt;mesh name=\"{filename}\" file=\"{filename}.stl\" /&gt;'.format(filename=filename)\n    filename_string+=s\n\nv1s = ' '.join([str(item) for item in v1])\nv2s = ' '.join([str(item) for item in v2])\nv3s = ' '.join([str(item) for item in v3])\nv4s = ' '.join([str(item) for item in v4])\n\nxml=xml_template.format(j1=v1s,j2=v2s,j3=v3s,j4=v4s,filenames=filename_string)\n</code></pre> <p>print(xml) Run Simulation</p> <pre><code>model = mujoco.MjModel.from_xml_string(xml)\ndata = mujoco.MjData(model)\nrenderer = mujoco.Renderer(model,width=800, height=600)\nduration = 10\nframerate = 30\n\nframes = []\nmujoco.mj_resetData(model, data)\n\nwhile data.time &lt; duration:\n    mujoco.mj_step(model, data)\n    if len(frames) &lt; data.time * framerate:\n        renderer.update_scene(data)\n        pixels = renderer.render()\n        frames.append(pixels)\n\nmedia.show_video(frames, fps=framerate,width=800, height=600)\n</code></pre>        This browser does not support the video tag.        <p>media.write_video('spherical-four-bar.mp4',frames, fps=framerate)</p>"},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/","title":"Theory","text":""},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#particles","title":"Particles","text":""},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#what-is-a-particle","title":"What is a Particle","text":"<ul> <li>Mass located at a point, e.g. \"point mass\"</li> <li>No inertia</li> <li>Cannot rotate, just translates</li> </ul>"},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#inertia","title":"Inertia","text":""},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#what-is-inertia","title":"What is Inertia","text":"<p>Inertia describes the distribution of a matrix</p> <p>Inertia is not a number.  It is often described as a:</p> <ul> <li>tensor</li> <li>dyadic</li> <li>matrix</li> </ul> <p>It describes how mass is distributed in a rigid body.</p>"},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#as-a-matrix","title":"As a matrix","text":"<p>Say a particle \\(p_i\\) has a mass \\(m_i\\) and is a distance \\(\\vec{r}_i = r_{ix}\\hat{a}_x+r_{iy}\\hat{a}_y+r_{iz}\\hat{a}_z\\) from point \\(O\\), using frame \\(A\\) unit vectors</p> <p>The inertia of \\(p_i\\) about \\(O\\) in frame \\(A\\) is</p> \\[I_i=\\begin{bmatrix} I_{ixx} &amp; I_{ixy} &amp; I_{ixz} \\\\ I_{iyx} &amp; I_{iyy} &amp; I_{iyz} \\\\ I_{izx} &amp; I_{izy} &amp; I_{izz} \\end{bmatrix} =m_i\\begin{bmatrix}r_{iy}^2+r_{iz}^2 &amp; -r_{ix} r_{iy} &amp; -r_{ix} r_{iz}\\\\ -r_{ix} r_{iy} &amp;r_{ix}^2+r_{iz}^2&amp;-r_{iy} r_{iz}\\\\ -r_{ix} r_{iz} &amp;-r_{iy} r_{iz}&amp; r_{ix}^2+r_{iy}^2 \\end{bmatrix}\\] <ul> <li>symmetric and positive definite</li> <li>diagonals, \"moments of inertia\", are always positive</li> <li>off-diagonals, \"products of inertia\" measure imbalances about axes.</li> </ul>"},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#system-of-particles","title":"System of particles","text":"<p>for a system of particles, \\(p_i\\),</p> \\[m=\\sum_{i=1}^n m_i\\] \\[\\vec{r}_{cm} = \\frac{1}{m}\\sum_i^n{m_i\\vec{r}_i}\\] \\[I=\\sum_{i=1}^n I_i\\] <p>It is convenient to calculate \\(I\\) about \\(\\vec{r}_{cm}\\)</p>"},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#table","title":"Table","text":"<p>Moments of Inertia for common shapes</p>"},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#rigid-body","title":"Rigid Body","text":"<ul> <li>Collection of particles</li> <li>\"Rigid\" means particles' translation is fixed with respect to any particle, and with respect to a reference frame \"attached\" to the rotation of the body.</li> </ul>"},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#parallel-axis-theorem","title":"Parallel Axis theorem","text":"<p>If \\(I_{COM}\\) is calculated about a system's center of mass,</p> \\[I_{new}=I_{COM}+ m\\begin{bmatrix}r_{y}^2+r_{z}^2 &amp; -r_{x} r_{y} &amp; -r_{x} r_{z}\\\\ -r_{x} r_{y} &amp;r_{x}^2+r_{z}^2&amp;-r_{y} r_{z}\\\\ -r_{x} r_{z} &amp;-r_{y} r_{z}&amp; r_{x}^2+r_{y}^2 \\end{bmatrix}\\] <p>where \\(\\vec{r}\\) is the vector pointing from the new point to the COM.</p>"},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#working-with-inertia","title":"Working with Inertia","text":""},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#extract-the-inertia-product-along-hatu-hatv","title":"Extract the Inertia product along \\(\\hat{u}\\), \\(\\hat{v}\\)","text":"\\[I_{\\hat{u}\\hat{v}} =  = \\hat{u}\\cdot\\underline{I}\\cdot\\hat{v} = \\begin{bmatrix}u_x&amp; u_y &amp;u_z\\end{bmatrix} I \\begin{bmatrix}v_x\\\\ v_y \\\\ v_z\\end{bmatrix}\\] <p>Example:</p> \\[I_{xx}=I_{\\hat{a}_x\\hat{a}_x} = \\begin{bmatrix}1 &amp; 0 &amp;0\\end{bmatrix} I \\begin{bmatrix}1 \\\\ 0 \\\\ 0 \\end{bmatrix}\\]"},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#transformations-to-other-reference-frames","title":"Transformations to other reference frames","text":"\\[I_{\\hat{b}_x\\hat{b}_x} = \\begin{bmatrix}(\\hat{a}_x\\cdot\\hat{b}_x) &amp; (\\hat{a}_y\\cdot\\hat{b}_x) &amp; (\\hat{a}_z\\cdot\\hat{b}_x)\\end{bmatrix} I \\begin{bmatrix}(\\hat{a}_x\\cdot\\hat{b}_x) \\\\ (\\hat{a}_y\\cdot\\hat{b}_x) \\\\ (\\hat{a}_z\\cdot\\hat{b}_x)\\end{bmatrix}\\] \\[I_{B}=\\left({}^BR^A\\right) I\\left( {}^A R^B\\right)\\]"},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#eigenvectors","title":"Eigenvectors","text":"\\[I\\omega_1=i_1\\omega_1\\] \\[I\\omega_2=i_2\\omega_2\\] \\[I\\omega_3=i_3\\omega_3\\] <ul> <li>The three principal components of I are the three axes about which the system's off-diagonals are zero.</li> <li>axes are orthogonal</li> </ul>"},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#energy","title":"Energy","text":""},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#kinetic-energy-of-a-particle","title":"Kinetic Energy of a Particle","text":"\\[KE = \\frac{1}{2}m(\\vec{v}\\cdot\\vec{v})\\]"},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#kinetic-energy-of-a-body","title":"Kinetic Energy of a Body","text":"\\[KE = \\frac{1}{2}m(\\vec{v}\\cdot\\vec{v})+\\frac{1}{2}\\vec{\\omega} \\times \\underline{I}\\cdot \\vec{\\omega}\\]"},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#potential-energy","title":"Potential Energy","text":"<ul> <li>Springs</li> <li>Electric Field</li> <li>Gravity (field)</li> </ul>"},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#gravitational-potential-energy","title":"Gravitational Potential Energy","text":"<p>Measured from a reference point \\(O\\) to point \\(P_i\\) for all particles and bodies</p> \\[PE = \\sum_{i=1}^n{m_i\\vec{g}\\cdot\\vec{r}^{OP_i}}\\]"},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#spring-potential-energy","title":"Spring Potential Energy","text":"<p>Using the stretch vector \\(\\vec{s}\\), where \\(\\vec{s}=0\\) indicates no stretch</p> \\[PE = \\frac{1}{2}k\\vec{s}\\cdot\\vec{s}\\]"},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#why-do-i-care","title":"Why do I care?","text":"\\[PE = mgh\\] \\[KE = \\frac{1}{2}m(\\vec{v}\\cdot\\vec{v})+\\frac{1}{2}\\vec{\\omega} \\times \\underline{I}\\cdot \\vec{\\omega}\\] <ul> <li>The larger I, the smaller \\(v\\).</li> </ul>"},{"location":"tutorials/dynamics/mass-and-inertia/01-theory/#external-resources","title":"External Resources","text":"<ul> <li>https://ocw.mit.edu/courses/16-07-dynamics-fall-2009/dd277ec654440f4c2b5b07d6c286c3fd_MIT16_07F09_Lec26.pdf</li> <li>https://en.wikipedia.org/wiki/Moment_of_inertia</li> </ul>"},{"location":"tutorials/dynamics/mass-and-inertia/03-computing-inertia-in-solidworks/","title":"Computing Inertia in Solidworks","text":""},{"location":"tutorials/dynamics/mass-and-inertia/02-masses-example/","title":"Inertia Example in MuJoCo","text":""},{"location":"tutorials/dynamics/mass-and-inertia/02-masses-example/#particles-and-point-masses","title":"Particles and Point Masses","text":"<p>Particles can be considered items with mass but no inertia.  They are the basis for many formula and definitions in physics, but Mujoco does not support them out of the box.</p>"},{"location":"tutorials/dynamics/mass-and-inertia/02-masses-example/#motion-of-a-pendulum-w-point-mass","title":"Motion of a pendulum w/ point mass","text":"\\[\\frac{d^2\\theta}{dt^2} = \\frac{-g\\cos{\\theta}}{l}\\] \\[\\frac{d\\theta}{dt} = \\dot\\theta\\]"},{"location":"tutorials/dynamics/mass-and-inertia/02-masses-example/#state-space-equations","title":"State Space Equations","text":"<pre><code>def pendulum(t,x):\n    g = 9.81\n    lA = .5\n    qA,qA_d = x\n    qA_d_new = qA_d\n    qA_dd = -g*math.cos(qA)/lA\n    result = numpy.array([qA_d_new, qA_dd])\n    return result\n</code></pre>"},{"location":"tutorials/dynamics/mass-and-inertia/02-masses-example/#initialization","title":"Initialization","text":"<pre><code>ini = numpy.array([0,0])\n</code></pre>"},{"location":"tutorials/dynamics/mass-and-inertia/02-masses-example/#result","title":"Result","text":"<p>Running the <code>pendulum()</code> function produces the following result</p> <pre><code>array([  0.  , -19.62])\n</code></pre>"},{"location":"tutorials/dynamics/mass-and-inertia/02-masses-example/#integration","title":"Integration","text":"<p>We can then integrate the state-space equations using the RK45 function in the <code>scipy.integrate</code> package.</p> <pre><code>t_ini = 0\nt_final = 5\ntry:\n    sim = si.RK45(pendulum,t_ini,ini,t_final,max_step=.01,rtol=0.001, atol=1e-06)\n    y = [sim.y]\n    t = [sim.t]\n    while True:\n        sim.step()\n        t.append(sim.t)\n        y.append(sim.y)\nexcept RuntimeError:\n    pass\n</code></pre>"},{"location":"tutorials/dynamics/mass-and-inertia/02-masses-example/#results","title":"Results","text":""},{"location":"tutorials/dynamics/mass-and-inertia/02-masses-example/#conclusions","title":"Conclusions","text":"<p>Because particles don't have any geometry other than mass at a single point, they cannot be considered to have inertia, nor can they be thought to rotate.  Mujoco doesn't like this because it doesn't model particles separately, and the mass matrix it tries to invert would thus have a row of zeros.</p> <p>The closest thing to modeling a particle in mujoco is to define a round body that cannot rotate, or to simply use a small-radius sphere to approximate it</p>"},{"location":"tutorials/dynamics/mass-and-inertia/02-masses-example/#bodies","title":"Bodies","text":"<p>Bodies of different shapes have different inertia.  You can define different shapes natively in mujoco</p>"},{"location":"tutorials/dynamics/mass-and-inertia/02-masses-example/#distribution-of-mass","title":"Distribution of Mass","text":"<ul> <li>Density: mass distribution</li> <li>Mujoco Implements density = mass/volume.  Mass/area is possible with meshes(broken?)</li> <li>You can describe the mass and distribution of a geometry by indicating the mass/density of a geom, or by specifying a separate <code>&lt;inertial&gt;</code> element</li> <li>You can also make composite bodies.  Specify many \"atomic\" <code>&lt;geom&gt;</code>s within the same body to build more complex inertia.</li> </ul>"},{"location":"tutorials/dynamics/mass-and-inertia/02-masses-example/#example","title":"Example","text":"<p>In the following example we have a variety of objects swinging like a pendulum.  The length of the pendulum (distance from the joint to the center of mass of each object) is identical, and the mass is identical.  The only difference is that the inertia of each body is different, as calculated by MuJoCo</p>"},{"location":"tutorials/dynamics/mass-and-inertia/02-masses-example/#mujoco-setup","title":"Mujoco Setup","text":"<pre><code>&lt;mujoco&gt;\n  &lt;option&gt;\n     &lt;flag gravity=\"enable\" contact=\"disable\" /&gt;\n  &lt;/option&gt;\n...\n</code></pre>"},{"location":"tutorials/dynamics/mass-and-inertia/02-masses-example/#spheres","title":"Spheres","text":"<pre><code>&lt;body quat=\"1 0 0 0\"&gt;\n    &lt;joint type=\"hinge\" axis=\"1 0 0\" pos=\"0 0 0\"/&gt;\n    &lt;geom type=\"sphere\" size=\".2\" pos=\"0 .5 0\" rgba=\"1 0 1 1\" mass=\"1\"/&gt;\n&lt;/body&gt;\n\n&lt;body quat=\"1 0 0 0\"&gt;\n    &lt;joint type=\"hinge\" axis=\"1 0 0\" pos=\"0 0 0\"/&gt;\n    &lt;geom type=\"sphere\" size=\".5\" pos=\"5 .5 0\" rgba=\"0 0 1 1\" mass=\"1\"/&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"tutorials/dynamics/mass-and-inertia/02-masses-example/#ellipsoid","title":"Ellipsoid","text":"<pre><code>  &lt;body quat=\"1 0 0 0\"&gt;\n    &lt;joint type=\"hinge\" axis=\"1 0 0\" pos=\"0 0 0\"/&gt;\n    &lt;geom type=\"ellipsoid\" size=\".05 .5 .05\" pos=\"1 .5 0\" rgba=\"0 1 0 1\" mass=\"1\"/&gt;\n  &lt;/body&gt;\n</code></pre>"},{"location":"tutorials/dynamics/mass-and-inertia/02-masses-example/#box","title":"Box","text":"<pre><code>&lt;body quat=\"1 0 0 0\"&gt;\n  &lt;joint type=\"hinge\" axis=\"1 0 0\" pos=\"0 0 0\"/&gt;\n  &lt;geom type=\"box\" size=\".05 .5 .05\" pos=\"3 .5 0\" rgba=\"1 0 0 1\" mass=\"1\"/&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"tutorials/dynamics/mass-and-inertia/02-masses-example/#mesh","title":"Mesh","text":"<p>Add mesh element to top..</p> <pre><code>...\n&lt;asset&gt;\n    &lt;mesh name=\"test\" file=\"test.stl\" /&gt;\n&lt;/asset&gt;\n...\n</code></pre> <p>Define geom of type mesh:</p> <pre><code>&lt;body quat=\"1 0 0 0\"&gt;\n  &lt;joint type=\"hinge\" axis=\"1 0 0\" pos=\"0 0 0\"/&gt;\n  &lt;geom type=\"mesh\" mesh=\"test\" shellinertia=\"false\" pos=\"3.5 0 -.05\" rgba=\"1 0 1 1\" mass=\"1\"/&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"tutorials/dynamics/mass-and-inertia/02-masses-example/#results_1","title":"Results","text":"<p>Bodies are plotted in order of increasing inertia, from left to right.  </p> <p>As the inertia of each body grows, the speed at which its rotation accelerates goes down.</p>"},{"location":"tutorials/dynamics/mass-and-inertia/02-masses-example/#plot","title":"Plot","text":""},{"location":"tutorials/dynamics/motors/01-theory/","title":"Motor Basic Theory","text":"\\[\\require{cancel}\\]"},{"location":"tutorials/dynamics/motors/01-theory/#motor-characteristics","title":"Motor Characteristics","text":"<p>Motors have a few characteristics at steady state that can be used to quickly characterize it.  Given a coil winding resistance \\(R\\), the motor's steady-state voltage and current may be related (at stall) to one another using Ohm's Law:</p> \\[V=i_{stall}R\\]"},{"location":"tutorials/dynamics/motors/01-theory/#back-emf-and-k_e","title":"Back EMF and \\(k_e\\)","text":"<p>As a motor spins up, it builds up \"back-EMF\" as a result of the motor's magnets and coils moving and changing in relation to each other.  Back-EMF is typically calculated by running a motor at a given speed and measuring the voltage it generates.  This is a linear relationship, following</p> \\[V=k_e\\omega\\] <p>It should be noted that the units of \\(\\omega\\) are given in \\(\\frac{\\text{rad}}{\\text{s}}\\)(radians being unitless), meaning that \\(k_v\\) is given in \\(\\frac{V}{\\left(\\frac{rad}{s}\\right)}=V\\,s=\\frac{kg\\,m^2}{C\\,s^2}s=\\frac{kg\\,m^2}{C\\,s}\\).</p>"},{"location":"tutorials/dynamics/motors/01-theory/#torque-and-k_t","title":"Torque and \\(k_t\\)","text":"<p>The torque available to a motor at stall is related by the equation</p> \\[\\tau=k_{\\tau} i\\] <p>This puts the units of \\(k_t\\) in \\(\\frac{N\\,m}{A}=\\frac{kg\\,m^2}{s^2} \\frac{s}{C}=\\frac{kg\\,m^2}{C\\,s}\\), which is the same units as \\(k_e\\).  </p> <p>This can be measured by comparing the torque available when clamped to a load cell as you vary the current through the coil.  Because there is no back-EMF being generated, the motor's torque is quite linear to that current.  Thus, if a datasheet contains information like \"stall current\" and \"stall torque\", you can easily calculate \\(k_\\tau\\) with \\(k_\\tau=\\frac{\\tau_{stall}}{i_{stall}}\\)</p>"},{"location":"tutorials/dynamics/motors/01-theory/#important-point","title":"Important point","text":"<p>It should be noted that \\(k_t\\) and \\(k_e\\) ideally represent the same motor characteristic; thus, only one of those numbers is required to model the motor.  Considering that measuring speed and voltage is cheaper and easier than measuring torque, it is safe to assume that some parameters provided by a manufacturer in its datasheet may be redundant, and may not have been obtained through independent tests.</p>"},{"location":"tutorials/dynamics/motors/01-theory/#motor-speeds-and-k_v","title":"Motor speeds and \\(k_v\\)","text":"<p>When driven at a given voltage (without any external loads), a motor's speed is also related linearly to its supplied voltage, by</p> \\[V=k_v\\omega\\] <p>This measurement should be a little different from the measurement of \\(k_e\\) in practice because its measurement approach factors in the mechanical losses of the motor in question.  For example, any friction, damping, or wind resistance is overcome by the experimental setup during the process of determining \\(k_e\\), as the test setup is responsible for supplying the torque necessary for moving the tested motor at a given speed.  But when driven at a given voltage, a motor needs to overcome its own friction, and so its speed at at the same test voltage will be lower when driven.  This reveals something about the efficiency of the motor.</p>"},{"location":"tutorials/dynamics/motors/01-theory/#important-note-about-k_v-in-practice","title":"Important Note about \\(k_v\\) in practice","text":"<p>A typical manufacturer's datasheet[^a] typically uses the relation \\(RPM = k_{v\\text{(manufacturer)}}V\\), with \\(k_{v\\text{(manufacturer)}}\\) in \\(\\frac{\\text{RPM}}{\\text{V}}\\).  We are not following this convention here, because it masks the fact that \\(k_\\tau\\) and \\(k_v\\) should be the same for ideal motors with no internal friction, but are often disguised as different numbers via different unit systems and definitions.  This will typically have to be ameliorated by scaling the manufacturer's value using \\(\\frac{rad}{s}=RPM \\frac{2\\pi\\,\\text{rad}}{\\text{rev}}\\frac{1\\,\\text{min}}{60\\,\\text{sec}}\\).</p> <p>Manufacturers often state the motor's \"nominal\" operating voltage, usually given by the amount of voltage that can be continuously delivered under typical operating conditions.  Along with the \"no-load\" speed, one can calculate \\(k_v\\).</p> <p>Example: A motor's no-load speed is 12500 RPM, at a nominal voltage of 12V.  with \\(\\omega=12500 \\frac{2\\pi}{60} \\frac{rad}{s}\\), we can calculate \\(k_v=\\frac{12*60}{12500*2\\pi}=9.2*10^{-3} \\frac{kg\\,m^2}{C\\,s}\\)</p>"},{"location":"tutorials/dynamics/motors/01-theory/#calculating-speed-dependent-terms","title":"Calculating speed-dependent terms","text":"<p>Given a nominal voltage supplied to the motor, that voltage is split between the voltage drop across the coil and the back EMF generated by the motion of the coil in a magnetic field, and the the current going through the coil goes down, according to:</p> \\[V = iR+V_{EMF}=iR+k_e\\omega\\]"},{"location":"tutorials/dynamics/motors/01-theory/#free-running-current","title":"Free-running current","text":"<p>The \"free-running current\" or \"no-load current\" describes the amount of current the motor requires to overcome internal loss damping in order to move at its maximum speed.  This is typically given by a current, but can also be modeled by</p> <p>\\(\\tau_{\\text{internal}}=k_\\tau*i_{NL}\\)</p> <p>So to actually determine \\(k_e\\) given typical datasheet parameters, we can solve for \\(k_e\\) at the no-load operating condition instead.</p> \\[k_e = \\frac{V-i_{NL}R}{\\omega_{NL}}\\] <p>We can then also calculate the theoretical maximum velocity of the motor, without mechanical losses considered:</p> <p>\\(\\omega_{max} =\\left.\\frac{V-\\frac{\\tau_{\\text{internal}}}{k_\\tau}R}{k_e}\\right|_{\\tau_{\\text{internal}}=0}=\\left.\\frac{V-i_{NL}R}{k_e}\\right|_{i_{NL}=0}=\\frac{V}{k_e}\\)</p>"},{"location":"tutorials/dynamics/motors/01-theory/#k_m","title":"\\(k_m\\)","text":"<ul> <li>There is another constant, \\(k_m\\).  We won't talk about it but you should be aware of it:</li> </ul> \\[k_m = \\frac{\\tau}{\\sqrt{P}}\\] <ul> <li>Related to \\(k_t\\) by: \\(k_m=\\frac{k_t}{\\sqrt{R}}\\)</li> <li>Allows you to select a motor based on mechanical power, independent of the wirings / electrical characteristics</li> </ul>"},{"location":"tutorials/dynamics/motors/01-theory/#second-order-equations","title":"Second Order Equations","text":"\\[L \\frac{di}{dt} = V - iR - k_ew\\] \\[I \\frac{dw}{dt} = k_t i - bw\\]"},{"location":"tutorials/dynamics/motors/01-theory/#external-resources","title":"External Resources","text":"<ul> <li>https://eng.libretexts.org/Bookshelves/Industrial_and_Systems_Engineering/Introduction_to_Control_Systems_(Iqbal)/01%3A_Mathematical_Models_of_Physical_Systems/1.04%3A_An_Electro-Mechanical_System_Model</li> <li>https://electronics.stackexchange.com/questions/531406/how-to-calculate-the-torque-constant-for-a-bldc-motor</li> <li>https://en.m.wikipedia.org/wiki/Motor_constants</li> <li>https://www.roboticstomorrow.com/article/2020/04/understanding-the-motor-constant-in-dc-motor-sizing/15146</li> <li>https://duckduckgo.com/?q=kt+kv+efficiency+no+load+current&amp;t=fpas&amp;ia=web</li> <li>https://support.controltechnologycorp.com/customer/elearning/younkin/motorParameters.pdf</li> <li>https://support.maxongroup.com/hc/en-us/article_attachments/4413473498130</li> <li>https://www.ecmweb.com/maintenance-repair-operations/motors/article/20900535/estimation-of-electric-motor-load</li> <li>https://designlab.eng.rpi.edu/edn/attachments/download/57871/DC_Motor_Calculations.pdf</li> <li>https://link.springer.com/chapter/10.1007/978-981-10-4762-6_22</li> <li>https://www.faulhaber.com/fileadmin/Import/Media/EN_TI_BRUSHLESS_DC-MOTORS.pdf</li> <li>https://electronics.stackexchange.com/questions/531406/how-to-calculate-the-torque-constant-for-a-bldc-motor</li> <li>https://eng.libretexts.org/Bookshelves/Industrial_and_Systems_Engineering/Introduction_to_Control_Systems_(Iqbal)/01%3A_Mathematical_Models_of_Physical_Systems/1.04%3A_An_Electro-Mechanical_System_Model https://ctms.engin.umich.edu/CTMS/index.php?aux=Activities_DCmotorA</li> <li>https://www.maxongroup.com/maxon/view/category/motor?etcc_cu=onsite&amp;etcc_med_onsite=Product&amp;etcc_cmp_onsite=RE+Program&amp;etcc_plc=Overview-Page-DC-Motors&amp;etcc_var=%5bcom%5d%23en%23_d_&amp;target=filter&amp;filterCategory=re</li> </ul>"},{"location":"tutorials/dynamics/motors/02-steady-state-datasheets/","title":"Obtaining Steady-State Information from Data Sheets","text":"<pre><code>import matplotlib.pyplot as plt\nimport numpy\nimport math\n</code></pre>"},{"location":"tutorials/dynamics/motors/02-steady-state-datasheets/#intro","title":"Intro","text":"<p>This tutorial walks you through the many ways you can obtain key motor parameters from a manufacturer's data sheet.</p>"},{"location":"tutorials/dynamics/motors/02-steady-state-datasheets/#motor-data","title":"Motor Data","text":"<p>The following data has been taken from part number 118400 in the maxon catalog.  Maxon motors is fairly unique in that they supply more data than is strictly necessary to be able to evaluate their motor, because many pieces of data are redundant given other information and the proper equation.  I will walk you through the key bits and how you can calculate alternate versions.</p> <p>Notice: This example exaggerates \\(i_{nl}\\) to increase visibility in the plots</p> <p>https://www.maxongroup.com/medias/sys_master/root/8992308920350/EN-22-129.pdf</p> <p>The following data is provided.  I have scaled all values to SI units here.  Note that I have indicated which of the values I am using to derive my motor constants.  Some are selected for use, and the values in this page are derived from them, or they are calculated to show the similarities (or differences), but not selected for use.</p> <pre><code>V = 12 # Selected\nR = 33.3 # Selected\ni_stall_data = .36 # Not Selected\nt_stall_data = 3.24e-3 # Not Selected\n# i_nl = 5.5e-3 # Selected. This is the actual value\ni_nl = 5.5e-2 # Selected. This is the exaggerated value\nw_nl = 12500*2*math.pi/60 # Selected.\nL = .299e-3 # Not needed for steady state equations but good to write down.\n</code></pre>"},{"location":"tutorials/dynamics/motors/02-steady-state-datasheets/#motor-calcs","title":"Motor Calcs","text":""},{"location":"tutorials/dynamics/motors/02-steady-state-datasheets/#calculating-i_stall","title":"Calculating \\(i_{stall}\\)","text":"<p>Not all datasheets provide \\(i_{stall}\\).  However, you can calculate it from the nominal voltage and winding resistance with  \\(i_{stall(calc)} = \\frac{V}{R}\\)</p> <pre><code>i_stall_calc = V/R\nprint('i_stall(data): ',i_stall_data,'i_stall(calc): ',i_stall_calc)\n</code></pre> <pre><code>i_stall(data):  0.36 i_stall(calc):  0.3603603603603604\n</code></pre> <p>I will go ahead and use the calculated value to avoid the propagation of rounding errors.</p> <pre><code>i_stall = i_stall_calc\n</code></pre>"},{"location":"tutorials/dynamics/motors/02-steady-state-datasheets/#calculating-k_e-from-no-load-measurements","title":"Calculating \\(k_e\\) from no-load measurements","text":"<p>Though \\(k_e\\) is not often provided in many manufacturers' websites, it can be calculated either from torque information \\((k_t=k_e)\\)  or from the no-load information</p> <p>Starting with the equation for back-EMF:</p> \\[V = iR + k_e \\omega\\] <p>We substitute in the no-load speed and current supplied by the datasheet, and solve for \\(k_e\\)</p> \\[V = i_{nl}R + k_e \\omega_{nl}\\] \\[k_e=\\frac{V-i_{nl}R}{\\omega_{nl}}\\] <pre><code>ke = (V-i_nl*R)/(w_nl)\nke\n</code></pre> <pre><code>0.007768161786383701\n</code></pre>"},{"location":"tutorials/dynamics/motors/02-steady-state-datasheets/#calculating-k_v","title":"Calculating \\(k_v\\)","text":"<p>It is trivial to calculate \\(k_v\\).  The motor's maximum speed at its nominal voltage determines it:</p> \\[k_v=\\frac{V}{\\omega_{nl}}\\] <pre><code>kv = V/w_nl\nkv\n</code></pre> <pre><code>0.009167324722093173\n</code></pre> <p>You can also calculate \\(k_v\\) from \\(k_e\\) with the following equation:</p> \\[k_v = k_e + \\frac{i_{nl} R}{w_{nl}}\\] <pre><code>kv_calc = ke+i_nl*R/w_nl\nkv_calc\n</code></pre> <pre><code>0.009167324722093171\n</code></pre> <p>As you can see, \\(k_v\\) is a little higher than \\(k_e\\), because it takes a higher voltage to achieve a certain spindle speed when the motor is powered than when it is being driven to that speed externally as a generator (the conditions under which \\(k_e\\) is obtained). In other words, \\(k_v\\) has a steeper slope.</p>"},{"location":"tutorials/dynamics/motors/02-steady-state-datasheets/#calculating-k_t","title":"Calculating \\(k_t\\)","text":"<p>Of course, you can calculate \\(k_t\\) from the datasheet's stall information:</p> \\[k_t = \\frac{t_{stall}}{i_{stall}}\\] <p>\\(k_t\\) should also theoretically be the same value as \\(k_e\\) </p> \\[k_t = k_e\\] <pre><code>kt_data = t_stall_data / i_stall_data\nkt_calc = ke\nprint('k_t(data): ',kt_data,'\\nk_t(calc): ',kt_calc)\n</code></pre> <pre><code>k_t(data):  0.009 \nk_t(calc):  0.007768161786383701\n</code></pre> <p>If you're using the exaggerated values, you see quite a difference here, because I only adjusted the value of \\(i_{nl}\\), showing a discrepancy.</p> <p>I will therefore selct \\(k_t = k_e\\) to avoid rounding errors cropping up in our calculations as well as to avoid contradictions in the data sheet from causing confusion</p> <pre><code>kt = kt_calc\n</code></pre> <p>Using \\(k_t\\), we can calculate stall torque from \\(i_{stall}\\), if given, or even \\(\\frac{V}{R}\\)</p> <pre><code>t_stall_calc1 = kt*i_stall\nt_stall_calc2 = kt*V/R\nprint('t_stall(data): ',t_stall_data,'\\nt_stall(calc 1): ',t_stall_calc1,'\\nt_stall(calc 2): ',t_stall_calc2)\n</code></pre> <pre><code>t_stall(data):  0.00324 \nt_stall(calc 1):  0.0027993375806788117 \nt_stall(calc 2):  0.0027993375806788117\n</code></pre> <p>In this case, we will use the value obtained from \\(k_t\\)(itself derived from \\(k_e\\)), \\(V\\), and \\(R\\)</p> <pre><code>t_stall = t_stall_calc2\n</code></pre>"},{"location":"tutorials/dynamics/motors/02-steady-state-datasheets/#theoretical-limits","title":"Theoretical limits","text":"<p>The maximum theoretical limits of the electrical coils can be calculated, assuming that all sources of mechanical loss are absent.  This can be done using the computed value of \\(k_e\\): </p> \\[w_{max(theoretical)} = \\frac{V}{k_e}\\] \\[\\tau_{max(theoretical)} = k_t i_{stall}=k_e\\frac{V}{R}\\] <pre><code>w_max_theoretical = V/ke\nt_max_theoretical = ke*V/R\n</code></pre>"},{"location":"tutorials/dynamics/motors/02-steady-state-datasheets/#plotting-preparation","title":"Plotting Preparation","text":"<p>To plot my results I have to define two domains: the theoretical maximum range of \\(\\omega\\), and the actual, up to \\(\\omega_{nl}\\).  Different lines are plotted over thes different domains.  I will, for some error correction, ensure that there are different numbers of data points for each domain.  I also calculate current across those two domains to simplify later expressions.</p> <pre><code>w = numpy.r_[0:w_max_theoretical:101j]\nw_act = numpy.r_[0:w_nl:99j]\n\ni = (V-ke*w)/R\ni_act = (V-ke*w_act)/R\n</code></pre>"},{"location":"tutorials/dynamics/motors/02-steady-state-datasheets/#motor-damping","title":"Motor Damping","text":"<p>The motor's loss is modeled as speed-dependent damping.  This is due to the many speed-dependent factors that dominate motor losses, though friction should not be forgotten.  Maxon does not separate these two effects in their data sheet (though they do supply separate values upon request, I have learned), so we will lump it all into damping as well here.  The force of damping can be calculated at no-load conditions:</p> \\[\\tau_{damping} = k_t i_{nl} = b \\omega_{nl}\\] <p>And you can isolate the damping term by rearranging.</p> \\[b =\\frac{k_t i_{nl}}{\\omega_{nl}}\\] <pre><code>b = kt*i_nl/w_nl\nt_damp = b*w\n</code></pre> <p>This permits us to separate the motor's useful mechanical torque it can output in contrast to the losses it experiences in overcoming its own friction</p> \\[\\tau = \\tau_{damping}+\\tau_{out}\\] \\[\\tau_{out} = \\tau-\\tau_{damping}\\] \\[\\tau_{out} = k_t i-b \\omega = \\frac{k_t(V-k_e\\omega)}{R} -  \\frac{k_t i_{nl}}{\\omega_{nl}}\\omega\\] \\[\\tau_{out} = k_t\\left(\\frac{V-\\left(k_e+\\frac{k_t i_{nl}R}{\\omega_{nl}}\\right)\\omega}{R}\\right)\\] \\[\\tau_{out} = k_t\\left(\\frac{V-k_v\\omega}{R}\\right) \\] <pre><code>t_total = kt*i\nt_mech = kt*(V-kv*w_act)/R\n</code></pre> <pre><code>fig = plt.figure()\nax1 = fig.add_subplot(111)\nax1.plot(w,t_total,label='$\\\\tau$')\nax1.plot(w_act,t_mech,label='$\\\\tau_{out}$')\nax1.plot(w,t_damp,label='$\\\\tau_{damping}$')\nhandles, labels = ax1.get_legend_handles_labels()\nax1.legend(handles, labels)\nax1.annotate(\"$k_e$ line\", xy=(w_max_theoretical/2,t_stall/2), xytext=(w_max_theoretical/2+100,t_stall/2+.00025),arrowprops=dict(arrowstyle=\"-&gt;\"))\nax1.annotate(\"$k_v$ line\", xy=(w_nl/2,t_mech.max()/2), xytext=(w_nl/2+100,t_mech.max()/2+.0005),arrowprops=dict(arrowstyle=\"-&gt;\"))\n\n\nax1.set_xlabel('$\\omega$ (rad/sec)')\nax1.set_ylabel('Torque (Nm)')\nax1.vlines(w_nl,0,t_stall,color='#aaaaaa',linestyle='--')\n\ntemp =  numpy.array(ax1.get_ylim())\ntemp/=kt\n\nax2 = ax1.twinx()\nax2.set_ylim(*temp)\nax2.tick_params('y', colors='r')\nax2.set_ylabel('current (A)', color='r')\nax2.hlines(i_nl,0,w_max_theoretical,color='#aaaaaa',linestyle='--')\n\nw_1000 = 1000\nb_1000 = b*w_1000\nt_1000 = kt*(V-ke*w_1000)/R\nt_mech_1000 = kt*(V-kv*w_1000)/R\n\nimport matplotlib.patches as mpatches\ntemp = mpatches.Rectangle((w_nl,0), w_max_theoretical-w_nl,t_stall, ec=\"none\",alpha=.5,color='#aaaaaa'),\nax1.add_artist(temp[0])\nax1.annotate(\"\", xy=(w_1000,0), xytext=(w_1000,b_1000),arrowprops=dict(arrowstyle=\"&lt;-&gt;\"))\nax1.annotate(\"\", xy=(w_1000,t_mech_1000), xytext=(w_1000,t_1000),arrowprops=dict(arrowstyle=\"&lt;-&gt;\"))\nax1.annotate(\"\", xy=(w_1000,t_mech_1000/2+t_1000/2), xytext=(w_1000-325,b_1000/2+t_mech_1000/2),arrowprops=dict(arrowstyle=\"-&gt;\",connectionstyle=\"arc3,rad=.2\"))\nax1.annotate(\"\", xy=(w_1000,b_1000/2), xytext=(w_1000-325,b_1000/2+t_mech_1000/2),arrowprops=dict(arrowstyle=\"-&gt;\",connectionstyle=\"arc3,rad=.2\"))\nax1.text(w_1000-700,b_1000/2+t_mech_1000/2,'mechanical loss')\nplt.show()\n\n</code></pre> <p></p>"},{"location":"tutorials/dynamics/motors/02-steady-state-datasheets/#power-and-efficiency","title":"Power and efficiency","text":"<p>the mechanical power out is equal to mechanical power:</p> \\[P_{out} = \\tau_{out}*\\omega\\] <p>The power in is equal to electrical power</p> \\[P_{in} = Vi=\\frac{V(V-k_ew)}{R}\\] <p>And the efficiency is equal to \\(E = \\frac{P_{out}}{P_{in}}\\)</p> <pre><code>p_mech = t_mech*w_act\np_elec = V*i_act\neff = p_mech/p_elec\n</code></pre> <pre><code>print('max_efficiency',eff.max())\nprint('min_torque',t_mech.min())\n</code></pre> <pre><code>max_efficiency 0.4381038549778652\nmin_torque -4.143852047690798e-19\n</code></pre> <pre><code>t_total2 = kt*i_act\n\nfig = plt.figure()\nax1 = fig.add_subplot(111)\nar1 = ax1.plot(w_act,t_total2,'b',label='$\\\\tau$')\nar1 = ax1.plot(w_act,t_mech,'r',label='$\\\\tau_{out}$')\nax1.set_xlabel('$\\\\omega$ (rad/sec)')\nax1.set_ylabel('Torque (Nm)',color='b')\nax1.tick_params('y', colors='b')\nax1.axvline(w_nl,color='b',linestyle = '--')\n\nhandles1, labels1 = ax1.get_legend_handles_labels()\n\nax2 = ax1.twinx()\nar2 = ax2.plot(w_act,p_mech,'r-.',label='$Power$')\nax2.set_ylabel('power (W)', color='r')\nax2.tick_params('y', colors='r')\nhandles2, labels2 = ax2.get_legend_handles_labels()\n\nax3 = ax1.twinx()\np3 = ax3.plot(w_act, eff, 'g--',label='$Eff$')\nax3.set_ylabel('efficiency (%)', color='g')\nax3.tick_params('y', colors='g')\nax3.spines['right'].set_position(('outward', 50))  \nhandles3, labels3 = ax3.get_legend_handles_labels()\n\nax1.legend(handles1+handles2+handles3, labels1+labels2+labels3)\n\n\n# ax4 = ax1.twinx()\n# p3 = ax4.plot(RPM, i, 'c--')\n# ax4.set_ylabel('current (A)', color='c')\n# ax4.tick_params('y', colors='c')\n# ax4.spines['right'].set_position(('outward', 100))  \n\n\n# ax1.legend(artists,['torque','power'])\n</code></pre> <pre><code>&lt;matplotlib.legend.Legend at 0x7ff85482c580&gt;\n</code></pre> <p></p>"},{"location":"tutorials/dynamics/motors/03-motor-dynamics-secondorder/","title":"Second Order Motor Model Implementation in Mujoco","text":"<pre><code>#&lt;https://www.maxongroup.com/maxon/view/category/motor?etcc_cu=onsite&amp;etcc_med_onsite=Product&amp;etcc_cmp_onsite=RE+Program&amp;etcc_plc=Overview-Page-DC-Motors&amp;etcc_var=%5bcom%5d%23en%23_d_&amp;target=filter&amp;filterCategory=re&gt;\nimport matplotlib.pyplot as plt\nimport numpy\nimport math\nimport os\nimport mujoco\nimport numpy\nimport mediapy as media\n</code></pre>"},{"location":"tutorials/dynamics/motors/03-motor-dynamics-secondorder/#motor-data","title":"Motor Data","text":"<p>The following are obtained from the previous steady-state motor parameters tutorial,  with the exception that I am using the actual \\(i_{NL}\\) vs the exaggerated version.  These, in turn, were obtained from Maxon Motors' 118400 RE series motor:</p> <p>https://www.maxongroup.com/medias/sys_master/root/8992308920350/EN-22-129.pdf</p> <pre><code>V = 12 # Selected\nR = 33.3 # Selected\ni_stall_data = .36 # Not Selected\nt_stall_data = 3.24e-3 # Not Selected\ni_nl = 5.5e-3 # Selected. This is the actual value\n# i_nl = 5.5e-2 # Selected. This is the exaggerated value\nw_nl = 12500*2*math.pi/60 # Selected.\nL = .299e-3 # Not needed for steady state e\n</code></pre>"},{"location":"tutorials/dynamics/motors/03-motor-dynamics-secondorder/#motor-calculations","title":"Motor Calculations","text":"<p>The following are obtained from the previous steady-state motor parameters tutorial</p> <pre><code>i_stall_calc = V/R\ni_stall = i_stall_calc\n\nke = (V-i_nl*R)/(w_nl)\n\nkv = V/w_nl\nkv_calc = ke+i_nl*R/w_nl\n\nkt_data = t_stall_data / i_stall_data\nkt_calc = ke\nkt = kt_calc\n\nt_stall_calc1 = kt*i_stall\nt_stall_calc2 = kt*V/R\nt_stall = t_stall_calc2\n\nw_max_theoretical = V/ke\nt_max_theoretical = ke*V/R\n\nb = kt*i_nl/w_nl\n</code></pre>"},{"location":"tutorials/dynamics/motors/03-motor-dynamics-secondorder/#other-dynamic-parameters","title":"Other Dynamic Parameters","text":""},{"location":"tutorials/dynamics/motors/03-motor-dynamics-secondorder/#extra-shaft-mass","title":"Extra Shaft Mass","text":"<p>I add some extra inertia to the stator inertia given by the datasheet to \"slow\" it down and permit a larger timestep.</p>"},{"location":"tutorials/dynamics/motors/03-motor-dynamics-secondorder/#stator-inertia-i_m","title":"Stator Inertia, \\(I_{m}\\)","text":"<p>This value was obtained from the manufacturer's data sheet and converted to SI Units</p>"},{"location":"tutorials/dynamics/motors/03-motor-dynamics-secondorder/#stator-inertia-i_l","title":"Stator Inertia, \\(I_{l}\\)","text":"<p>This is an arbitrary value you can change to suit.</p>"},{"location":"tutorials/dynamics/motors/03-motor-dynamics-secondorder/#gear-ratio-g","title":"Gear Ratio, \\(G\\)","text":"<p>Many robotic solutions use a gearhead to transform a motor's speed and torque into a more usable domain.  The gearhead influences the stator inertia at the output shaft, as well as amplifying small torques and forces on the motor-side.  Thus, including it in our model is important, so we can play with its effects.  \\(G\\) was selected arbitrarily for this simulation</p>"},{"location":"tutorials/dynamics/motors/03-motor-dynamics-secondorder/#time-step-t_s","title":"Time Step, \\(t_s\\)","text":"<p>For systems with fast dynamics, adjusting the time-step is critical.  I pulled this parameter out of the xml so we can more easil adjust it with other simulation parameters</p> <pre><code>extra_shaft_mass=1e-6\nIm = .111/1000/100/100+extra_shaft_mass\nIl = 1e-5\nG = 10\nts = 1e-6\n\ndummy = 1\n</code></pre>"},{"location":"tutorials/dynamics/motors/03-motor-dynamics-secondorder/#second-order-model","title":"Second-Order Model","text":"<p>This version of the model specifies three bodies: one body that represents the inductance and current of the motor's electrical side as an Inertia and velocity term, respectively, and two inertias linked by the gear ratio, \\(G\\).  Unlike the first order model, the timestep of this simulation must be quite small (1e-6 s instead of 1e-3 s), in order to capture the electrical-domain dynamics, which are much faster than the mechanical domain.</p> <p>The geoms are provided just for visualization.  The inertias calculated by the geoms would not produce consistent results because of scaling, so we supply inertia separately with an <code>&lt;inertial&gt;</code> tag.  </p> <p>The inertia of our \"current\" body is supplied as L.  This is physically consistent with the electrical domain, and is a handy way to include electrical components in MuJoCo.  Just make sure you don't permit these bodies to be impacted by gravity or other external forces.</p> <p>In this experiment, we don't consider inertias about other axes as well as the bodies' mass, because the motors are not moving; so we supply a dummy value instead.  This value does not impact our results, but could if you use it in a more complicated example.</p> <p>The damping term \\(b\\) is added to the motor-side joint, as it is computed as in the steady-state tutorial as</p> \\[b=\\frac{k_t i_{NL}}{w_{NL}}\\] <p>There is an actuator element added to the \"current\" and motor-side joints.  The control law is computed using the equations:</p> \\[ \\tau_{current} = L \\frac{di}{dt} = V-i R - k_e \\omega_{motor}\\] \\[ \\tau_{motor} = I\\frac{d\\omega_{motor}}{dt} = k_t*i\\] <p>The right side of these equations is computed and added to the two respective joint torques, while the inductance and Inertial terms supplied in XML are used with MuJoCo's standard time-stepping formulation to obtain and integrate accelerations.</p> <p>Finally, the connection between motor shaft and load is established with an <code>&lt;equality&gt;</code> tag, which connects the input and output speed by a factor \\(G\\).</p> <pre><code>xml_template_1 = \"\"\"\n&lt;mujoco&gt;\n    &lt;option timestep=\"{ts}\"/&gt;\n    &lt;worldbody&gt;\n        &lt;light name=\"top\" pos=\"0 0 10\"/&gt;\n        &lt;body name=\"Current\" pos=\"0 0 0\" axisangle=\"1 0 0 0\"&gt;\n            &lt;joint name=\"joint_current\" type=\"hinge\" axis=\"0 0 1\" pos=\"0 0 0\"/&gt;\n            &lt;geom type=\"box\" size=\".25 .25 .25\" pos=\"0 0 0\" rgba=\"0 0 1 1\"/&gt;\n            &lt;geom type=\"cylinder\" size=\".5 .1\" pos=\"0 0 0\" rgba=\"0 0 1 1\"/&gt;\n            &lt;inertial pos=\"0 0 0\" diaginertia=\"{dummy:e} {dummy:e} {L:e}\" mass=\"{dummy:e}\"/&gt;\n        &lt;/body&gt;\n        &lt;body name=\"Motor\" pos=\"0 0 1\" axisangle=\"1 0 0 0\"&gt;\n            &lt;joint name=\"joint_motor\" type=\"hinge\" axis=\"0 0 1\" pos=\"0 0 0\" damping=\"{b}\"/&gt;\n            &lt;geom type=\"box\" size=\".25 .25 .25\" pos=\"0 0 0\" rgba=\"1 0 1 1\"/&gt;\n            &lt;geom type=\"cylinder\" size=\".5 .1\" pos=\"0 0 0\" rgba=\"1 0 1 1\"/&gt;\n            &lt;inertial pos=\"0 0 0\" diaginertia=\"{dummy:e} {dummy:e} {Im:e}\" mass=\"{dummy:e}\"/&gt;\n        &lt;/body&gt;\n        &lt;body name=\"Load\" pos=\"0 0 2\" axisangle=\"1 0 0 0\"&gt;\n            &lt;joint name=\"joint_load\" type=\"hinge\" axis=\"0 0 1\" pos=\"0 0 0\"/&gt;\n            &lt;geom type=\"box\" size=\".25 .25 .25\" pos=\"0 0 0\" rgba=\"0 1 1 1\"/&gt;\n            &lt;geom type=\"cylinder\" size=\".5 .1\" pos=\"0 0 0\" rgba=\"0 1 1 1\"/&gt;\n            &lt;inertial pos=\"0 0 0\" diaginertia=\"{dummy:e} {dummy:e} {Il:e}\" mass=\"{dummy:e}\"/&gt;\n        &lt;/body&gt;\n    &lt;/worldbody&gt;\n&lt;actuator&gt;\n    &lt;motor name=\"V\" joint=\"joint_current\"/&gt;\n    &lt;motor name=\"motor_torque\" joint=\"joint_motor\"/&gt;\n&lt;/actuator&gt;\n&lt;equality&gt;\n    &lt;joint joint1=\"joint_motor\" joint2=\"joint_load\" polycoef=\"0 {G} 0 0 0\"/&gt;\n&lt;/equality&gt;\n&lt;/mujoco&gt;\n\"\"\"\n\nxml_1 = xml_template_1.format(Im=Im,L=L,G=G,Il=Il,ts=ts,b=b, dummy=dummy)\n\nmodel = mujoco.MjModel.from_xml_string(xml_1)\ndata = mujoco.MjData(model)\nrenderer = mujoco.Renderer(model)\n\ndef mycontroller1(model, data):\n    i = data.qvel[0]\n    w = data.qvel[1]\n\n    t1 = (V-i*R - (ke)*w)\n    t2 = kt*i\n\n    data.ctrl = [t1,t2]\n    return\n\nmujoco.set_mjcb_control(mycontroller1)\n\nduration = 1  # (seconds)\nframerate = 30  # (Hz)\ndata_rate = 1/ts\n\nq = []\nw = []\nt = []\nframes = []\nmujoco.mj_resetData(model, data)\n\nwhile data.time &lt; duration:\n    mujoco.mj_step(model, data)\n    if len(frames) &lt; data.time * framerate:\n        renderer.update_scene(data)\n        pixels = renderer.render()\n        frames.append(pixels)\n    if len(frames) &lt; data.time * data_rate:\n        q.append(data.qpos.copy())\n        w.append(data.qvel.copy())\n        t.append(data.time)\n\nmujoco.set_mjcb_control(None)\n\nmedia.show_video(frames, fps=framerate)\n\nt = numpy.array(t)\nq = numpy.array(q)\nw = numpy.array(w)\nw.shape\n</code></pre>        This browser does not support the video tag.        <pre><code>(999999, 3)\n</code></pre> <pre><code>a = plt.plot(t,q[:,1:])    \nplt.legend(a,['$q_{motor}$','$q_{load}$'])\n</code></pre> <pre><code>&lt;matplotlib.legend.Legend at 0x7f0b7e83ffa0&gt;\n</code></pre> <p></p> <pre><code>a = plt.plot(t,w[:,1:])    \nplt.legend(a,['$\\omega_{motor}$','$\\omega_{load}$'])\nplt.xlabel('t (s)')\nplt.ylabel('$\\omega$ (rad/s)')\n</code></pre> <pre><code>Text(0, 0.5, '$\\\\omega$ (rad/s)')\n</code></pre> <p></p>"},{"location":"tutorials/dynamics/motors/03-motor-dynamics-secondorder/#plotting-current","title":"Plotting Current","text":"<p>While the dynamics of current are readily observed with its sharp increase near t=0, the slope of the current as a function of time in the rest of the plot is far less pronounced.  The simulation, however, took much longer to run.  </p> <p>If the time cost of simulating with \\(t_s=1\\times10^{-6}\\) is too high, consider the first-order approximation.</p> <pre><code>a = plt.plot(t,w[:,0])    \nplt.xlabel('t (s)')\nplt.ylabel('current (A)')\n</code></pre> <pre><code>Text(0, 0.5, 'current (A)')\n</code></pre> <p></p> <pre><code>data = {}\ndata['t'] = t[::100]\ndata['q'] = q[::100]\ndata['w'] = w[::100]\nimport yaml\nwith open('data_second_order.yml','w') as f:\n    yaml.dump(data,f)\n</code></pre>"},{"location":"tutorials/dynamics/motors/04-motor-dynamics-firstorder/","title":"First-Order Motor Model Implementation in Mujoco","text":"<pre><code>#&lt;https://www.maxongroup.com/maxon/view/category/motor?etcc_cu=onsite&amp;etcc_med_onsite=Product&amp;etcc_cmp_onsite=RE+Program&amp;etcc_plc=Overview-Page-DC-Motors&amp;etcc_var=%5bcom%5d%23en%23_d_&amp;target=filter&amp;filterCategory=re&gt;\nimport matplotlib.pyplot as plt\nimport numpy\nimport math\nimport os\nimport mujoco\nimport numpy\nimport mediapy as media\n</code></pre>"},{"location":"tutorials/dynamics/motors/04-motor-dynamics-firstorder/#motor-data","title":"Motor Data","text":"<p>The following are obtained from the previous steady-state motor parameters tutorial,  with the exception that I am using the actual \\(i_{NL}\\) vs the exaggerated version.  These, in turn, were obtained from Maxon Motors' 118400 RE series motor:</p> <p>https://www.maxongroup.com/medias/sys_master/root/8992308920350/EN-22-129.pdf</p> <pre><code>V = 12 # Selected\nR = 33.3 # Selected\ni_stall_data = .36 # Not Selected\nt_stall_data = 3.24e-3 # Not Selected\ni_nl = 5.5e-3 # Selected. This is the actual value\n# i_nl = 5.5e-2 # Selected. This is the exaggerated value\nw_nl = 12500*2*math.pi/60 # Selected.\nL = .299e-3 # Not needed for steady state e\n</code></pre>"},{"location":"tutorials/dynamics/motors/04-motor-dynamics-firstorder/#motor-calculations","title":"Motor Calculations","text":"<p>The following are obtained from the previous steady-state motor parameters tutorial</p> <pre><code>i_stall_calc = V/R\ni_stall = i_stall_calc\n\nke = (V-i_nl*R)/(w_nl)\n\nkv = V/w_nl\nkv_calc = ke+i_nl*R/w_nl\n\nkt_data = t_stall_data / i_stall_data\nkt_calc = ke\nkt = kt_calc\n\nt_stall_calc1 = kt*i_stall\nt_stall_calc2 = kt*V/R\nt_stall = t_stall_calc2\n\nw_max_theoretical = V/ke\nt_max_theoretical = ke*V/R\n\nb = kt*i_nl/w_nl\n</code></pre>"},{"location":"tutorials/dynamics/motors/04-motor-dynamics-firstorder/#other-dynamic-parameters","title":"Other Dynamic Parameters","text":""},{"location":"tutorials/dynamics/motors/04-motor-dynamics-firstorder/#extra-shaft-mass","title":"Extra Shaft Mass","text":"<p>I add some extra inertia to the stator inertia given by the datasheet to \"slow\" it down and permit a larger timestep.</p>"},{"location":"tutorials/dynamics/motors/04-motor-dynamics-firstorder/#stator-inertia-i_m","title":"Stator Inertia, \\(I_{m}\\)","text":"<p>This value was obtained from the manufacturer's data sheet and converted to SI Units</p>"},{"location":"tutorials/dynamics/motors/04-motor-dynamics-firstorder/#stator-inertia-i_l","title":"Stator Inertia, \\(I_{l}\\)","text":"<p>This is an arbitrary value you can change to suit.</p>"},{"location":"tutorials/dynamics/motors/04-motor-dynamics-firstorder/#gear-ratio-g","title":"Gear Ratio, \\(G\\)","text":"<p>Many robotic solutions use a gearhead to transform a motor's speed and torque into a more usable domain.  The gearhead influences the stator inertia at the output shaft, as well as amplifying small torques and forces on the motor-side.  Thus, including it in our model is important, so we can play with its effects.  \\(G\\) was selected arbitrarily for this simulation</p>"},{"location":"tutorials/dynamics/motors/04-motor-dynamics-firstorder/#time-step-t_s","title":"Time Step, \\(t_s\\)","text":"<p>For systems with fast dynamics, adjusting the time-step is critical.  I pulled this parameter out of the xml so we can more easil adjust it with other simulation parameters</p> <pre><code>extra_shaft_mass=1e-6\nIm = .111/1000/100/100+extra_shaft_mass\nIl = 1e-5\nG = 10\nts = 1e-3\n\ndummy = 1\n</code></pre>"},{"location":"tutorials/dynamics/motors/04-motor-dynamics-firstorder/#first-order-model","title":"First Order Model","text":"<p>This version of the model specifies two inertias linked by the gear ratio, \\(G\\).  Unlike the second order model, the timestep can be much larger (1e-3 s instead of 1e-6 s), because we are ignoring the differential equation of the current in this model.</p> <p>The geoms are provided just for visualization.  The inertias calculated by the geoms would not produce consistent results because of scaling, so we supply inertia separately with an <code>&lt;inertial&gt;</code> tag.  </p> <p>In this experiment, we don't consider inertias about other axes as well as the bodies' mass, because the motors are not moving; so we supply a dummy value instead.  This value does not impact our results, but could if you use it in a more complicated example.</p> <p>The damping term \\(b\\) is added to the motor-side joint, as it is computed as in the steady-state tutorial as</p> \\[b=\\frac{k_t i_{NL}}{w_{NL}}\\] <p>There is a joint torque added to the motor-side joint.  The control law is computed using the equation:</p> \\[\\tau = \\frac{k_t(V-(k_e)*w)}{R}\\] <p>Which is our standard first-order equation for total torque supplied by the motor.  </p> <p>Note: We could also model motor torque by setting \\(b=0\\) in the simulation and by supplying the (mechanical) output torque equation to the joint instead:</p> \\[\\tau = \\frac{k_t(V-(k_v)*w)}{R}\\] <p>However, this is an expanded example anyways.  They produce equivalent results.</p> <p>Finally, the connection between motor shaft and load is established with an <code>&lt;equality&gt;</code> tag, which connects the input and output speed by a factor \\(G\\).</p> <pre><code>xml_template = \"\"\"\n&lt;mujoco&gt;\n    &lt;option timestep=\"{ts}\"/&gt;\n    &lt;worldbody&gt;\n        &lt;light name=\"top\" pos=\"0 0 3\"/&gt;\n        &lt;body name=\"Motor\" pos=\"0 0 0\" axisangle=\"1 0 0 0\"&gt;\n            &lt;joint name=\"joint_motor\" type=\"hinge\" axis=\"0 0 1\" pos=\"0 0 0\"  damping=\"{b}\"/&gt;\n            &lt;geom type=\"box\" size=\".25 .25 .25\" pos=\"0 0 0\" rgba=\"0 1 1 1\"/&gt;\n            &lt;geom type=\"cylinder\" size=\".5 .1\" pos=\"0 0 0\" rgba=\"0 1 1 1\"/&gt;\n            &lt;inertial pos=\"0 0 0\" diaginertia=\"{dummy:e} {dummy:e} {Im:e}\" mass=\"1\"/&gt;\n        &lt;/body&gt;\n        &lt;body name=\"Load\" pos=\"0 0 1\" axisangle=\"1 0 0 0\"&gt;\n            &lt;joint name=\"joint_load\" type=\"hinge\" axis=\"0 0 1\" pos=\"0 0 0\"/&gt;\n            &lt;geom type=\"box\" size=\".25 .25 .25\" pos=\"0 0 0\" rgba=\"0 1 1 1\"/&gt;\n            &lt;geom type=\"cylinder\" size=\".5 .1\" pos=\"0 0 0\" rgba=\"0 1 1 1\"/&gt;\n            &lt;inertial pos=\"0 0 0\" diaginertia=\"{dummy:e} {dummy:e} {Il:e}\" mass=\"1\"/&gt;\n        &lt;/body&gt;\n    &lt;/worldbody&gt;\n&lt;actuator&gt;\n    &lt;motor name=\"motor_torque\" joint=\"joint_motor\"/&gt;\n&lt;/actuator&gt;\n&lt;equality&gt;\n    &lt;joint joint1=\"joint_motor\" joint2=\"joint_load\" polycoef=\"0 {G} 0 0 0\"/&gt;\n&lt;/equality&gt;\n&lt;/mujoco&gt;\n\"\"\"\n</code></pre> <pre><code>xml = xml_template.format(Im=Im,G=G,Il=Il,ts=ts,b=b,dummy=dummy)\n</code></pre> <pre><code>model = mujoco.MjModel.from_xml_string(xml)\ndata = mujoco.MjData(model)\nrenderer = mujoco.Renderer(model)\n</code></pre> <pre><code>def mycontroller(model, data):\n    w = data.qvel[0]\n    t = kt*(V-(ke)*w)/R\n    data.ctrl = [t]\n    return\n\nmujoco.set_mjcb_control(mycontroller)\n\nduration = 1  # (seconds)\nframerate = 30  # (Hz)\ndata_rate = 1/ts\n\nq = []\nw = []\nt = []\nframes = []\nmujoco.mj_resetData(model, data)\n\nwhile data.time &lt; duration:\n    mujoco.mj_step(model, data)\n    if len(frames) &lt; data.time * framerate:\n        renderer.update_scene(data)\n        pixels = renderer.render()\n        frames.append(pixels)\n    if len(frames) &lt; data.time * data_rate:\n        q.append(data.qpos.copy())\n        w.append(data.qvel.copy())\n        t.append(data.time)\n\nmujoco.set_mjcb_control(None)\n\nmedia.show_video(frames, fps=framerate)\n\nt = numpy.array(t)\nq = numpy.array(q)\nw = numpy.array(w)\n\na = plt.plot(t,q)    \nplt.legend(a,['$q_{motor}$','$q_{load}$'])\n</code></pre>        This browser does not support the video tag.        <pre><code>&lt;matplotlib.legend.Legend at 0x7f541b016580&gt;\n</code></pre> <p></p> <pre><code>a = plt.plot(t,w)    \nplt.legend(a,['$\\omega_{motor}$','$\\omega_{load}$'])\nplt.xlabel('t (s)')\nplt.ylabel('$\\omega$ (rad/s)')\n</code></pre> <pre><code>Text(0, 0.5, '$\\\\omega$ (rad/s)')\n</code></pre> <p></p>"},{"location":"tutorials/dynamics/motors/04-motor-dynamics-firstorder/#plotting-current","title":"Plotting Current","text":"<p>In the first order momdel, the dynamics of the electrical side are ignored.  Instead, the change of current is directly linked to the change in speed and the back-EMF of the motor.  This simulation, however, took much less time to run than the second-order model.</p> <p>If the time cost of simulating with \\(t_s=1\\times10^{-6}\\) is too high, consider this approximation.</p> <pre><code>i = (V-ke*w)/R\nplt.plot(t[:100],i[:100,0])    \nplt.xlabel('t (s)')\nplt.ylabel('current (A)')\n</code></pre> <pre><code>Text(0, 0.5, 'current (A)')\n</code></pre> <p></p> <pre><code>data = {}\ndata['t'] = t\ndata['q'] = q\ndata['w'] = w\nimport yaml\nwith open('data_first_order.yml','w') as f:\n    yaml.dump(data,f)\n</code></pre> <pre><code>\n</code></pre>"},{"location":"tutorials/dynamics/motors/05-motor-dynamics-firstorder-lumped/","title":"First-Order Lumped Motor Model Implementation in Mujoco","text":"<pre><code>#&lt;https://www.maxongroup.com/maxon/view/category/motor?etcc_cu=onsite&amp;etcc_med_onsite=Product&amp;etcc_cmp_onsite=RE+Program&amp;etcc_plc=Overview-Page-DC-Motors&amp;etcc_var=%5bcom%5d%23en%23_d_&amp;target=filter&amp;filterCategory=re&gt;\nimport matplotlib.pyplot as plt\nimport numpy\nimport math\nimport os\nimport mujoco\nimport numpy\nimport mediapy as media\n</code></pre>"},{"location":"tutorials/dynamics/motors/05-motor-dynamics-firstorder-lumped/#motor-data","title":"Motor Data","text":"<p>The following are obtained from the previous steady-state motor parameters tutorial,  with the exception that I am using the actual \\(i_{NL}\\) vs the exaggerated version.  These, in turn, were obtained from Maxon Motors' 118400 RE series motor:</p> <p>https://www.maxongroup.com/medias/sys_master/root/8992308920350/EN-22-129.pdf</p> <pre><code>V = 12 # Selected\nR = 33.3 # Selected\ni_stall_data = .36 # Not Selected\nt_stall_data = 3.24e-3 # Not Selected\ni_nl = 5.5e-3 # Selected. This is the actual value\n# i_nl = 5.5e-2 # Selected. This is the exaggerated value\nw_nl = 12500*2*math.pi/60 # Selected.\nL = .299e-3 # Not needed for steady state e\n</code></pre>"},{"location":"tutorials/dynamics/motors/05-motor-dynamics-firstorder-lumped/#motor-calculations","title":"Motor Calculations","text":"<p>The following are obtained from the previous steady-state motor parameters tutorial</p> <pre><code>i_stall_calc = V/R\ni_stall = i_stall_calc\n\nke = (V-i_nl*R)/(w_nl)\n\nkv = V/w_nl\nkv_calc = ke+i_nl*R/w_nl\n\nkt_data = t_stall_data / i_stall_data\nkt_calc = ke\nkt = kt_calc\n\nt_stall_calc1 = kt*i_stall\nt_stall_calc2 = kt*V/R\nt_stall = t_stall_calc2\n\nw_max_theoretical = V/ke\nt_max_theoretical = ke*V/R\n\nb = kt*i_nl/w_nl\n</code></pre>"},{"location":"tutorials/dynamics/motors/05-motor-dynamics-firstorder-lumped/#other-dynamic-parameters","title":"Other Dynamic Parameters","text":""},{"location":"tutorials/dynamics/motors/05-motor-dynamics-firstorder-lumped/#extra-shaft-mass","title":"Extra Shaft Mass","text":"<p>I add some extra inertia to the stator inertia given by the datasheet to \"slow\" it down and permit a larger timestep.</p>"},{"location":"tutorials/dynamics/motors/05-motor-dynamics-firstorder-lumped/#stator-inertia-i_m","title":"Stator Inertia, \\(I_{m}\\)","text":"<p>This value was obtained from the manufacturer's data sheet and converted to SI Units</p>"},{"location":"tutorials/dynamics/motors/05-motor-dynamics-firstorder-lumped/#stator-inertia-i_l","title":"Stator Inertia, \\(I_{l}\\)","text":"<p>This is an arbitrary value you can change to suit.</p>"},{"location":"tutorials/dynamics/motors/05-motor-dynamics-firstorder-lumped/#gear-ratio-g","title":"Gear Ratio, \\(G\\)","text":"<p>Many robotic solutions use a gearhead to transform a motor's speed and torque into a more usable domain.  The gearhead influences the stator inertia at the output shaft, as well as amplifying small torques and forces on the motor-side.  Thus, including it in our model is important, so we can play with its effects.  \\(G\\) was selected arbitrarily for this simulation</p>"},{"location":"tutorials/dynamics/motors/05-motor-dynamics-firstorder-lumped/#time-step-t_s","title":"Time Step, \\(t_s\\)","text":"<p>For systems with fast dynamics, adjusting the time-step is critical.  I pulled this parameter out of the xml so we can more easil adjust it with other simulation parameters</p> <pre><code>extra_shaft_mass=1e-6\nIl = 1e-5\nG = 10\nIm = (.111/1000/100/100+extra_shaft_mass)*(G**2)+Il\nts = 1e-3\n\ndummy = 1\n</code></pre>"},{"location":"tutorials/dynamics/motors/05-motor-dynamics-firstorder-lumped/#first-order-lumped-model","title":"First Order Lumped Model","text":"<p>This version of the model specifies only one inertia with a lumped mass computed with \\(G\\).  Unlike the second order model, the timestep can be much larger (1e-3 s instead of 1e-6 s), because we are ignoring the differential equation of the current in this model.  Unlike the two-mass model, we have further simplified the representation</p> <p>The geoms are provided just for visualization.  The inertias calculated by the geoms would not produce consistent results because of scaling, so we supply inertia separately with an <code>&lt;inertial&gt;</code> tag.  </p> <p>In this experiment, we don't consider inertias about other axes as well as the bodies' mass, because the motors are not moving; so we supply a dummy value instead.  This value does not impact our results, but could if you use it in a more complicated example.</p> <p>The lumped inertia I  is computed as</p> \\[I = I_{load}+I_{motor}G^2\\] <p>The motor torque is added to the load-side joint, using \\(G\\) to scale it, as it is computed as in the steady-state tutorial as</p> \\[\\tau = G*\\left(\\frac{k_t(V-(k_v)w_{motor})}{R}\\right)\\] \\[\\tau = G*\\left(\\frac{k_t(V-(k_v)G w_{load})}{R}\\right)\\] <p>It should be noted that we are using \\(k_v\\) instead of \\(k_e\\), which factors in the internal damping losses previously calculated and supplied separately as a b term, to further simplify the model.</p> <pre><code>xml_template = \"\"\"\n&lt;mujoco&gt;\n    &lt;option timestep=\"{ts}\"/&gt;\n    &lt;worldbody&gt;\n        &lt;light name=\"top\" pos=\"0 0 3\"/&gt;\n        &lt;body name=\"Load\" pos=\"0 -1.5 0\" axisangle=\"1 0 0 0\"&gt;\n            &lt;joint name=\"joint_load\" type=\"hinge\" axis=\"0 0 1\" pos=\"0 0 0\"/&gt;\n            &lt;geom type=\"box\" size=\".25 .25 .25\" pos=\"0 0 0\" rgba=\"0 1 1 1\"/&gt;\n            &lt;geom type=\"cylinder\" size=\".5 .1\" pos=\"0 0 0\" rgba=\"0 1 1 1\"/&gt;\n            &lt;inertial pos=\"0 0 0\" diaginertia=\"{dummy:e} {dummy:e} {Im:e}\" mass=\"{dummy:e}\"/&gt;\n        &lt;/body&gt;\n    &lt;/worldbody&gt;\n&lt;actuator&gt;\n    &lt;motor name=\"motor_modified_torque\" joint=\"joint_load\"/&gt;\n&lt;/actuator&gt;\n&lt;/mujoco&gt;\n\"\"\"\n</code></pre> <pre><code>xml = xml_template.format(Im=Im,G=G,Il=Il,ts=ts,b=b,dummy=dummy)\n</code></pre> <pre><code>model = mujoco.MjModel.from_xml_string(xml)\ndata = mujoco.MjData(model)\nrenderer = mujoco.Renderer(model)\n</code></pre> <pre><code>def mycontroller(model, data):\n    w = data.qvel[0]\n    t = (kt*(V-(kv)*w*G)/R)*G\n\n    data.ctrl = [t]\n    return\n\nmujoco.set_mjcb_control(mycontroller)\n\nduration = 1  # (seconds)\nframerate = 30  # (Hz)\ndata_rate = 1/ts\n\nq = []\nw = []\nt = []\nframes = []\n\nmujoco.mj_resetData(model, data)\n\nwhile data.time &lt; duration:\n    mujoco.mj_step(model, data)\n    if len(frames) &lt; data.time * framerate:\n        renderer.update_scene(data)\n        pixels = renderer.render()\n        frames.append(pixels)\n    if len(frames) &lt; data.time * data_rate:\n        q.append(data.qpos.copy())\n        w.append(data.qvel.copy())\n        t.append(data.time)\n\nmujoco.set_mjcb_control(None)\n\nmedia.show_video(frames, fps=framerate)\n\nt = numpy.array(t)\nq = numpy.array(q)\nw = numpy.array(w)\n\na = plt.plot(t,q)    \nplt.legend(a,['$q_{motor}$','$q_{load}$'])\n</code></pre>        This browser does not support the video tag.        <pre><code>&lt;matplotlib.legend.Legend at 0x7f2cbaec6b20&gt;\n</code></pre> <p></p> <pre><code>a = plt.plot(t,w)    \nplt.legend(a,['$\\omega_{motor}$','$\\omega_{load}$'])\nplt.xlabel('t (s)')\nplt.ylabel('$\\omega$ (rad/s)')\n</code></pre> <pre><code>Text(0, 0.5, '$\\\\omega$ (rad/s)')\n</code></pre> <p></p>"},{"location":"tutorials/dynamics/motors/05-motor-dynamics-firstorder-lumped/#plotting-current","title":"Plotting Current","text":"<p>In the first order momdel, the dynamics of the electrical side are ignored.  Instead, the change of current is directly linked to the change in speed and the back-EMF of the motor.  This simulation, however, took much less time to run than the second-order model.</p> <p>If the time cost of simulating with \\(t_s=1\\times10^{-6}\\) is too high, consider this approximation.</p> <pre><code>i = (V-ke*w)/R\nplt.plot(t[:100],i[:100,0])    \nplt.xlabel('t (s)')\nplt.ylabel('current (A)')\n</code></pre> <pre><code>Text(0, 0.5, 'current (A)')\n</code></pre> <p></p>"},{"location":"tutorials/dynamics/motors/05-motor-dynamics-firstorder-lumped/#comparing-models","title":"Comparing models","text":"<p>Note: You should run the first order and second order models first in order to generate their data.</p> <pre><code>import yaml\nwith open('data_second_order.yml') as f:\n    data_second_order = yaml.load(f,Loader=yaml.Loader)\nwith open('data_first_order.yml') as f:\n    data_first_order = yaml.load(f,Loader=yaml.Loader)    \n</code></pre> <pre><code>a1 = plt.plot(t[::100],w[::100],'ro') \na2 = plt.plot(data_first_order['t'][::90],data_first_order['w'][::90],'g^')    \na3 = plt.plot(data_second_order['t'],data_second_order['w'][:,1:])    \na4 = plt.plot(data_second_order['t'][::1100],data_second_order['w'][::1100,1:],'bx')    \n\nplt.legend(a1+a2[0:1]+a4[0:1],['first-order lumped','first order','second-order'])\nplt.xlabel('t (s)')\nplt.ylabel('$\\omega$ (rad/s)')\n</code></pre> <pre><code>Text(0, 0.5, '$\\\\omega$ (rad/s)')\n</code></pre> <p></p>"},{"location":"tutorials/dynamics/motors/06-servo_data_collection/","title":"Working with Experimental Data","text":"<pre><code>import pandas\nimport scipy.signal as ss\nimport scipy.optimize as so\nimport numpy\nimport matplotlib.pyplot as plt\nimport math\n</code></pre> <p>Import data collected by tracker and identify the useful columns</p> <p>Note: You will need to massage the .csv file to remove the first two rows.  Pandas expects just one row for column names above the data</p> <pre><code>data = pandas.read_csv('data.csv')\ndata.columns\n</code></pre> <pre><code>Index(['t', 'x', 'y', 'x.1', 'y.1'], dtype='object')\n</code></pre> <p>Extract the time and position data of our markers</p> <pre><code>t = data['t']\n</code></pre> <p>Make a guess for the center of rotation by finding the mean of all the x and y data of our first point.  This is rough but it should be close enough for an optimizer to do the rest</p> <pre><code>xini = data['x'].mean()\nyini = data['y'].mean()\nini = numpy.array([xini,yini])\nprint(ini)\n</code></pre> <pre><code>[2.55072079 0.21735663]\n</code></pre> <p>Create a function that finds the center of rotation for our two tracked points by obtaining the distance from the proposed center to each point over all the data.  The true center should minimize the sum of all distances to all points that rotate.</p> <pre><code>def fun(guess):\n    x0,y0 = guess\n    error = 0\n    error += ((data['x']-x0)**2+(data['y']-y0)**2).sum()\n    error += ((data['x.1']-x0)**2+(data['y.1']-y0)**2).sum()\n    error = error**.5\n    return error\n</code></pre> <p>The function, evaluated at the initial guess should provide a baseline error that can go lower still</p> <pre><code>print(fun(ini))\n</code></pre> <pre><code>18.010570547148244\n</code></pre> <p>Run the minimization and check the result</p> <pre><code>result = so.minimize(fun,ini)\nresult\n</code></pre> <pre><code>  message: Optimization terminated successfully.\n  success: True\n   status: 0\n      fun: 17.655446173747816\n        x: [ 2.719e+00  2.522e-01]\n      nit: 4\n      jac: [-7.153e-07  0.000e+00]\n hess_inv: [[ 8.129e-02 -1.918e-01]\n            [-1.918e-01  9.600e-01]]\n     nfev: 21\n     njev: 7\n</code></pre> <p>Compute the vectors from the origin to the two tracked points.  This will effectively shift the original tracked points to move about the result of our optimization, the selected center of rotation in the video.</p> <pre><code>v1 = numpy.array([data['x']-result.x[0],(data['y']-result.x[1])]).T\nv2 = numpy.array([data['x.1']-result.x[0],(data['y.1']-result.x[1])]).T\n</code></pre> <p>Plot the vectors over time, along with a dot at the origin.</p> <pre><code>plt.plot(v1[:,0],v1[:,1])\nplt.plot(v2[:,0],v2[:,1])\nplt.plot(0,0,'ro')\nplt.axis('equal')\n</code></pre> <pre><code>(-1.0102513998296843,\n 0.8169597001703157,\n -1.101215392464636,\n 1.0497984175353638)\n</code></pre> <p></p> <p>The angle of each vector can be computed by taking the arctan of the x and y components of vector 1 and 2.  Plot the result.</p> <pre><code>theta_v1 = numpy.arctan2(v1[:,1],v1[:,0])\ntheta_v2 = numpy.arctan2(v2[:,1],v2[:,0])\nplt.plot(t,theta_v1)\nplt.plot(t,theta_v2)\n</code></pre> <pre><code>[&lt;matplotlib.lines.Line2D at 0x7fe414d2c350&gt;]\n</code></pre> <p></p> <p>The issue is that the theta value recovered jumps when it wraps around \\(0\\) or \\(2\\pi\\). We can massage the data to \"unwrap this value</p> <pre><code>def unwrap(theta,period):\n    theta2 = [theta[0]]\n    last_theta = theta[0]\n    mem = 0\n\n    for t_ii,item in zip(t[1:],theta[1:]):\n        dt = (item - last_theta)\n        if dt&gt;(period/2):\n            mem-=period\n        if dt&lt;(-period/2):\n            mem+=period\n        theta2.append(item+mem)\n        last_theta = item\n\n    theta2 = numpy.array(theta2)\n    return theta2\n</code></pre> <pre><code>theta_v1_u = unwrap(theta_v1,2*math.pi)\ntheta_v2_u = unwrap(theta_v2,2*math.pi)\n</code></pre> <p>By subtracting the initial values for theta_1 and theta_2 we obtain two guesses for the same angle value.</p> <pre><code>theta_v1_u-=theta_v1_u.min()\ntheta_v2_u-=theta_v2_u.min()\n</code></pre> <p>Plot the corrected values</p> <pre><code>plt.plot(t,theta_v1_u)\nplt.plot(t,theta_v2_u)\n</code></pre> <pre><code>[&lt;matplotlib.lines.Line2D at 0x7fe414cf57d0&gt;]\n</code></pre> <p></p> <p>Compute the average of these two samples.  Adding even more points to this analysis would give us a more accurate measurement of theta.</p> <pre><code>theta_u = (theta_v1_u+theta_v2_u)/2\nplt.plot(t,theta_v1_u,'b:')\nplt.plot(t,theta_v2_u,'b:')\nplt.plot(t,theta_u,'r-')\n</code></pre> <pre><code>[&lt;matplotlib.lines.Line2D at 0x7fe4142efcd0&gt;]\n</code></pre> <p></p> <p>Out of curiosity, what is the maximum value of our guessed value of theta?</p> <pre><code>theta_u.max()*180/math.pi\n</code></pre> <pre><code>180.13261077941166\n</code></pre> <p>Wow!</p>"},{"location":"tutorials/dynamics/motors/06-servo_data_collection/#guessing-the-input-signal","title":"Guessing the input signal","text":"<p>Because of the informal nature of the experiment, it is hard to capture the actual PWM signal and compare against the output motion of our servo.  To make a good guess, however, we can reconstruct the step signal sent by the ESP32 and place it one time-step in front of any observed motion in the frames.</p> <p>First, we make a filter to only look at data values less than a second, just to zoom in on the first transition</p> <pre><code>time_filter = t&lt;1\n</code></pre> <p>We then find the index of the first point in time where theta starts moving in order to guess the time-delay of our first command signal.  We find it hueristically by finding the theta value that more than 1% of the full range of observed thetas from min(theta), starting at t=0.  We save that index as <code>jj</code>, and identify the starting time, <code>t_0</code>, using the index</p> <pre><code>jj = theta_u[time_filter] &gt; (theta_u[time_filter].max() - theta_u[time_filter].min())*.01 + theta_u[time_filter].min()\nt_0_kk = (t[time_filter][jj]).idxmin() \nt_0 = t[t_0_kk]\nt_0\n</code></pre> <pre><code>0.5015946\n</code></pre> <p>We then plot the moment motion starts on top of the adjusted theta values:</p> <pre><code>plt.plot(t[time_filter],theta_u[time_filter])\nplt.plot(t[t_0_kk],theta_u[t_0_kk],'ro')\n</code></pre> <pre><code>[&lt;matplotlib.lines.Line2D at 0x7fe414d22810&gt;]\n</code></pre> <p></p> <p>This means the signal must have been sent at least one time-step before this.  Maybe more, but the best-case scenario for lag would be one frame of video.</p> <p>Lets create a function that can generate a step function with the following parameters</p> <ul> <li><code>A</code>: amplitude</li> <li><code>f</code>: frequency</li> <li><code>w</code>: width (as a fraction of the full time step) of the positive portion of the square wave</li> <li><code>b</code>: y-offset</li> </ul> <pre><code>A = math.pi\nf = .5\nw = .5\nb = 0\n\ndef square(t,A,f,w,b,t_0):\n    y = (t-t_0)*f \n    y = y%1\n    y = (y&lt;w)*1\n    y = A*y +b\n    return y\n</code></pre> <pre><code>y = square(t,A,f,w,b,t_0)\nplt.plot(t[time_filter],theta_u[time_filter])\nplt.plot(t[time_filter],y[time_filter])\nplt.plot(t[t_0_kk],theta_u[t_0_kk],'ro')\n</code></pre> <pre><code>[&lt;matplotlib.lines.Line2D at 0x7fe414371a10&gt;]\n</code></pre> <p></p> <p>Now lets check our results over all the collected data</p> <pre><code>plt.plot(t,y)\nplt.plot(t,theta_u)\n</code></pre> <pre><code>[&lt;matplotlib.lines.Line2D at 0x7fe41414f850&gt;]\n</code></pre> <p></p> <p>it looks good!  Now let's save some of our work for use in other code</p> <pre><code>data = {}\ndata['A'] = A\ndata['f'] = f\ndata['b'] = b\ndata['w'] = w\ndata['t'] = t\ndata['t_0'] = t_0\ndata['theta_u'] = theta_u\nimport yaml\nwith open('servo_data_collection.yml','w') as f:\n    yaml.dump(data,f)\n</code></pre>"},{"location":"tutorials/dynamics/motors/07-servo-fitting/","title":"Fitting a Servo's Model Parameters to Experimental Data","text":"<p>Import required packages and modules</p> <pre><code>import matplotlib.pyplot as plt\nimport numpy\nimport math\nimport yaml\nimport mujoco\nimport numpy\nimport mediapy as media\n</code></pre> <p>Create a square-wave function for emulating the control signal sent to the pwm model</p> <pre><code>def square(t,A,f,w,b,t_0):\n    y = (t-t_0)*f \n    y = y%1\n    y = (y&lt;w)*1\n    y = A*y +b\n    return y\n</code></pre> <p>Motor Parameters were taken from the web, the rest caculated using steady-state motor equations</p> <pre><code>Vnom = 6\nR = Vnom/.600\nG = 55.5\nt_stall = 15/100/G\ni_stall = .6\ni_nl = .2\nw_nl = .66*1000*2*math.pi/180*G\n\nkt = t_stall/ i_stall\n# kv= Vnom/w_nl\nke = kt\n\nb = kt*i_nl/w_nl\n\nts = 1e-4\n</code></pre> <p>Pull the servo's \"massaged\" experimental data.</p> <pre><code>with open('servo_data_collection.yml') as f:\n    servo_data = yaml.load(f,Loader=yaml.Loader)        \n</code></pre> <p>Convert to numpy, check the shape</p> <pre><code>t_data = numpy.array(servo_data['t'])\nt_data.shape\n</code></pre> <pre><code>(214,)\n</code></pre> <p>determine the timestep of the data</p> <pre><code>dt_data = (t_data[-1]-t_data[0])/len(t_data)\n</code></pre> <p>convert the theta data to a compatible numpy array and check the shape.  needs to match mujoco's simulation data</p> <pre><code>q_data = numpy.array([servo_data['theta_u']]).T\nq_data.shape\n</code></pre> <pre><code>(214, 1)\n</code></pre> <p>create the desired control signal (just for plotting)</p> <pre><code>desired = square(t_data,A=servo_data['A'],f = servo_data['f'],w=servo_data['w'],b=servo_data['b'],t_0=servo_data['t_0'])    \n</code></pre> <p>define my xml template and format, supplying the time constant from above variables</p> <pre><code>xml_template = \"\"\"\n&lt;mujoco&gt;\n    &lt;option timestep=\"{ts}\"/&gt;\n    &lt;!--\n    &lt;option integrator=\"Euler\"/&gt;\n    &lt;option tolerance=\"1e-8\"/&gt;\n    &lt;option solver=\"CG\"/&gt;\n    --&gt;\n    &lt;compiler angle=\"degree\" /&gt;\n\n    &lt;worldbody&gt;\n        &lt;light name=\"top\" pos=\"0 0 10\"/&gt;\n        &lt;body name=\"body_1\" pos=\"0 0 0\" axisangle=\"1 0 0 0\"&gt;\n            &lt;joint name=\"joint_1\" type=\"hinge\" axis=\"1 0 0\" pos=\"0 0 0\"/&gt;\n            &lt;geom type=\"cylinder\" size=\".00725 .024\" pos=\"0 0 0\" rgba=\"0 1 1 1\" mass=\".016\"/&gt;\n            &lt;geom type=\"box\" size=\".005 .005 .005\" pos=\"0 0 .024\" rgba=\"0 1 1 1\" mass=\"0\"/&gt;\n        &lt;/body&gt;\n    &lt;/worldbody&gt;\n&lt;actuator&gt;\n    &lt;motor name=\"motor_1\" joint=\"joint_1\"/&gt;\n&lt;/actuator&gt;\n&lt;/mujoco&gt;\n\"\"\"\n\nxml = xml_template.format(ts = ts)\n</code></pre> <p>create my model, data and renderer and a function that runs the model, changing the kp and b values as needed.</p> <pre><code># xml = xml_template.format()\n\nmodel = mujoco.MjModel.from_xml_string(xml)\ndata = mujoco.MjData(model)\nrenderer = mujoco.Renderer(model)\n\ndef run_sim(kp,b_act,render=False):\n\n    # kp = 100\n    V_control = 5\n    # b_act = b*5\n\n    def mycontroller1(model, data):\n        w = data.qvel[0]\n        actual = data.qpos[0]\n\n        t = data.time\n        desired = square(t,A=servo_data['A'],f = servo_data['f'],w=servo_data['w'],b=servo_data['b'],t_0=servo_data['t_0'])\n        error = desired-actual\n        V = kp*error\n        if V&gt;V_control: V=V_control\n        if V&lt;-V_control: V=-V_control\n        torque = (kt*(V-(ke)*w*G)/R-b_act*w*G)*G\n\n        data.ctrl = [torque]\n        return\n\n    try:\n        mujoco.set_mjcb_control(mycontroller1)\n\n        duration = t_data[-1]  # (seconds)\n        framerate = 30  # (Hz)\n        data_rate = 1/dt_data\n\n        q = []\n        w = []\n        t = []\n        frames = []\n\n        mujoco.mj_resetData(model, data)\n\n        while data.time &lt; duration:\n            # print(data.time)\n            mujoco.mj_step(model, data)\n            if len(frames) &lt; data.time * framerate:\n                renderer.update_scene(data)\n                pixels = renderer.render()\n                frames.append(pixels)\n            if len(t) &lt; data.time * data_rate:\n                # print(data.time)\n                q.append(data.qpos.copy())\n                w.append(data.qvel.copy())\n                t.append(data.time)\n        if render:\n            media.show_video(frames, fps=framerate)\n\n        mujoco.set_mjcb_control(None)\n\n        t = numpy.array(t)\n        q = numpy.array(q)\n        q = q[:len(q_data)]\n\n    except:\n\n        mujoco.set_mjcb_control(None)\n\n    return t, q\n</code></pre> <p>Run the model and output the time / joint values</p> <pre><code>t,q = run_sim(kp = 11,b_act = b,render=True)\n</code></pre>        This browser does not support the video tag.        <p>plot the results.  My guess was pretty good!</p> <pre><code>a2 = plt.plot(t_data,desired)\na3  = plt.plot(t_data,q_data)\na1 = plt.plot(t_data,q)\nplt.legend(a1+a2+a3,['sim','control','actual'])\nplt.show()\n\nerror = q-q_data\nplt.plot(t_data,error)\n</code></pre> <p></p> <pre><code>[&lt;matplotlib.lines.Line2D at 0x7f4eef727e10&gt;]\n</code></pre> <p></p> <p>import scipy.optimize and a function that your minimize function will call.  It will run the sim and compare the sim data from the experimental data, find the error, and return the sum of squared error over time</p> <pre><code>import scipy.optimize as so\n\ndef fun(vars):\n\n    k,b = vars\n    t,q = run_sim(k,b)\n\n\n    error = q-q_data\n    error = error**2\n    error = error.sum()\n    error = error**.5\n    print(k,b,error)\n    return error\n</code></pre> <p>test it.  my guess has an error of ~3.  Try other values, see what you can get!</p> <pre><code>fun([11,b])\n</code></pre> <pre><code>11 7.045839391367083e-07 2.9652729553962214\n\n\n\n\n\n2.9652729553962214\n</code></pre> <p>I found many of the algorithms had trouble converging.  I had to add bounds and play with the tolerances</p> <pre><code>results = so.minimize(fun,x0=[11,b*1],method='nelder-mead',bounds = ((1,100),(b*.1,b*10)),options={'xatol':1e-2,'fatol':1e-2})\n</code></pre> <pre><code>11.0 7.045839391367083e-07 2.9652729553962214\n11.55 7.045839391367083e-07 2.9833304695522416\n11.0 7.398131360935438e-07 2.853939667350909\n10.45 7.398131360935438e-07 2.8340240025364047\n9.899999999999999 7.574277345719615e-07 2.7566659847886057\n9.899999999999999 7.92656931528797e-07 2.648542191400336\n9.349999999999998 8.366934277248414e-07 2.4919150446852827\n8.249999999999996 8.543080262032591e-07 2.382017205558718\n6.874999999999993 9.115554712581168e-07 2.1282281140304176\n6.324999999999992 9.908211644109967e-07 1.8939247992459096\n4.537499999999987 1.1075178793305145e-06 1.6483661348368577\n2.0624999999999822 1.1823799228637897e-06 4.038692986156479\n7.528124999999994 9.231150515095785e-07 2.1463938311471127\n3.884374999999986 1.0959582990790525e-06 1.7413911736050238\n1.5468749999999805 1.2919207071514502e-06 6.720505664562986\n5.542968749999989 1.0066467802314502e-06 1.8032422208031254\n2.878906249999984 1.1968293981781169e-06 2.455951934970083\n4.876953124999988 1.054192434718117e-06 1.6946663119564007\n5.530078124999989 1.065752014969579e-06 1.6986599568883545\n5.1186523437499885 1.0733035859969473e-06 1.6732165721664272\n4.779199218749989 1.126629030609345e-06 1.6201015759771107\n4.73032226562499 1.162847328554959e-06 1.600660019659528\n4.1491699218749885 1.197061621888526e-06 1.6880473448270652\n4.8762817382812385 1.104243094969842e-06 1.636560440547679\n5.06910400390624 1.1595725441942863e-06 1.5833312677493303\n5.3349060058593665 1.1855998766261722e-06 1.5567963227392423\n5.188946533203118 1.2442041102112892e-06 1.5375345982018673\n5.3452789306640565 1.314184617832013e-06 1.5256138345806922\n5.949862670898433 1.3369371659032263e-06 1.4851608014754123\n6.559632873535154 1.4239820845773597e-06 1.4824451981579465\n6.570005798339844 1.5525668257832006e-06 1.6124231753382248\n5.643680953979485 1.2773416139154293e-06 1.5035560959661443\n6.858034896850583 1.387139080660776e-06 1.4553176577633067\n7.6144128799438455 1.4236163120751573e-06 1.4485105199412236\n8.530364799499514 1.5702567827370878e-06 1.5503549055629644\n6.365351915359493 1.350570406120844e-06 1.4666932813637714\n7.420131921768185 1.3502046336186415e-06 1.444659122522142\n7.8503814458847 1.3133159081392822e-06 1.458661666701295\n8.669192886352537 1.423250539572955e-06 1.4379320627103842\n9.82111337184906 1.4595906062990107e-06 1.4442603505610823\n8.474911928176876 1.349838861116439e-06 1.4449621143211928\n8.259787166118619 1.3682832238561186e-06 1.4390078432209488\n9.508848130702969 1.441329129810432e-06 1.439572435501425\n8.986669078469273 1.4185480057624845e-06 1.4364100643689328\n9.396074798703191 1.4735153214793206e-06 1.4517730858334235\n8.543859074264763 1.394591248261919e-06 1.4359952918713517\n8.861335266381499 1.3898887144514486e-06 1.436445233558006\n8.813299671374258 1.3982291707318252e-06 1.4357867461306841\n8.370489667169746 1.3742724132312596e-06 1.4379987551910312\n8.832624225644391 1.4074791076296781e-06 1.4357828257328427\n9.102064822753885 1.4111170300995843e-06 1.435832306785471\n8.962513385631604 1.406985584640168e-06 1.4357177935539072\n8.98183793990174 1.416235521538021e-06 1.436189755051455\n8.855434238506128 1.4027307584333741e-06 1.4356984938441004\n8.985323398493339 1.4022372354438639e-06 1.4357507108770498\n8.947148605281102 1.4035477034903172e-06 1.4357060905272716\n8.840069458155623 1.3992928772835233e-06 1.4357589227099037\n8.93190240376261 1.4050624078010069e-06 1.4356978410691354\n8.840188036987636 1.404245462744064e-06 1.4357046248569603\n8.866928179061002 1.4040710229306274e-06 1.4356965907154677\n8.943396344317485 1.4064026722982602e-06 1.4357095833668896\n8.877424764958967 1.4036487368995958e-06 1.4356947053237454\n8.812450540257359 1.4026573520292163e-06 1.4357066291471396\n8.902039437886298 1.4044611438580592e-06 1.4356948571144639\n8.912536023784263 1.4040388578270276e-06 1.435695095874878\n8.901134062603449 1.4040468991029276e-06 1.4356942873999534\n8.876519389676115 1.4032344921444642e-06 1.435695622383431\n8.895659425833752 1.4041544809296605e-06 1.4356942533206694\n8.919368723478236 1.4045526431329921e-06 1.4356955674751715\n8.887910754588784 1.4038747134579448e-06 1.4356942508157549\n8.882436117819088 1.4039822952846779e-06 1.4356945167377293\n8.89645957640736 1.4040307481483652e-06 1.4356941823291334\n</code></pre> <p>Check the final error.  Better than when I started!</p> <pre><code>print(results)\n</code></pre> <pre><code>       message: Optimization terminated successfully.\n       success: True\n        status: 0\n           fun: 1.4356941823291334\n             x: [ 8.896e+00  1.404e-06]\n           nit: 36\n          nfev: 72\n final_simplex: (array([[ 8.896e+00,  1.404e-06],\n                       [ 8.888e+00,  1.404e-06],\n                       [ 8.896e+00,  1.404e-06]]), array([ 1.436e+00,  1.436e+00,  1.436e+00]))\n</code></pre> <p>Now run my simulation with the results of the optimization</p> <pre><code>t,q = run_sim(*results.x,render=True)\n</code></pre>        This browser does not support the video tag.        <p>Plot the results</p> <pre><code>a2 = plt.plot(t_data,desired)\na3  = plt.plot(t_data,q_data)\na1 = plt.plot(t_data,q)\nplt.legend(a1+a2+a3,['sim','control','actual'])\nplt.show()\n\nerror = q-q_data\nplt.plot(t_data,error)\n</code></pre> <p></p> <pre><code>[&lt;matplotlib.lines.Line2D at 0x7f4e523b1650&gt;]\n</code></pre> <p></p>"},{"location":"tutorials/dynamics/motors/07-servo-fitting/#external-references","title":"External References","text":"<ul> <li>https://www.princeton.edu/~mae412/TEXT/NTRAK2002/292-302.pdf</li> <li>https://www.auselectronicsdirect.com.au/assets/brochures/TA0132.pdf</li> <li>https://components101.com/sites/default/files/component_datasheet/SG90%20Servo%20Motor%20Datasheet.pdf</li> <li>https://www.researchgate.net/publication/353754375</li> <li>https://www.kjell.com/globalassets/mediaassets/701916_87897_datasheet_en.pdf?ref=4287817A7A</li> <li>https://www.mpja.com/download/31002md%20data.pdf</li> <li>http://www.ee.ic.ac.uk/pcheung/teaching/DE1_EE/stores/sg90_datasheet.pdf</li> </ul>"},{"location":"tutorials/dynamics/scaling/","title":"Scaling Simulations","text":"<pre><code>import os\nimport mujoco\nimport numpy\nimport mediapy as media\nimport matplotlib.pyplot as plt\nimport idealab_tools.units as units\n</code></pre> <pre><code>xml_template = \"\"\"\n&lt;mujoco&gt;\n    &lt;option gravity=\"0 0 -{g:e}\" /&gt;\n    &lt;worldbody&gt;\n        &lt;light name=\"top\" pos=\"0 0 {l:e}\"/&gt;\n        &lt;body name=\"A\" pos=\"0 0 0\"&gt;\n            &lt;joint name=\"j1\" type=\"hinge\" axis=\"0 1 0\" pos=\"0 0 0\" stiffness=\"{k:e}\" damping=\"{b:e}\"/&gt;\n            &lt;geom type=\"box\" size=\"{l2:e} {w2:e} {w2:e}\" pos=\"{l2:e} 0 0\" rgba=\"1 0 0 1\"/&gt;\n            &lt;inertial pos=\"{l2:e} 0 0\" mass=\"{m:e}\" diaginertia=\"{ixx:e} {iyy:e} {izz:e}\" /&gt;\n            &lt;body name=\"B\" pos=\"{l:e} 0 0\"&gt;\n                &lt;joint name=\"j2\" type=\"hinge\" axis=\"0 1 0\" pos=\"0 0 0\" stiffness=\"{k}\" damping=\"{b}\"/&gt;\n                &lt;geom type=\"box\" size=\"{l2:e} {w2:e} {w2:e}\" pos=\"{l2:e} 0 0\" rgba=\"1 0 0 1\"/&gt;\n                &lt;inertial pos=\"{l2:e} 0 0\" mass=\"{m:e}\" diaginertia=\"{ixx:e} {iyy:e} {izz:e}\"/&gt;\n            &lt;/body&gt;\n        &lt;/body&gt;\n    &lt;/worldbody&gt;\n&lt;/mujoco&gt;\n\"\"\"\n</code></pre> <pre><code>units.Unit.set_scaling(meter=1)\n\ng = 9.81*units.acceleration\nk = 100*units.rotational_stiffness\nb = 1*(units.torque/units.rotational_speed)\nm = 1*units.mass\nl = 1*units.length\nw = .1*units.length\nixx = 1*units.inertia\niyy = 1*units.inertia\nizz = 1*units.inertia\ns1 = 1*units.length\n</code></pre> <pre><code>xml = xml_template.format(k=k,b=b,m=m,l=l,l2=l/2,w2 = w/2,ixx = ixx,iyy=iyy,izz=izz,g=g)\nprint(xml)\n</code></pre> <pre><code>&lt;mujoco&gt;\n    &lt;option gravity=\"0 0 -9.810000e+00\" /&gt;\n    &lt;worldbody&gt;\n        &lt;light name=\"top\" pos=\"0 0 1.000000e+00\"/&gt;\n        &lt;body name=\"A\" pos=\"0 0 0\"&gt;\n            &lt;joint name=\"j1\" type=\"hinge\" axis=\"0 1 0\" pos=\"0 0 0\" stiffness=\"1.000000e+02\" damping=\"1.000000e+00\"/&gt;\n            &lt;geom type=\"box\" size=\"5.000000e-01 5.000000e-02 5.000000e-02\" pos=\"5.000000e-01 0 0\" rgba=\"1 0 0 1\"/&gt;\n            &lt;inertial pos=\"5.000000e-01 0 0\" mass=\"1.000000e+00\" diaginertia=\"1.000000e+00 1.000000e+00 1.000000e+00\" /&gt;\n            &lt;body name=\"B\" pos=\"1.000000e+00 0 0\"&gt;\n                &lt;joint name=\"j2\" type=\"hinge\" axis=\"0 1 0\" pos=\"0 0 0\" stiffness=\"100\" damping=\"1\"/&gt;\n                &lt;geom type=\"box\" size=\"5.000000e-01 5.000000e-02 5.000000e-02\" pos=\"5.000000e-01 0 0\" rgba=\"1 0 0 1\"/&gt;\n                &lt;inertial pos=\"5.000000e-01 0 0\" mass=\"1.000000e+00\" diaginertia=\"1.000000e+00 1.000000e+00 1.000000e+00\"/&gt;\n            &lt;/body&gt;\n        &lt;/body&gt;\n    &lt;/worldbody&gt;\n&lt;/mujoco&gt;\n</code></pre> <pre><code>model = mujoco.MjModel.from_xml_string(xml)\ndata = mujoco.MjData(model)\nrenderer = mujoco.Renderer(model)\n</code></pre> <pre><code>duration = 10  # (seconds)\nframerate = 30  # (Hz)\n</code></pre> <pre><code>xyz = []\nt = []\nframes = []\nmujoco.mj_resetData(model, data)\n\nwhile data.time &lt; duration:\n    mujoco.mj_step(model, data)\n    xyz.append(data.xpos.copy())\n    t.append(data.time)\n    if len(frames) &lt; data.time * framerate:\n        renderer.update_scene(data)\n        pixels = renderer.render()\n        frames.append(pixels)\n\nxyz = numpy.array(xyz)\n</code></pre> <pre><code>media.show_video(frames, fps=framerate)\n</code></pre>        This browser does not support the video tag.        <pre><code>units.Unit.set_scaling(meter=1e-5)\n\ng = 9.81*units.acceleration\nk = 100*units.rotational_stiffness\nb = 1*(units.torque/units.rotational_speed)\nm = 1*units.mass\nl = 1*units.length\nw = .1*units.length\nixx = 1*units.inertia\niyy = 1*units.inertia\nizz = 1*units.inertia\ns2 = 1*units.length\n</code></pre> <pre><code>xml = xml_template.format(k=k,b=b,m=m,l=l,l2=l/2,w2 = w/2,ixx = ixx,iyy=iyy,izz=izz,g=g)\n</code></pre> <pre><code>model = mujoco.MjModel.from_xml_string(xml)\ndata = mujoco.MjData(model)\nrenderer = mujoco.Renderer(model)\n</code></pre> <pre><code>duration = 10  # (seconds)\nframerate = 30  # (Hz)\n</code></pre> <pre><code>xyz2 = []\nt2 = []\nframes = []\nmujoco.mj_resetData(model, data)\n\nwhile data.time &lt; duration:\n    mujoco.mj_step(model, data)\n    xyz2.append(data.xpos.copy())\n    t2.append(data.time)\n    if len(frames) &lt; data.time * framerate:\n        renderer.update_scene(data)\n        pixels = renderer.render()\n        frames.append(pixels)\n\nxyz2 = numpy.array(xyz2)\n</code></pre> <pre><code>plt.plot(t,(xyz/s1)[:,-1,2])\nplt.plot(t,(xyz2/s2)[:,-1,2])\n</code></pre> <pre><code>[&lt;matplotlib.lines.Line2D at 0x7f6068743a90&gt;]\n</code></pre>"},{"location":"tutorials/esp32/esp32-concepts/","title":"ESP32 and MicroPython","text":""},{"location":"tutorials/esp32/esp32-concepts/#overview-of-the-esp32-devkit-doit-v1","title":"Overview of the ESP32 DevKit DOIT V1","text":""},{"location":"tutorials/esp32/esp32-concepts/#pinouts-schematics","title":"Pinouts / Schematics","text":"<ul> <li>from https://randomnerdtutorials.com/getting-started-with-esp32/</li> </ul>"},{"location":"tutorials/esp32/esp32-concepts/#board-layout","title":"Board Layout","text":""},{"location":"tutorials/esp32/esp32-concepts/#mount-your-esp32-on-your-breadboard","title":"Mount your ESP32 on your Breadboard","text":""},{"location":"tutorials/esp32/esp32-concepts/#esp32-links","title":"ESP32 Links","text":"<ul> <li>Espressif<ul> <li>ESP32-WROOM-32 Datasheet</li> <li>ESP32-Devkit-C Page</li> <li>Devkit Technical Documents</li> </ul> </li> <li>External Pinout Resources<ul> <li>https://johnmu.com/picking-esp32-dev-board/</li> <li>https://www.etechnophiles.com/esp32-dev-board-pinout-specifications-datasheet-and-schematic/</li> <li>https://www.studiopieters.nl/esp32-pinout/</li> </ul> </li> </ul>"},{"location":"tutorials/esp32/esp32-concepts/#micropython-intro","title":"MicroPython Intro","text":""},{"location":"tutorials/esp32/esp32-concepts/#what-is-python","title":"What is Python?","text":"<ul> <li>Easy to learn programming language</li> <li>Interpreted Language - write code and have it execute without compiling!</li> <li>Simple formatting: mostly spaces, few extraneous characters, similar basic keywords as other languages, easy access to complex data types</li> <li>An extensible system of software \u201cpackages\u201d<ul> <li>use pip/pypi to install</li> <li>install straight from github!</li> </ul> </li> </ul>"},{"location":"tutorials/esp32/esp32-concepts/#is-there-anything-else","title":"Is there anything else?","text":"<ul> <li>\u201cDynamically Typed\u201d<ul> <li>Variables don\u2019t need to be declared as one type or another. You simply set them equal to something and they become that data type.</li> </ul> </li> <li>Object-oriented<ul> <li>concept of classes and inheritance</li> </ul> </li> <li>\u201cPublic\u201d by definition<ul> <li>data is not easily hidden.</li> <li>data is accessible by anything</li> </ul> </li> </ul>"},{"location":"tutorials/esp32/esp32-concepts/#what-is-micropython","title":"What is MicroPython?","text":"<ul> <li>A slimmed down, limited version of Python that fits within the program space of a little microcontroller</li> <li>The system of software packages written for it</li> <li>The same idea of an interpreter\u2026 you just access it over USB.</li> </ul>"},{"location":"tutorials/esp32/esp32-concepts/#what-is-vscode","title":"What is VSCode?","text":"<ul> <li>A powerful code editor</li> <li>Plugins for communicating to your device</li> </ul>"},{"location":"tutorials/esp32/esp32-concepts/#python-interpreter","title":"Python Interpreter","text":"<ul> <li>Simple program that runs scripts or typed commands.</li> <li>A lot like bash, powershell, or cmd, only cross-platform and independent of the operating system.</li> </ul>"},{"location":"tutorials/esp32/esp32-concepts/#ok-so-how-do-i-get-started","title":"Ok, so how do I get started?","text":"<ul> <li>Install Miniconda</li> <li>Get ESP32 Working<ul> <li>Install Thonny Packages</li> <li>Install USB Device Drivers</li> <li>Flash the ESP32 with MicroPython over USB</li> </ul> </li> <li>Start writing code\u2026</li> </ul>"},{"location":"tutorials/esp32/esp32-concepts/#working-with-thonny","title":"Working With Thonny","text":"<ul> <li>See this Tutorial</li> </ul>"},{"location":"tutorials/esp32/esp32-concepts/#python-tutorials","title":"Python Tutorials","text":"<ul> <li>Basic Data Types</li> <li>Advanced Data Types</li> <li>Operators and Operations</li> <li>Conditional Statements (If-then)</li> <li>Loops (For/While)</li> <li>Functions</li> <li>Classes</li> </ul>"},{"location":"tutorials/esp32/esp32-concepts/#first-esp32-program","title":"First ESP32 Program","text":"<pre><code>from machine import Pin\nfrom time import sleep\n\nled = Pin(2, Pin.OUT)\n\nwhile True:\n    led.value(1)\n    sleep(1)\n    led.value(0)\n    sleep(1)\n</code></pre>"},{"location":"tutorials/esp32/esp32-concepts/#read-adc","title":"Read ADC","text":"<pre><code>from machine import Pin, ADC\nfrom time import sleep\n\npot = ADC(Pin(34))\npot.atten(ADC.ATTN_11DB)       #Full range: 3.3v\n\nwhile True:\n  pot_value = pot.read()\n  print(pot_value)\n  sleep(0.1)\n</code></pre>"},{"location":"tutorials/esp32/esp32-concepts/#esp32-wifi-access-point-and-web-server","title":"ESP32 Wifi Access Point and Web Server","text":"<pre><code># Combination of the following tutorials:\n# https://randomnerdtutorials.com/esp32-esp8266-micropython-web-server/\n# https://randomnerdtutorials.com/micropython-esp32-esp8266-access-point-ap/\n\ntry:\n  import usocket as socket\nexcept:\n  import socket\n\nimport network\n\nimport esp\nesp.osdebug(None)\n\nssid = 'MicroPython-AP-Dan'\npassword = '123456789'\n\nap = network.WLAN(network.AP_IF)\nap.active(True)\nap.config(essid=ssid, password=password)\n\nwhile ap.active() == False:\n  pass\n\nprint('Connection successful')\nprint(ap.ifconfig())\n\n\nfrom machine import Pin\nled = Pin(2, Pin.OUT)\n\n\ndef web_page():\n  if led.value() == 1:\n    gpio_state=\"ON\"\n  else:\n    gpio_state=\"OFF\"\n\n  html = \"\"\"&lt;html&gt;&lt;head&gt; &lt;title&gt;ESP Web Server&lt;/title&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n  &lt;link rel=\"icon\" href=\"data:,\"&gt; &lt;style&gt;html{font-family: Helvetica; display:inline-block; margin: 0px auto; text-align: center;}\n  h1{color: #0F3376; padding: 2vh;}p{font-size: 1.5rem;}.button{display: inline-block; background-color: #e7bd3b; border: none; \n  border-radius: 4px; color: white; padding: 16px 40px; text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}\n  .button2{background-color: #4286f4;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;ESP Web Server&lt;/h1&gt; \n  &lt;p&gt;GPIO state: &lt;strong&gt;\"\"\" + gpio_state + \"\"\"&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=\"/?led=on\"&gt;&lt;button class=\"button\"&gt;ON&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;\n  &lt;p&gt;&lt;a href=\"/?led=off\"&gt;&lt;button class=\"button button2\"&gt;OFF&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\"\"\"\n  return html\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind(('', 80))\ns.listen(5)\n\nwhile True:\n  conn, addr = s.accept()\n  print('Got a connection from %s' % str(addr))\n  request = conn.recv(1024)\n  request = str(request)\n  print('Content = %s' % request)\n  led_on = request.find('/?led=on')\n  led_off = request.find('/?led=off')\n  if led_on == 6:\n    print('LED ON')\n    led.value(1)\n  if led_off == 6:\n    print('LED OFF')\n    led.value(0)\n  response = web_page()\n  conn.send('HTTP/1.1 200 OK\\n')\n  conn.send('Content-Type: text/html\\n')\n  conn.send('Connection: close\\n\\n')\n  conn.sendall(response)\n  conn.close()\n</code></pre>"},{"location":"tutorials/esp32/esp32-concepts/#analog-sensor-reading","title":"Analog Sensor Reading","text":"<pre><code>from machine import Pin, ADC\nfrom time import sleep\n\npot = ADC(Pin(34))\npot.atten(ADC.ATTN_11DB)       #Full range: 3.3v\n\nwhile True:\n  pot_value = pot.read()\n  print(pot_value)\n  sleep(0.1)\n</code></pre>"},{"location":"tutorials/esp32/esp32-concepts/#micropython-esp32-resources","title":"MicroPython / ESP32 Resources","text":"<ul> <li>MicroPython for ESP32 firmware download page</li> <li>ESP32 Micropython Documentation<ul> <li>quickref</li> </ul> </li> <li>Asynchronous micropython-based MQTT repository</li> </ul>"},{"location":"tutorials/esp32/esp32-installation-and-setup/","title":"ESP32 Installation and Setup","text":"","tags":["esp32","python","micropython","thonny"]},{"location":"tutorials/esp32/esp32-installation-and-setup/#install-miniconda-and-packages","title":"Install Miniconda and packages","text":"<p>You need to use Python on your PC to program the ESP32.  This assumes that you already have miniconda installed.  For more instructions, see here for detailed instructions.</p> <ol> <li> <p>Installing Thonny and other Packages: Open up your anaconda environment (start--&gt;anaconda prompt)</p> <ol> <li> <p>(optional) Activate your desired environment <code>conda activate &lt;environment_name&gt;</code>.  </p> <p>You can ignore if you want to install in the base environment</p> </li> <li> <p>type the following to install a prerequisite package</p> <p><code>bash conda install -y -c conda-forge wrapt</code></p> </li> <li> <p>Install the ESP32 commandline flashing tool</p> <p><code>bash pip install esptool</code></p> </li> <li> <p>To install Thonny type the following (This is optional):</p> <p><code>bash pip install thonny</code></p> <p>Note: on Mac, open up terminal or xterm and type <code>pip3 install esptool thonny</code></p> </li> </ol> </li> </ol>","tags":["esp32","python","micropython","thonny"]},{"location":"tutorials/esp32/esp32-installation-and-setup/#install-device-drivers-required-for-windows","title":"Install Device Drivers (Required for Windows)","text":"<p>The device drivers will help your computer recognize the ESP32 as a USB Device</p> <ol> <li> <p>Install Silabs cp210x driver (windows download)</p> <p>This step is required if the device is not recognized as a virtual COM port.</p> <p></p> <p></p> <p></p> <p></p> <p></p> </li> </ol>","tags":["esp32","python","micropython","thonny"]},{"location":"tutorials/esp32/esp32-installation-and-setup/#flashing-the-esp32-firmware-for-micropython","title":"Flashing the ESP32 Firmware for MicroPython","text":"<ol> <li>download firmware</li> </ol> <p>Note: For this class you must use 1.20 or greater.</p>","tags":["esp32","python","micropython","thonny"]},{"location":"tutorials/esp32/esp32-installation-and-setup/#option-1-thonny-approach","title":"Option 1: Thonny approach","text":"<p>Requires thonny to be installed, see above</p> <ol> <li> <p>open cmd and type <code>thonny</code></p> <p></p> </li> <li> <p>open up tools--&gt;options, select the \"interpreter\" tab and ensure that \"Micropython (ESP32)\" is selected.  Select the \"Silicon Labs CP210X USB to UART Bridge Com(XY)\" down below.</p> <p></p> <p></p> <p></p> <p></p> </li> <li> <p>Before selecting ok, in the bottom right hand corner select \"install or update firmware\".  select the right port corresponding to the \"Silicon Labs CP210X USB to UART Bridge Com(XY)\"</p> <p></p> </li> <li> <p>select the firmware you downloaded and hit \"install\".</p> <p></p> <p></p> </li> <li> <p>wait for the install to finish</p> <p></p> </li> <li> <p>Look at the interpreter window.  You should see something similar to:</p> <p>```python MicroPython v1.XX on 20XX-YY-ZZ; ESP32 module with ESP32</p> <p>Type \"help()\" for more information.</p> <p>```</p> <p></p> </li> <li> <p>type <code>print('hello, world!')</code> into the shell and that's it!  You should have a working python interpreter loaded on your ESP32!</p> <p></p> </li> </ol>","tags":["esp32","python","micropython","thonny"]},{"location":"tutorials/esp32/esp32-installation-and-setup/#option-2-command-line-approach-with-esptool","title":"Option 2: Command-line approach with <code>esptool</code>","text":"<p>windows:</p> <pre><code>esptool --chip esp32 --port COM7 erase_flash\n</code></pre> <p>linux:</p> <pre><code>esptool.py --chip esp32 --port /dev/ttyUSB0 erase_flash\n</code></pre> <p>Now flash it using the template below.  Check device manager in windows to identify the appropriate COM port</p> <p>Windows:</p> <pre><code>esptool --chip esp32 --port &lt;serial_port&gt; write_flash -z 0x1000 &lt;esp32-X.bin&gt;\n</code></pre> <p>For Example:</p> <pre><code>esptool --chip esp32 --port COM7 write_flash -z 0x1000 Downloads/esp32-20220618-v1.19.1.bin\n</code></pre> <p>Linux:</p> <pre><code>esptool.py --chip esp32 --port &lt;serial_port&gt; write_flash -z 0x1000 &lt;esp32-X.bin&gt;\n</code></pre> <p>For Example:</p> <pre><code>esptool.py --chip esp32 --port /dev/ttyUSB0 write_flash -z 0x1000 esp32-20220618-v1.19.1.bin\n</code></pre>","tags":["esp32","python","micropython","thonny"]},{"location":"tutorials/esp32/esp32-installation-and-setup/#mac-specific-suggestions","title":"Mac Specific Suggestions","text":"<ul> <li>use terminal or xterm if you have it as Macs do not have powershell</li> <li>use <code>pip3 install ...</code> instead of <code>pip install ...</code> with the most recent flavors of MacOS</li> <li> <p>make sure <code>pip</code> or <code>pip3</code>(Mac) is updated to avoid installation errors</p> <p><code>bash python3 -m pip install --upgrade pip</code></p> </li> <li> <p>Mac doesn't do COM, but can list USB devices.  In your terminal, type:</p> <p><code>bash ls -al /dev/tty.</code></p> <p>then unplug your ESP32 and run the previous command again to see which name for the device is the ESP32</p> </li> <li> <p>when selecting the port, there may be two Silicon Labs CP210X USB to UART Bridge (ESP device name here) devices.  Watch the messages in the terminal to determine the correct selection (obviously, don't use the one that says error/cannot find/etc.)</p> </li> <li>when running the program you may need to press ctrl + c twice within thonny</li> </ul>","tags":["esp32","python","micropython","thonny"]},{"location":"tutorials/esp32/esp32-installation-and-setup/#external-resources","title":"External Resources","text":"<ul> <li>https://micropython.org/download/esp32/</li> <li>https://randomnerdtutorials.com/flashing-micropython-firmware-esptool-py-esp32-esp8266/</li> </ul>","tags":["esp32","python","micropython","thonny"]},{"location":"tutorials/esp32/esp32-installation-and-setup/#issues","title":"Issues","text":"<p>If you install on a computer where you don't have administrative access, it is still possible to install  but you have to remember a couple things:</p> <p>After instlling anaconda, you must add it to your path every time you want to run it.  </p> <ol> <li> <p>Start --&gt; \"cmd\"</p> <p><code>set PATH=C:\\Users\\&lt;MYUSERNAME&gt;\\Miniconda3;C:\\Users\\&lt;MYUSERNAME&gt;\\Miniconda3\\Library\\mingw-w64\\bin;C:\\Users\\&lt;MYUSERNAME&gt;\\Miniconda3\\Library\\usr\\bin;C:\\Users\\&lt;MYUSERNAME&gt;\\Miniconda3\\Library\\bin;C:\\Users\\daukes\\Miniconda3\\Scripts;%PATH%</code></p> <ul> <li>Replace  with your username; confirm the path exists. <li>This step is required every time you load thonny if you installed \"just for me\" or are on an administratively locked pc.</li>","tags":["esp32","python","micropython","thonny"]},{"location":"tutorials/kinematics/01-frames/","title":"Reference Frames","text":""},{"location":"tutorials/kinematics/01-frames/#reference-frames","title":"Reference Frames","text":"<p>When analyzing a system, sometimes it's convenient or simple to represent a system in a specific way.  We all know of the Cartesian system of coordinates which span a three dimensional space, but did you know that there are an infinte number of ways to describe that same space?  Just as we are familiar with the x,y, and z directions, we can use different reference frames to navigate and represent the same coordinates and vectors in different ways.</p> <p>Take the example of your professor standing in front of you, giving a lecture.  If both of you were to stretch your right hand out to your right, you wouldn't be pointing in the same direction.  To get to the door behind you, your professor would need to go forward.  Direction is relative to each of you, based on your frame of reference.</p> <p>Sometimes the ability to select your directional representation is useful in kinematics and dynamics, because depending on the representation, it may take many more or far fewer variables to do so.  For example, when discussing the motion of a vehicle such as a plane or car, it can be useful to describe the forces acting on that vehicle from the perspective of the vehicle, even if you're more interested where the vehicle goes relative to your own perspective standing on the ground.  The vehicle's perspective and the ground's perspective, in terms of their directional components, would be considered separate reference frames.</p> <p>In three-dimensional space, frames provide three orthogonal unit basis vectors, which can be used to construct vectors.  There are infinite ways to describe the same 3D space.</p> <ul> <li>Frames Are<ul> <li>Containers for holding basis vectors</li> </ul> </li> <li>Frames Are Not<ul> <li>Attached to a point in space.  Only hold rotation information</li> </ul> </li> <li>Frames Do Not<ul> <li>Translate.  Only rotate.</li> <li>Have mass.</li> <li>Flex or stretch</li> <li>Have dimensions</li> </ul> </li> </ul>"},{"location":"tutorials/kinematics/01-frames/#inertial-reference-newtonian-frames","title":"Inertial Reference (Newtonian) Frames","text":"<p>Newtonian frames are reference frames that are not accelerating.</p> <p>Newtonian reference frames are useful because many algorithms / expressions (such as the equations for vector derivatives) assume a non-accelerating reference frame.</p> <p>https://en.wikipedia.org/wiki/Inertial_frame_of_reference</p>"},{"location":"tutorials/kinematics/02-basis-vectors/","title":"Basis Vectors","text":""},{"location":"tutorials/kinematics/02-basis-vectors/#basis-vectors","title":"Basis Vectors","text":"<p>A reference frame contains a set of unique basis vectors, which, in linear algebra terms, span an \\(R^3\\) space.  As long as these basis vectors span the space, they are capable of describing any vector within that space.  However, there are some other useful qualities of these basis vectors, which typically make life easier, which must also be enforced when operating on and between vectors.</p> <p>Orthogonal:  The set of basis vectors in a reference frame are orthogonal, or mutually perpendicular to each other.  This means that there are no shared components of vectors; each basis vector is completely independent of each other. </p> <p>A more mathy way to describe this is that </p> \\[\\begin{align}0= &amp;\\hat{b}_1 \\cdot \\hat{b}_2\\\\ =&amp;\\hat{b}_2 \\cdot \\hat{b}_3\\\\ =&amp;\\hat{b}_3 \\cdot \\hat{b}_1\\\\ \\end{align}\\] <p>, where \\(\\hat{b}_1\\), \\(\\hat{b}_2\\), and \\(\\hat{b}_3\\) are the three basis vectors of a reference frame.</p> <p>Normal: Basis vectors in a reference frame are normal, meaning their length is 1, or </p> \\[\\begin{align}1= &amp;\\hat{b}_1 \\cdot \\hat{b}_1\\\\ =&amp;\\hat{b}_2 \\cdot \\hat{b}_2\\\\ =&amp;\\hat{b}_3 \\cdot \\hat{b}_3\\\\ \\end{align}\\] <p>.  In other words, they are unit vectors.</p>"},{"location":"tutorials/kinematics/03-vectors/","title":"Vectors","text":""},{"location":"tutorials/kinematics/03-vectors/#vectors","title":"Vectors","text":""},{"location":"tutorials/kinematics/03-vectors/#what-are-they","title":"What are they?","text":"<p>Vectors are multidimensional geometric entities that indicate a direction and a magnitude in thier respective space.</p> <p>In other words, vectors are linear combinations of basis vectors from one or more reference frames.  When reference frames are defined, their associated basis vectors may then be scaled and added together to create vector expressions.</p> <p>Notation:</p> <ul> <li>Regular vectors use \\(\\vec{v}\\)</li> <li>Unit vectors use \\(\\hat{v}\\)</li> </ul>"},{"location":"tutorials/kinematics/03-vectors/#math","title":"Math","text":"<p>Vectors have a number of general properties.  Below is a list of valid operations and their result.</p> Operation Other Result Commutative Addition vector \\(\\vec{v}+\\vec{v}_{other}\\) y Scalar Multiplication scalar \\(s\\vec{v}\\) y dot vector \\(\\vec{v}_{other} \\cdot \\vec{v}\\) y cross vector \\(\\vec{v}_{other} \\times \\vec{v}\\) n <p>Performing a dot or cross product with vectors composed of different basis vectors does not work unless a relationship can be defined between them, expressing one set of basis vectors in terms of the other.  This can be addressed by defining a relationship between frames through rotations.</p>"},{"location":"tutorials/kinematics/03-vectors/#use-cases","title":"Use Cases","text":"<p>Vectors are used in a number of cases</p> <ul> <li>describing the kinematics of a structure</li> <li>describing the location of important points in space (eg particles, contact, etc)</li> <li>defining the magnitude and direction of a force, or the axis of rotation for a torque.</li> </ul>"},{"location":"tutorials/kinematics/03-vectors/#alternate-basis-vectors","title":"Alternate Basis Vectors","text":"\\[\\vec{v}=c_1\\hat{a}_x+c_2\\hat{a}_y+c_3\\hat{a}_z\\] \\[\\vec{v}=c_4\\hat{b}_x+c_5\\hat{b}_y+c_6\\hat{b}_z\\]"},{"location":"tutorials/kinematics/03-vectors/#implementation","title":"Implementation","text":"<p>Vectors can be represented as a Python class, and can leverage Python's ability to overload mathematical operators with other functionality.  In this way, common operators such as \\(+\\),\\(-\\),\\(*\\) and \\(/\\) take on their own meaning when used in expressions with scalars, vectors, dyads, or dyadics.  One can also use packages like numpy to represent vectors, though you must take care not to linearly combine two vectors defined in different reference frames without first expressing one in terms of the others' basis vectors.</p>"},{"location":"tutorials/kinematics/04-rotations/","title":"Rotations","text":""},{"location":"tutorials/kinematics/04-rotations/#introduction","title":"Introduction","text":"<p>While there may be many ways to navigate and describe the same three-dimensional space using reference frames, it is also necessary and desireable to be able to change representations; this can be useful for interpreting motion from a different perspective, for adding forces or torques to a system using directional components which are a more natural description, or in order to perform mathematical operations between vectors which are represented by different basis vectors.  The method by which we represent one frame to another is through the concept of rotations.  </p> <p>Rotations define the relationship between two frames, whether those frames are explicitly used or not in your problem.  Though rotations are represented as 3x3 matrices, they may be defined  a number of ways, including (axis, angle) representations, quaternions, Euler parameters, Euler vectors, Rodrigues' parameters, etc.  Each representation has its benefits and drawbacks, but at the end of the day, each of these methods is simply a way to define the rotational relationships between reference frames and the basis vectors they contain.  A rotation is a specific type of vector transformation that 1) preserves length and 2), preserves angles between vectors.  Generically, we may think of rotational transformations as permitting the same vector to be represented using a new set of basis vectors, or, in another way of thinking, to actually rotate a body into a new orientation with relation to some other frame.</p> <p>As stated above, rotations can be defined in a number of ways. You may:</p> <ul> <li>supply a 3x3 matrix directly</li> <li>generate one using an axis, angle pair</li> <li>create one by defining one or more simpler rotations along an x,y,or z axis.  </li> </ul> <p>Rotations can also hold variables as well as constants, and can be differentiated.</p>"},{"location":"tutorials/kinematics/04-rotations/#theory","title":"Theory","text":""},{"location":"tutorials/kinematics/04-rotations/#usage","title":"Usage","text":"<p>Rotations are used extensively in kinematics and dynamics.  Some use cases include</p> <ul> <li>Generating basis vectors for use in general-purpose vector creation</li> <li>They can be used with constants to generate fixed changes of reference</li> <li>They can be used conjunction with differentiable state variables to determine rotational velocity and acceleration between frames.</li> </ul> <p>Rotations are typically generated in a sequential order from a fixed, or Newtonian reference frame (a non-accelerating world frame).</p>"},{"location":"tutorials/kinematics/04-rotations/#rotation-tables-matrices","title":"Rotation Tables / matrices","text":"<p>A rotation table more explicitly helps us relate vectors in two frames together.  In this case \\(\\sideset{^{a}}{^{b}}R\\), when multiplied by a vector containing basis vectors in the \\(B\\) frame, results in an expression consisting of basis vectors in the \\(A\\) frame.</p> \\[\\vec{v}_{(a)}=\\sideset{^{a}}{^{b}}R \\vec{v}_{(b)}\\] \\[\\sideset{^{a}}{^{b}}R = \\begin{array}{c|ccc}&amp; b_x&amp; b_y&amp; b_z\\\\ \\hline a_x &amp; a_x \\cdot b_x &amp; a_x \\cdot b_y &amp; a_x \\cdot b_z\\\\ a_y &amp; a_y \\cdot b_x &amp; a_y \\cdot b_y &amp; a_y \\cdot b_z\\\\ a_z &amp; a_z \\cdot b_x &amp; a_z \\cdot b_y &amp; a_z \\cdot b_z \\end{array} = \\begin{bmatrix} r_1 &amp; r_2 &amp; r_3 \\\\ r_4 &amp; r_5 &amp; r_6 \\\\ r_7 &amp; r_8 &amp; r_9 \\\\ \\end{bmatrix} =\\begin{bmatrix}v_1 &amp; v_2 &amp; v_3\\end{bmatrix} =\\begin{bmatrix}v_4 \\\\ v_5 \\\\ v_6\\end{bmatrix} \\]"},{"location":"tutorials/kinematics/04-rotations/#rotations-are-orthonormal","title":"Rotations are Orthonormal<sup>1</sup>","text":"\\[R^TR=RR^T=I\\] \\[R^T=R^{-1}\\]"},{"location":"tutorials/kinematics/04-rotations/#unit-length-row-and-column-vectors","title":"Unit Length row and column vectors","text":"\\[1=|\\vec{v}_1|=|\\vec{v}_2|=|\\vec{v}_3|=|\\vec{v}_4|=|\\vec{v}_5|=|\\vec{v}_6|\\]"},{"location":"tutorials/kinematics/04-rotations/#orthogonal-row-and-column-vectors","title":"Orthogonal row and column vectors","text":"\\[0=\\vec{v}_1 \\times \\vec{v}_2=\\vec{v}_2 \\times \\vec{v}_3=\\vec{v}_3 \\times \\vec{v}_1\\] \\[0=\\vec{v}_4 \\times \\vec{v}_5=\\vec{v}_5 \\times \\vec{v}_6=\\vec{v}_6 \\times \\vec{v}_4\\]"},{"location":"tutorials/kinematics/04-rotations/#simple-rotations-about-major-axes","title":"Simple rotations about major axes","text":"\\[\\sideset{^{a}}{^{b}_x}R (\\theta) = \\begin{array}{c|ccc}&amp; b_x&amp; b_y&amp; b_z\\\\ \\hline a_x &amp; 1&amp;0&amp;0\\\\ a_y &amp; 0 &amp;\\cos{\\theta} &amp; -\\sin{\\theta} \\\\ a_z &amp; 0 &amp; \\sin{\\theta} &amp; \\cos{\\theta} \\end{array} \\] \\[\\sideset{^{a}}{^{b}_y}R (\\theta) = \\begin{array}{c|ccc}&amp; b_x&amp; b_y&amp; b_z\\\\ \\hline a_x &amp;\\cos{\\theta} &amp;0&amp;  \\sin{\\theta} \\\\ a_y &amp;0&amp;1&amp;0\\\\ a_z &amp; -\\sin{\\theta} &amp; 0&amp; \\cos{\\theta} \\end{array} \\] \\[\\sideset{^{a}}{^{b}_z}R (\\theta) = \\begin{array}{c|ccc}&amp; b_x&amp; b_y&amp; b_z\\\\ \\hline a_x &amp;\\cos{\\theta} &amp; -\\sin{\\theta} &amp; 0 \\\\ a_y &amp;\\sin{\\theta} &amp; \\cos{\\theta} &amp; 0 \\\\ a_z &amp;0&amp;0&amp;1 \\\\ \\end{array} \\]"},{"location":"tutorials/kinematics/04-rotations/#compound-rotations","title":"Compound Rotations","text":"<p>Rotations can be chained together and resolved into a single expression:</p> \\[\\sideset{^{a}}{^{c}}R = \\sideset{^{a}}{^{b}}R \\sideset{^{b}}{^{c}}R \\]"},{"location":"tutorials/kinematics/04-rotations/#external-references","title":"External References","text":"<ul> <li>https://en.wikipedia.org/wiki/Rotation_matrix</li> </ul> <ol> <li> <p>https://en.wikipedia.org/wiki/Orthogonal_matrix \u21a9</p> </li> </ol>"},{"location":"tutorials/kinematics/05-expressing/","title":"Expressing Vectors in other Reference Frames","text":""},{"location":"tutorials/kinematics/05-expressing/#expressing-vectors-in-other-reference-frames","title":"Expressing Vectors in other Reference Frames","text":"<p>You cannot combine the coefficients of two vectors together if those coefficients are attached to different sets of basis vectors.</p> \\[u_1\\hat{a}_x + u_2\\hat{b}_y  \\neq (u_1+u_2)\\hat{a}_x \\neq (u_1+u_2)\\hat{b}_y \\] <p>They must instead, be expressed in terms of one or the other basis vectors before you can combine them.  Vectors can be expressed in other reference frames using rotations, which define the length and angle-preserving transformation that describes one set of basis vectors in a different frame's basis vectors.</p>"},{"location":"tutorials/kinematics/05-expressing/#sequence","title":"Sequence","text":"<ol> <li>First, define your frames<ol> <li>Define at least one Fixed (Newtonian) frame</li> </ol> </li> <li>Create Rotations between frames</li> <li>Use frames' basis vectors to compose vectors</li> <li>Operate on them.<ul> <li><code>dot()</code>, <code>cross()</code>, <code>+</code>, <code>-</code>, <code>*</code></li> </ul> </li> </ol>"},{"location":"tutorials/kinematics/05-expressing/#expressing-vectors-in-other-frames","title":"Expressing vectors in other frames","text":"<p>Let's say that </p> \\[p = u_1 \\hat{b}_x + u_2 \\hat{b}_y + u_3 \\hat{b}_z\\] <p>and that</p> \\[\\sideset{^{a}}{^{b}}R = \\begin{bmatrix} r_1 &amp; r_2 &amp; r_3 \\\\ r_4 &amp; r_5 &amp; r_6 \\\\ r_7 &amp; r_8 &amp; r_9 \\\\ \\end{bmatrix}\\] <p>Then</p> \\[\\begin{align}p'=&amp;\\sideset{^{a}}{^{b}}R p\\\\ =&amp;\\begin{bmatrix} r_1 &amp; r_2 &amp; r_3 \\\\ r_4 &amp; r_5 &amp; r_6 \\\\ r_7 &amp; r_8 &amp; r_9 \\\\ \\end{bmatrix} \\begin{bmatrix} u_1\\\\u_2\\\\u_3 \\end{bmatrix}\\\\ =&amp;(r_1u_1+r_2u_2+r_3u_3)a_x \\\\ &amp;+(r_4u_1+r_5u_2+r_6u_3)a_y \\\\ &amp;+(r_7u_1+r_8u_2+r_9u_3)a_z \\end{align}\\]"},{"location":"tutorials/kinematics/05-expressing/#multiple-stages","title":"multiple stages","text":"\\[p_{1(a)} = u_1\\hat{a}_x+u_2\\hat{a}_y+u_3\\hat{a}_z\\] \\[p_{2(b)} = u_4\\hat{b}_x+u_5\\hat{b}_y+u_6\\hat{b}_z\\] \\[p_{3(c)} = u_7\\hat{c}_x+u_8\\hat{c}_y+u_9\\hat{c}_z\\] \\[p_1+p_{2(b)}+p_{3(c)} = p_{1(a)}+\\sideset{^{a}}{^{b}}R p_{2(b)} + \\sideset{^{a}}{^{b}}R \\sideset{^{b}}{^{c}}R p_{3(c)}\\]"},{"location":"tutorials/kinematics/06-quaternions/","title":"Quaternions","text":""},{"location":"tutorials/kinematics/06-quaternions/#complex-numbers","title":"Complex numbers","text":"\\[i^2=-1\\]"},{"location":"tutorials/kinematics/06-quaternions/#quaternion-structure","title":"Quaternion Structure","text":"\\[q = a+bi+cj+dk\\] <p>where \\(i\\), \\(j\\), and \\(k\\) represent an orthogonal set of complex numbers.</p> \\[ii=jj=kk=-1\\]"},{"location":"tutorials/kinematics/06-quaternions/#operations-between-i-j-and-k","title":"Operations between \\(i\\), \\(j\\), and \\(k\\)","text":"\\[ij=-ji=k\\] \\[jk=-kj=i\\] \\[ki=-ik=j\\] \\[ijk=-1\\] \\[\\text{proof: } ijk=(ij)k=(k)k = -1\\] <p>Note:  This means that quaternion complex components are non-commutative, eg $ ij\\neq ji$, $ jk\\neq kj$, $ ki\\neq ik$.</p>"},{"location":"tutorials/kinematics/06-quaternions/#pure-quaternion","title":"Pure Quaternion","text":"<p>A pure quaternion is a quaternion with no real component, eg \\(bi+cj+dk\\)</p>"},{"location":"tutorials/kinematics/06-quaternions/#quaternion-operations","title":"Quaternion Operations","text":"<p>Given</p> \\[q_1 = a+bi +cj+dk\\] \\[q_2 = e+fi +gj+hk\\]"},{"location":"tutorials/kinematics/06-quaternions/#addition","title":"Addition","text":"\\[\\begin{align}q_1+q_2 &amp;= a+bi+cj+dk+e+fi +gj+hk\\\\ &amp;=(a+e)+(b+f)i+(c+g)j+(d+h)k\\end{align}\\]"},{"location":"tutorials/kinematics/06-quaternions/#mutliplication","title":"Mutliplication","text":"\\[\\begin{align}q_1 q_2 = &amp;(a+bi+cj+dk)(e+fi +gj+hk)\\\\ % =&amp;ae+afi+agj+ahk+bie+bifi+bigj+bihk+cje\\\\ %  &amp;+cjfi+cjgj+cjhk+dke+dkfi+dkgj+dkhk\\\\ =&amp;ae+afi+agj+ahk+bei+bfii+bgij+bhik+cej\\\\  &amp;+cfji+cgjj+chjk+dek+dfki+dgkj+dhkk\\\\ % =&amp;ae+afi+agj+ahk+bei-bf+bgk-bhj+cej-cfk\\\\ %  &amp;-cg+chi+dek+dfj-dgi-dh\\\\ % =&amp;ae-bf-cg-dh+afi+bei+chi-dgi+agj-bhj+cej\\\\ %  &amp;+dfj+ahk+bgk-cfk+dek\\\\ =&amp;(ae-bf-cg-dh)+(af+be+ch-dg)i\\\\  &amp;+(ag-bh+ce+df)j+(ah+bg-cf+de)k \\end{align}\\] <p>Note: quaternion multiplication is non-commutative, ie $q_1 q_2 \\neq q_2 q_1 $</p>"},{"location":"tutorials/kinematics/06-quaternions/#complex-conjugate","title":"Complex Conjugate","text":"<p>for \\(q=a+bi+cj+dk\\), its conjugate \\(q^*\\) may be represented by</p> \\[q^*=a-bi-cj-dk\\]"},{"location":"tutorials/kinematics/06-quaternions/#conjugate-properties","title":"Conjugate properties","text":"\\[(q^*)^*=q\\] \\[(pq)^*=q^*p^*\\] \\[qq^*=q^*q=|q|^2\\] \\[|pq|^2=|p|^2|q|^2\\]"},{"location":"tutorials/kinematics/06-quaternions/#inverse","title":"Inverse","text":"\\[q^{-1}=\\frac{q^*}{|q|^2}\\] \\[qq^{-1}=q^{-1}q\\]"},{"location":"tutorials/kinematics/06-quaternions/#unit-quaternions","title":"Unit Quaternions","text":"<p>Unit quaternions observe the additional constraint that their length is 1.  In other words, for a quaternion \\(q_1 = a+bi +cj+dk\\),</p> \\[|q|=qq^* =a^2+b^2+c^2+d^2=1\\] <p>This additional constraint ensures that mutliplying any quaternion by a unit quaternion preserves the length of the result, much like how multiplying an normal matrix with a vector preserves length of the vector.</p>"},{"location":"tutorials/kinematics/06-quaternions/#unit-quaternion-inverse","title":"Unit Quaternion Inverse","text":"<p>For a unit quaternion \\(q\\), its inverse can be simply represented by</p> \\[q^{-1}=q^*\\] <p>because \\(|q|=1\\)</p>"},{"location":"tutorials/kinematics/06-quaternions/#rotations-with-unit-quaternions","title":"Rotations with unit quaternions","text":"<p>A unit quaternion may be used to represent a rotation in 3D space.  For a cartesion point \\((u_1, u_2, u_3)\\) and its pure quaternion representation \\(p=u_1i+u_2j+u_3k\\), the operation</p> \\[\\begin{align}p'=&amp;rpr^{-1}\\\\ =&amp;rpr^*\\end{align}\\] <p>can be used to transform point \\(p\\) to \\(p'\\), or to express a point p in a different frame as p'.  In this expression, \\(r\\) represents a unit quaternion and \\(p'\\) represents the rotated / expressed point.</p>"},{"location":"tutorials/kinematics/06-quaternions/#unit-quaternions-as-half-rotations","title":"Unit quaternions as half rotations","text":"<p>Any unit quaternion can be decomposed in the following manner</p> \\[r=\\cos(\\theta/2)+\\sin(\\theta/2)(u_x i+ u_y j + u_z k)\\] <p>where \\(\\theta\\) represents the rotation about a unit vector \\(\\vec{u}\\), where  \\(u_x\\), \\(u_y\\), and \\(u_z\\) represent the x, y, and z components, with \\(u_x^2+u_y^2+u_z^2=1\\).</p>"},{"location":"tutorials/kinematics/06-quaternions/#constructing-a-rotation-matrix-from-a-unit-quaternion","title":"Constructing a Rotation Matrix from a unit quaternion","text":"<p>For a unit quaternion \\(r=\\cos(\\theta/2)+\\sin(\\theta/2)(u_x i+ u_y j + u_z k)\\),</p> \\[v_1=rir^*\\] \\[v_2=rjr^*\\] \\[v_3=rkr^*\\] \\[R=\\begin{bmatrix} \\text{imag}(v_1) &amp; \\text{imag}(v_2) &amp; \\text{imag}(v_3)\\end{bmatrix}\\]"},{"location":"tutorials/kinematics/06-quaternions/#compound-rotations","title":"Compound Rotations","text":"<p>A point can be rotated using two successive unit quaternions (or expressed in two successive frames) like this:</p> \\[p'=r_1pr_1^*\\] \\[p''=r_2p'r_2^*\\] \\[p''=r_2r_1pr_1^*r_2^*\\]"},{"location":"tutorials/kinematics/06-quaternions/#external-resources","title":"External resources","text":"<ul> <li>https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation</li> <li>https://en.wikipedia.org/wiki/Quaternion</li> </ul>"},{"location":"tutorials/kinematics/07-vector-operations/","title":"Vector Operations","text":""},{"location":"tutorials/kinematics/07-vector-operations/#vector-math","title":"Vector Math","text":""},{"location":"tutorials/kinematics/07-vector-operations/#scalar-multiplication","title":"Scalar Multiplication","text":"\\[k\\vec{a}=\\vec{b}\\]"},{"location":"tutorials/kinematics/07-vector-operations/#negativity","title":"Negativity","text":"\\[\\vec{a}=-\\vec{b}\\]"},{"location":"tutorials/kinematics/07-vector-operations/#addition","title":"Addition","text":"\\[\\vec{c} = \\vec{a}+\\vec{b}\\]"},{"location":"tutorials/kinematics/07-vector-operations/#magnitude-of-a-vector","title":"Magnitude of a Vector","text":"\\[|\\vec{v}|=\\sqrt{\\vec{v}\\cdot\\vec{v}}\\]"},{"location":"tutorials/kinematics/07-vector-operations/#how-many-numbers-in-a-vector","title":"How many numbers in a vector?","text":"<ul> <li> <p>Two Points</p> </li> <li> <p>Spherical Coordinates</p> </li> </ul>"},{"location":"tutorials/kinematics/07-vector-operations/#whats-the-sum","title":"What's the Sum?","text":""},{"location":"tutorials/kinematics/07-vector-operations/#theyre-equivalent","title":"They're Equivalent","text":""},{"location":"tutorials/kinematics/07-vector-operations/#mathematical-properties","title":"Mathematical Properties","text":""},{"location":"tutorials/kinematics/07-vector-operations/#commutivity","title":"Commutivity:","text":"\\[\\vec{u}+\\vec{v}=\\vec{v}+\\vec{u}\\]"},{"location":"tutorials/kinematics/07-vector-operations/#associativity","title":"Associativity:","text":"\\[\\vec{u}+(\\vec{v}+\\vec{w})=(\\vec{u}+\\vec{v})+\\vec{w}\\]"},{"location":"tutorials/kinematics/07-vector-operations/#distributability","title":"Distributability","text":"\\[a(\\vec{u}+\\vec{v})=a\\vec{u}+a\\vec{v}\\]"},{"location":"tutorials/kinematics/07-vector-operations/#dot-product","title":"Dot product","text":"\\[\\vec{v} \\cdot \\vec{w} \\triangleq \\left|\\vec{v}\\right|\\left|\\vec{w}\\right|\\cos{\\theta}\\]"},{"location":"tutorials/kinematics/07-vector-operations/#properties-of-dot-product","title":"Properties of Dot Product","text":""},{"location":"tutorials/kinematics/07-vector-operations/#commutative","title":"Commutative","text":"\\[\\vec{u} \\cdot \\vec{v} = \\vec{v} \\cdot \\vec{u}\\]"},{"location":"tutorials/kinematics/07-vector-operations/#distributive","title":"Distributive","text":"\\[\\vec{u} \\cdot \\left(\\vec{v}+\\vec{w}\\right) = \\vec{u}\\cdot\\vec{v} + \\vec{u}\\cdot\\vec{w}\\]"},{"location":"tutorials/kinematics/07-vector-operations/#cross-product","title":"Cross Product","text":"\\[\\vec{v} \\times \\vec{w} \\triangleq \\left|\\vec{v}\\right|\\left|\\vec{w}\\right|\\sin{\\theta}\\hat{u}\\]"},{"location":"tutorials/kinematics/07-vector-operations/#cross-product-properties","title":"Cross Product Properties","text":"<ul> <li> <p>The cross product can be said to be anticommutative.</p> \\[\\vec{u} \\times \\vec{v} = -\\vec{v} \\times \\vec{u}\\] </li> <li> <p>The cross product operator can be distributed.</p> \\[\\vec{u} \\times \\left(\\vec{v}+\\vec{w}\\right) = \\vec{u}\\times\\vec{v} + \\vec{u}\\times\\vec{w}\\] </li> </ul>"},{"location":"tutorials/kinematics/07-vector-operations/#other-properties","title":"Other Properties","text":"<ul> <li>\\(c\\vec{u}\\times\\vec{v}=\\vec{u}\\times c\\vec{v}=c(\\vec{u}\\times\\vec{v})\\)</li> <li>\\(\\vec{u}\\cdot\\vec{v}\\times\\vec{w}=\\vec{u}\\times\\vec{v}\\cdot\\vec{w}=\\vec{w}\\times\\vec{u}\\cdot\\vec{v}\\)</li> <li>\\(\\vec{u}\\times(\\vec{v}\\times\\vec{w})\\neq(\\vec{u}\\times\\vec{v})\\times\\vec{w}\\)</li> <li>\\(\\vec{u}\\times(\\vec{v}\\times\\vec{w})=\\vec{v}(\\vec{u}\\cdot\\vec{w})-\\vec{w}(\\vec{u}\\cdot\\vec{v})\\)</li> </ul>"},{"location":"tutorials/kinematics/07-vector-operations/#no-nos","title":"No-no\u2019s","text":"<ul> <li>Multiply a vector by another vector</li> <li>Equate scalars to vectors</li> <li>Use a cross product on a scalar</li> <li>...lots more</li> </ul>"},{"location":"tutorials/kinematics/07-vector-operations/#extended-expressions-dot-product","title":"Extended Expressions: Dot Product","text":"\\[\\vec{u} \\cdot \\vec{v} = (u_x\\hat{a}_x + u_y\\hat{a}_y+u_z\\hat{a}_z) \\cdot (v_x\\hat{a}_x + v_y\\hat{a}_y+v_z\\hat{a}_z)\\] <p>simplifies to</p> \\[\\vec{u} \\cdot \\vec{v} = u_x v_x +u_y v_y+u_z v_z\\] <p>How?</p>"},{"location":"tutorials/kinematics/07-vector-operations/#extended-expressions-cross-product","title":"Extended Expressions: Cross Product","text":"\\[\\vec{u} \\times \\vec{v} = (u_x\\hat{a}_x + u_y\\hat{a}_y+u_z\\hat{a}_z) \\times (v_x\\hat{a}_x + v_y\\hat{a}_y+v_z\\hat{a}_z)\\] <p>Simplifies to</p> \\[\\vec{u} \\times \\vec{v} = u_x v_y\\hat{a}_z - u_x v_z\\hat{a}_y - u_y v_x\\hat{a}_z + u_y v_z\\hat{a}_x + u_z v_x\\hat{a}_y - u_z v_y\\hat{a}_x\\] <p>How?</p>"},{"location":"tutorials/kinematics/07-vector-operations/#vector-expressions","title":"Vector Expressions","text":"<p>Help measure / express geometric relationships:</p> <ul> <li>Distance between points, lines, and planes:<ul> <li>between two points</li> <li>between a point and a line</li> <li>between two lines</li> <li>between a point and a plane</li> <li>...</li> </ul> </li> <li>Angles between lines / planes<ul> <li>Perpendicular and Parallel Vectors</li> <li>Interior Angles</li> <li>Normals</li> </ul> </li> </ul>"},{"location":"tutorials/kinematics/07-vector-operations/#_1","title":"Vector Operations","text":"<p>How do we use vector expressions in kinematics?</p>"},{"location":"tutorials/kinematics/08-constraints/","title":"Constraints","text":""},{"location":"tutorials/kinematics/08-constraints/#degrees-of-freedom","title":"Degrees of Freedom","text":"<p>What are degrees of freedom?</p> <ul> <li>freedom of motion in a device</li> <li>freedom of description in variables used to describe the device</li> </ul>"},{"location":"tutorials/kinematics/08-constraints/#what-is-a-constraint","title":"What is a constraint?","text":"<p>Constraints establish limitations in descriptions or degrees of freedom</p> <ul> <li>Degrees of Freedom<ul> <li>Distances</li> <li>Perpendicular, Parallel Vectors</li> <li>Point on a line</li> <li>Point a distance from a line</li> <li>Loops</li> </ul> </li> <li>Descriptions<ul> <li>\\(a^2+b^2+c^2+d^2=1\\)</li> <li>\\(x = r \\cos{\\theta}\\), \\(y = r \\sin{\\theta}\\)</li> </ul> </li> </ul>"},{"location":"tutorials/kinematics/08-constraints/#example-distance-between-two-points","title":"Example: Distance between two points","text":""},{"location":"tutorials/kinematics/08-constraints/#distance-between-two-points","title":"Distance between two points","text":"\\[\\vec{p}=p_x \\hat{a}_x+p_y \\hat{a}_y+p_z \\hat{a}_z\\] \\[\\vec{q}=q_x \\hat{a}_x+q_y \\hat{a}_y+q_z \\hat{a}_z\\] \\[0=|\\vec{v}|-l\\] \\[0=|\\vec{q}-\\vec{p}|-l\\] \\[0=(\\vec{q}-\\vec{p}) \\cdot (\\vec{q}-\\vec{p}) -l^2\\] \\[0=(q_x-p_x)^2 +(q_y-p_y)^2+(q_z-p_z)^2 -l^2\\]"},{"location":"tutorials/kinematics/08-constraints/#constraint-equations","title":"Constraint Equations","text":"<ul> <li>Many ways to represent the same constraint</li> <li>Variables don\u2019t necessarily map to DOF</li> </ul>"},{"location":"tutorials/kinematics/08-constraints/#solved-nonlinearly","title":"Solved Nonlinearly","text":"<p>For most code you write, data is not differentiable or symbolic, it is numeric.  Differentiation is also done numerically.</p> <ul> <li>https://en.wikipedia.org/wiki/Gradient_descent</li> <li>https://en.wikipedia.org/wiki/Hill_climbing</li> </ul>"},{"location":"tutorials/kinematics/08-constraints/#numerical-solving-advantages-and-disadvantages","title":"Numerical Solving: Advantages and Disadvantages","text":""},{"location":"tutorials/kinematics/08-constraints/#advantages","title":"Advantages","text":"<ul> <li>Don't need to differentiate variables, only output.</li> <li>Faster and Easier to code</li> </ul>"},{"location":"tutorials/kinematics/08-constraints/#disadvantages","title":"Disadvantages","text":"<ul> <li>Initial guess must be close.</li> <li>Numerical solving is slow for big systems with many variables.</li> <li>Have to solve for valid positions.  <ul> <li>Continuity between solutions was not guaranteed</li> <li>No knowledge if we skipped through a singularity.</li> </ul> </li> </ul>"},{"location":"tutorials/kinematics/08-constraints/#more-info-on-minimize","title":"More Info on <code>minimize()</code>","text":"<p>Many Algorithms</p> <ul> <li>Nelder-Mead</li> <li>Powell</li> <li>CG</li> <li>BFGS</li> <li>SLSQP</li> <li>... many more</li> </ul> <p>https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html</p>"},{"location":"tutorials/kinematics/08-constraints/#example-solving-for-a-triangle","title":"Example: Solving for a triangle","text":"<ul> <li>See Lecture Notes</li> </ul>"},{"location":"tutorials/kinematics/08-constraints/#description-choice","title":"Description Choice","text":""},{"location":"tutorials/kinematics/08-constraints/#_1","title":"Constraints","text":"<p>Cartesian Coordinates \\((x,y)\\)</p> \\[ p_1 = x_1 \\hat{n}_x + y_1 \\hat{n}_y\\] \\[ p_2 = x_2 \\hat{n}_x + y_2 \\hat{n}_y\\] \\[ p_3 = x_3 \\hat{n}_x + y_3 \\hat{n}_y\\] \\[0 = |\\vec{p}_2-\\vec{p}_1| - l_1\\] \\[0 = |\\vec{p}_3-\\vec{p}_2| - l_2\\] \\[0 = |\\vec{p}_4-\\vec{p}_3| - l_3\\] <p>Polar Coordinates \\((r,\\theta)\\)</p> \\[\\vec{p}_2 = \\vec{p}_1+l_1 \\hat{a}_x\\] \\[\\vec{p}_3 = \\vec{p}_2+l_2 \\hat{b}_x\\] \\[\\vec{p}_4 = \\vec{p}_3+l_3 \\hat{c}_x\\] <p>where \\(\\hat{a}_x\\), \\(\\hat{b}_x\\), \\(\\hat{c}_x\\) are unit vectors directed along links 1, 2, 3, and \\(l_1\\), \\(l_2\\), \\(l_3\\) are constants</p>"},{"location":"tutorials/kinematics/08-constraints/#state-variables","title":"State Variables","text":"<p>Cartesian: \\(\\left\\{\\begin{matrix} x_1, \\dot{x}_1,\\\\ y_1, \\dot{y}_1,\\\\ x_2, \\dot{x}_2,\\\\ y_2, \\dot{y}_2,\\\\ x_3, \\dot{x}_3,\\\\ y_3, \\dot{y}_3 \\end{matrix}\\right.\\)</p> <p>polar: \\(\\left\\{\\begin{matrix} q_1, \\dot{q}_1,\\\\ q_2, \\dot{q}_2,\\\\ q_3, \\dot{q}_3 \\end{matrix}\\right.\\)</p>"},{"location":"tutorials/kinematics/08-constraints/#counting-kinematic-equations","title":"Counting Kinematic Equations","text":"equations variables variables 6 kinematic equations 3 state equations 3 DOF 3"},{"location":"tutorials/kinematics/08-constraints/#comparison","title":"Comparison","text":""},{"location":"tutorials/kinematics/08-constraints/#cartesian-advantages","title":"Cartesian Advantages","text":"<ul> <li>Simple representation</li> <li>Easy to represent all constraints as length of vector</li> </ul>"},{"location":"tutorials/kinematics/08-constraints/#cartesian-disadvantages","title":"Cartesian Disadvantages","text":"<ul> <li>you can encounter \"representational\" singularites</li> <li>more variables than degrees of freedom</li> </ul>"},{"location":"tutorials/kinematics/08-constraints/#polar-advantages","title":"Polar Advantages","text":"<ul> <li>representation matches physical meaning (structure, motors)</li> <li>fewer representational singularities</li> </ul>"},{"location":"tutorials/kinematics/08-constraints/#polar-disadvantages","title":"Polar Disadvantages","text":"<ul> <li>requires intuition as to how to best represent?</li> </ul>"},{"location":"tutorials/kinematics/09-jacobians/","title":"Jacobians","text":""},{"location":"tutorials/kinematics/09-jacobians/#definition","title":"Definition","text":"<p>A Jacobian is a matrix that collects the partial derivatives of rates of change between two vectors.  These rates of change are related by</p> \\[\\dot{a}=\\mathbf{J}\\dot{b}\\] \\[\\mathbf{J}= \\left[\\begin{matrix} j_{11} &amp; j_{12} &amp; \\ldots &amp; j_{1n}\\\\ j_{21} &amp; j_{22} &amp; \\ldots &amp; j_{2n}\\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots\\\\ j_{m1} &amp; j_{m2} &amp; \\ldots &amp; j_{mn}\\\\ \\end{matrix} \\right]\\] <p>where \\(j_{ij} = \\frac{\\partial \\dot{a}_i}{\\partial \\dot{b}_j}\\)</p>"},{"location":"tutorials/kinematics/09-jacobians/#warning","title":"Warning","text":"<p>Warning: You can't take the derivative of vectors in moving / rotating frames without accounting for that frame's motion in the base frame.</p>"},{"location":"tutorials/kinematics/09-jacobians/#physical-meaning","title":"Physical Meaning","text":"\\[\\dot{q}_2 = J\\dot{q}_1\\] \\[\\tau_1 = J\\tau_2\\] \\[J = \\frac{r_1}{r_2}\\]"},{"location":"tutorials/kinematics/09-jacobians/#jacobian","title":"Jacobian","text":"\\[\\dot{x}  = \\mathbf{J} \\dot{q}\\] \\[\\left[\\begin{matrix}\\dot{x}\\\\ \\dot{y}\\end{matrix}\\right]  = \\mathbf{J} \\left[\\begin{matrix}\\dot{q}_1\\\\\\dot{q}_2\\end{matrix}\\right]\\]"},{"location":"tutorials/kinematics/09-jacobians/#virtual-work","title":"Virtual Work","text":"\\[P_{in} = P_{out}\\] \\[P_{in} = \\tau^T \\dot{q} = F^T \\dot{y}=P_{out}\\] \\[\\tau^T \\dot{q} = F^T \\mathbf{J}\\dot{q}\\] \\[\\tau^T  = F^T \\mathbf{J}\\] \\[\\tau  = \\mathbf{J}^T F\\]"},{"location":"tutorials/kinematics/09-jacobians/#torques-and-forces","title":"Torques and Forces","text":"<p>Forces applied at the end-effector can be related kinematically to torques felt by the motors using the Jacobian</p>"},{"location":"tutorials/kinematics/09-jacobians/#numerical-jacobians","title":"Numerical Jacobians","text":""},{"location":"tutorials/kinematics/09-jacobians/#meaning","title":"Meaning","text":""},{"location":"tutorials/kinematics/09-jacobians/#process","title":"Process","text":""},{"location":"tutorials/kinematics/09-jacobians/#example-derivative-based-jacobians","title":"Example: Derivative-based Jacobians","text":""},{"location":"tutorials/kinematics/09-jacobians/#find-end-effector","title":"Find end-effector","text":"\\[\\begin{array}{c|ccc}\\sideset{^{a}}{^{b}}R (\\theta_1)&amp; b_x&amp; b_y&amp; b_z\\\\ \\hline a_x &amp;\\cos{\\theta_1} &amp; -\\sin{\\theta_1} &amp; 0 \\\\ a_y &amp;\\sin{\\theta_1} &amp; \\cos{\\theta_1} &amp; 0 \\\\ a_z &amp;0&amp;0&amp;1 \\\\ \\end{array} \\] \\[\\begin{array}{c|ccc}\\sideset{^{b}}{^{c}}R (\\theta_2)&amp; c_x&amp; c_y&amp; c_z\\\\ \\hline b_x &amp;\\cos{\\theta_2} &amp; -\\sin{\\theta_2} &amp; 0 \\\\ b_y &amp;\\sin{\\theta_2} &amp; \\cos{\\theta_2} &amp; 0 \\\\ b_z &amp;0&amp;0&amp;1 \\\\ \\end{array} \\] \\[\\vec{r} = l_1 \\hat{b}_x + l_2 \\hat{c}_x\\]"},{"location":"tutorials/kinematics/09-jacobians/#expand","title":"Expand","text":"\\[\\begin{align} \\vec{r} = &amp;l_1 \\hat{b}_x + l_2 \\hat{c}_x\\\\ = &amp; l_1 (c\\theta_1\\hat{a}_x+s\\theta_1\\hat{a}_y) + l_2 (c\\theta_2\\hat{b}_x+s\\theta_2\\hat{b}_y)\\\\ = &amp; l_1 (c\\theta_1\\hat{a}_x+s\\theta_1\\hat{a}_y) + l_2 (c\\theta_2(c\\theta_1\\hat{a}_x+s\\theta_1\\hat{a}_y)+s\\theta_2(-s\\theta_1\\hat{a}_x+c\\theta_1\\hat{a}_y))\\\\ = &amp; l_1 c\\theta_1\\hat{a}_x + l_1 s\\theta_1\\hat{a}_y + l_2 c\\theta_2 c\\theta_1\\hat{a}_x+l_2 c\\theta_2 s\\theta_1 \\hat{a}_y - l_2 s\\theta_2 s\\theta_1\\hat{a}_x + l_2 s\\theta_2 c\\theta_1\\hat{a}_y\\\\ =&amp;  \\left(l_{1} c\\theta_1 - l_{2} s\\theta_1 s\\theta_2 + l_{2} c\\theta_1 c\\theta_2\\right)\\hat{a}_x + \\left(l_{1} s\\theta_1 + l_{2} s\\theta_1 c\\theta_2 + l_{2} s\\theta_2 c\\theta_1\\right)\\hat{a}_y \\\\ =&amp; (l_{1} c\\theta_{1} + l_{2} c(\\theta_{1} + \\theta_{2})) \\hat{a}_x +(l_{1} s\\theta_{1} + l_{2} s(\\theta_{1} + \\theta_{2}))\\hat{a}_y \\end{align}\\]"},{"location":"tutorials/kinematics/09-jacobians/#derivative","title":"Derivative","text":"\\[\\vec{r} = \\left(l_{1} c\\theta_1 - l_{2} s\\theta_1 s\\theta_2 + l_{2} c\\theta_1 c\\theta_2\\right)\\hat{a}_x + \\left(l_{1} s\\theta_1 + l_{2} s\\theta_1 c\\theta_2 + l_{2} s\\theta_2 c\\theta_1\\right)\\hat{a}_y\\] \\[\\begin{align} \\left.\\frac{d\\vec{r}}{dt}\\right|_{\\text{in }A} = &amp;  \\left(- \\dot{ \\theta }_1 l_{1} s\\theta_1 - \\dot{ \\theta }_1 l_{2} s\\theta_1 c\\theta_2 - \\dot{ \\theta }_1 l_{2} s\\theta_2 c\\theta_1 - \\dot{ \\theta }_2 l_{2} s\\theta_1 c\\theta_2 - \\dot{ \\theta }_2 l_{2} s\\theta_2 c\\theta_1\\right) \\hat{a}_x +\\\\ &amp; \\left(\\dot{ \\theta }_1 l_{1} c\\theta_1 - \\dot{ \\theta }_1 l_{2} s\\theta_1 s\\theta_2 + \\dot{ \\theta }_1 l_{2} c\\theta_1 c\\theta_2 - \\dot{ \\theta }_2 l_{2} s\\theta_1 s\\theta_2 + \\dot{ \\theta }_2 l_{2} c\\theta_1 c\\theta_2\\right)\\hat{a}_y \\\\ =&amp;\\left(- \\dot{ \\theta }_1 l_{1} s\\theta_1 - \\dot{ \\theta }_1 l_{2} s(\\theta_1+\\theta_2) - \\dot{ \\theta }_2 l_{2} s(\\theta_1+\\theta_2)\\right)\\hat{a}_x  +\\\\ &amp;  \\left(\\dot{ \\theta }_1 l_{1} c\\theta_1 + \\dot{ \\theta }_1 l_{2} c(\\theta_1+\\theta_2) + \\dot{ \\theta }_2 l_{2} c(\\theta_1+\\theta_2)\\right)\\hat{a}_y \\end{align}\\] \\[\\begin{align} \\frac{\\partial\\vec{r}}{\\partial\\theta_1} =&amp;\\left.\\frac{d\\vec{r}}{dt}  \\right|_{\\text{in }A,\\dot\\theta_2=0} =\\left(- l_{1} s\\theta_1 - l_{2} s(\\theta_1+\\theta_2)\\right)\\hat{a}_x + \\left(l_{1} c\\theta_1 + l_{2} c(\\theta_1+\\theta_2)\\right)\\hat{a}_y \\\\ \\frac{\\partial\\vec{r}}{\\partial\\theta_2} =  &amp; \\left.\\frac{d\\vec{r}}{dt}  \\right|_{\\text{in }A,\\dot\\theta_1=0} =- l_{2} s(\\theta_1+\\theta_2)\\hat{a}_x  +  l_{2} c(\\theta_1+\\theta_2)\\hat{a}_y \\end{align}\\]"},{"location":"tutorials/kinematics/09-jacobians/#assemble-the-jacobian","title":"Assemble the Jacobian","text":"\\[\\begin{align} J = &amp;\\begin{bmatrix} \\frac{\\partial\\vec{r}}{\\partial\\theta_1} \\cdot{\\hat{a}_x} &amp; \\frac{\\partial\\vec{r}}{\\partial\\theta_2} \\cdot{\\hat{a}_x}\\\\ \\frac{\\partial\\vec{r}}{\\partial\\theta_1} \\cdot{\\hat{a}_y} &amp; \\frac{\\partial\\vec{r}}{\\partial\\theta_2} \\cdot{\\hat{a}_y} \\end{bmatrix} \\\\=&amp; \\left[\\begin{matrix}- l_{1} \\sin{\\left(\\theta_{1}{\\left(t \\right)} \\right)} - l_{2} \\sin{\\left(\\theta_{1}{\\left(t \\right)} + \\theta_{2}{\\left(t \\right)} \\right)} &amp; - l_{2} \\sin{\\left(\\theta_{1}{\\left(t \\right)} + \\theta_{2}{\\left(t \\right)} \\right)}\\\\l_{1} \\cos{\\left(\\theta_{1}{\\left(t \\right)} \\right)} + l_{2} \\cos{\\left(\\theta_{1}{\\left(t \\right)} + \\theta_{2}{\\left(t \\right)} \\right)} &amp; l_{2} \\cos{\\left(\\theta_{1}{\\left(t \\right)} + \\theta_{2}{\\left(t \\right)} \\right)}\\\\0 &amp; 0\\end{matrix}\\right] \\end{align}\\]"},{"location":"tutorials/kinematics/10-jacobians-for-parallel-mechanisms/","title":"Jacobians for Parallel Mechanisms","text":""},{"location":"tutorials/kinematics/10-jacobians-for-parallel-mechanisms/#parallel-mechanisms","title":"Parallel Mechanisms","text":"<ul> <li>\\(n\\) joints</li> <li>\\(m\\) constraints</li> <li>\\(n-m\\) degrees of freedom</li> <li>how to find consistent torque, force, speed?</li> <li>based on only independent degrees of freedom</li> <li>solve for dependent degrees of freedom.</li> </ul>"},{"location":"tutorials/kinematics/10-jacobians-for-parallel-mechanisms/#consider-constraint-equations","title":"Consider Constraint Equations","text":"\\[ 0 = \\left[\\begin{array}{c} f_1(q_1,...q_n) \\\\ \\vdots\\\\ f_m(q_1,...q_n) \\end{array}\\right]\\]"},{"location":"tutorials/kinematics/10-jacobians-for-parallel-mechanisms/#take-the-derivative","title":"Take the derivative","text":"\\[ 0 = \\left[\\begin{array}{c} \\dot{f}_1(q_1,...q_n) \\\\ \\vdots\\\\ \\dot{f}_m(q_1,...q_n) \\end{array}\\right]=\\underbrace{\\left[\\begin{array}{ccc} j_{1q_1} &amp; \\dots &amp; j_{1q_n} \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ j_{mq_1} &amp; \\dots &amp; j_{mq_n} \\end{array}\\right]}_{J_{c}}\\left[\\begin{array}{c} \\dot{q}_1\\\\\\vdots\\\\\\dot{q}_n\\end{array}\\right]\\]"},{"location":"tutorials/kinematics/10-jacobians-for-parallel-mechanisms/#find-internal-jacobian","title":"Find Internal Jacobian","text":"<p>Now, given a valid configuration, solve for the linearized, velocity-based constraint equation.  If</p> \\[0= \\textbf{J}_c \\dot{q} = \\textbf{A} \\dot{q}_i + \\textbf{B} \\dot{q}_d\\]"},{"location":"tutorials/kinematics/10-jacobians-for-parallel-mechanisms/#where","title":"where","text":"<p>\\(\\textbf{A}_{(m \\times (n-m))}\\), \\(\\textbf{B}_{(m \\times m)}\\)</p> \\[\\dot{q}=\\left[\\begin{array}{c} \\dot{q}_{i1} \\\\ \\vdots \\\\ \\dot{q}_{i(n-m)}\\\\ \\hline \\dot{q}_{d1}\\\\ \\vdots\\\\ \\dot{q}_{dm} \\end{array}\\right]\\]"},{"location":"tutorials/kinematics/10-jacobians-for-parallel-mechanisms/#solve-for-q_d","title":"Solve for \\(q_d\\)","text":"\\[0= \\textbf{A} \\dot{q}_i + \\textbf{B} \\dot{q}_d\\] \\[-\\textbf{B}\\dot{q}_d = \\textbf{A}\\dot{q}_i\\] \\[\\dot{q}_d = \\underbrace{-\\textbf{B}^{-1}\\textbf{A}}_{C}\\dot{q}_i\\]"},{"location":"tutorials/kinematics/10-jacobians-for-parallel-mechanisms/#apply-to-end-effector","title":"Apply to end-effector","text":"\\[\\textbf{v}_{out} = \\textbf{J}\\dot{\\textbf{q}}\\] \\[\\textbf{v}_{out} = \\textbf{D}\\dot{\\textbf{q}}_i+\\textbf{E}\\dot{\\textbf{q}}_d\\] \\[\\textbf{v}_{out} = \\textbf{D}\\dot{\\textbf{q}}_i+\\textbf{EC}\\dot{\\textbf{q}}_i\\] \\[\\textbf{v}_{out} = \\textbf{(D+EC)}\\dot{\\textbf{q}}_i\\]"},{"location":"tutorials/kinematics/11-CAD-kinematics/","title":"Spherical Kinematics in CAD","text":""},{"location":"tutorials/misc/developing-a-research-question/","title":"Developing a Research Question","text":""},{"location":"tutorials/misc/developing-a-research-question/#introduction","title":"Introduction","text":"<p>Robotics as a field is highly multi-disciplinary. Even within that field, designing a robot requires knowledge and input from a variety of domains, including biology,  materials,  mechanics, mechanical design,dynamics, CAD, manufacturing, optimization, control, etc.  Because of its highly interdisciplinary nature, as new knowledge emerges from any of its connected fields, there is an opportunity to innovate.  Designing  novel and innovative  robots requires adapting new ideas from those neighboring fields, connecting them together, and remixing them with existing techniques, in order to realize new modes of locomotion or achieve higher performance.</p> <p>This is where research comes in.  The goal of research is to help us understand the underlying mechanisms that connect these concepts together.   Unlike industry, that may be more focused on applying the output of knowledge to solve an applied problem, research often helps us make connections and understand relationships between concepts</p>"},{"location":"tutorials/misc/developing-a-research-question/#research-questions","title":"Research Questions","text":"<p>Research questions are at the heart of this process.  There can be big research questions or small research questions.  In fact, the biggest research questions, the answers to life, the universe, and everything<sup>1</sup> are composed of a thousand small questions.</p> <p>In fact, this class -- and my research in general -- focuses on a small set of research questions.  Research questions are at the heart of every paper and proposal I write.  Asking a good research question is important because as engineers and scientists, it is important to understand underlying connections between two disparate domains before trying to connect them together for an application.  </p> <p>The biggest questions -- the answers to life, the secrets of intelligence, and our understanding of matter -- These by nature are open ended,  multifaceted and, in my opinion, have don't have a single answer.  But these are terrible questions to start with when opening up a new line of questioning.  Why?  </p> <ul> <li>They are too big.  You can't expect to answer them completely by yourself as a result of a single project.</li> <li>They don't provide a good starting point.  Where should you start to answer these questions</li> <li>They don't provide a good starting point.  Where should you start to answer these questions?</li> <li>They don't leverage your knowledge and abilities.  Ask a question you are both  interested in, but more importantly, ask a question you can answer!</li> </ul> <p>On the other hand, questions like these can be broken down into smaller problems.  Take what I might consider the driving  question of much of my research:</p> <p>How can higher-acheiving robots be made more easily and more affordably by more people?</p> <p>This remaines a poor starting point for new projects because it still fails by the same points above, except that maybe my expertise can go a long way towards answering that question, in the longer term.  Given my interests, how can I break that question up into smaller parts?</p> <p>A good research question has the following characteristics:</p>"},{"location":"tutorials/misc/developing-a-research-question/#achievable-tractable","title":"Achievable / Tractable","text":"<p>The question should focus your work towards an achievable goal.  It should be limited in nature and may even hint at the approaches you might use  to answer it.  Consider that for this class, an appropriate research question must be able to be answered in one semester.  </p> <p>If, after some background reading and initial testing you find it's too broad, you should adjust and refocus your question.  This can be done using a number of techniques:</p> <ul> <li>Be more specific.  Are you talking about a solution for all robots in general, or for a class of robots?</li> <li>Restricting yourself to a specific class of solutions.  Maybe there are a hundred ways to answer a question.  How can one particular mechanism be leveraged to solve it?  For example, perhaps you want to improve the jumping performance of a legged robot.  How can you use beam theory to address it?  How can you use engineered nonlinearity?  How can you optimize your DC motors?  Each of those questions implies one path of many possible paths that you might take in solving the problem.  Defining that path is appropriate as long as you acknowledge that you are focusing in this way.</li> <li>Adding constraints.  Defining a framework within which you are answering a broader question is a good way of focusing your question.  Such a framework can be a legitimate constraint (like gravity) or more hypothetical.  If you can provide a good rationale for why that framework is important, then your question is still valid.  For example,  while a number of researchers have built  walking robots, have they made one out of cardboard?  Have they made one for less than $100?  Have they made it in an hour?  Have they designed it for walking on an asteroid?  Constraints can be useful for focusing your process of answering the question</li> <li>etc.  What other techniques can you think of that helps you focus your question on something more achievable?</li> </ul>"},{"location":"tutorials/misc/developing-a-research-question/#novel","title":"Novel","text":"<p>Through background reading of prior research, existing patents, and popular literature you should be relatively sure that the question hasn't already been answered.  Granted, if it's a good idea, other people may already be working on the problem, but if the main structure of the answer is already mapped out, then, unless you are reasonably sure you have something new to add, you will probably find that most of the most interesting questions within that subfield have already been asked and answered as well.</p> <p>Though it is hard to prove a negative, a five minute search on google scholar by a domain expert like your professor shouldn't come up with many highly cited results.  The toughest part is identifying the keywords that people within the field (if it already exists in a nascent form) already use.</p> <p>Here are some ways to make a research question more novel </p> <ul> <li>Importing a new concept, material What are the current trends in other fields?  Have they been applied to robotics yet?  Try swapping out a traditional approach for a new one. For example, instead of developing a traditional model for some phenomenon, based on experimental data and numerical analsis, can machine learning techniques be applied to solve a problem more efficiently?  Can you swap out a motor for a liquid crystal actuator?  Can you make your device entirely 3D printable?<ul> <li>Use new materials.  Instead of rubber, use hydrogels or LCA's.  Instead of metal links, try cardboard</li> <li>Apply something used for sensing towards actuation, or actuation towards sensing.  </li> <li>Use off-the-shelf components that are newly available.  Consider the myriad of new, small form factor sensors that have been developed for cell phones.  How can you integrate them to solve a problem?</li> </ul> </li> <li>Try a new approach to an existing solution.  Some people solve a problem in a cosmetic manner and move on, never fully understanding exploiting the underlying phenomenon.  Searching through old robotics conferences reveals many cool ideas that were poorly implemented or not well understood.  How can you do it better?<ul> <li>Add a better model that more completely explains the phenomenon you're seeing and use that to build a better version.</li> <li>Come up with an improved design of an existing robot.  Push the envelope through better engineering.</li> </ul> </li> <li>Looking at the problem more broadly.  If you're too focused on one mechanism or technique, you may find -- after deeper searching -- that someone has explored that particular problem in depth.  Have they explored that class of problems more generally?  For example, many people have solved interesting problems using soft robots actuated with pneumatic bellows; what happens when you switch to soft materials that themselves can be actuated?  What new challenges can these materials address that were perhaps solved less gracefully with other soft robots? </li> <li>Other techniques... How else do you make a concept more novel?</li> </ul>"},{"location":"tutorials/misc/developing-a-research-question/#interesting-timely-and-relevant","title":"Interesting, Timely, and Relevant","text":"<p>Your question should be interesting to the broader community.  How do you achieve this sweet spot of something that is interesting while at the same time being novel?  This is the challenge to research in general -- finding topics that are unexplored while at the same time of interest to the community.  If it is truly of interest, probably someone else is already thinking of your idea.  If someone else has solved it already, less can be learned from you re-examining the same question.  The only way to work through this is to proceed quickly and efficiently through your research, and to publish your results early and often. </p>"},{"location":"tutorials/misc/developing-a-research-question/#open-ended","title":"Open-Ended","text":"<p>Most research questions should contain \"how\" or \"why\" phrases, and probe more fundamental relationships.  Why?  Yes/No questions are boring, and most of the time are not fundable.  Open ended questions are the bedrock of science, while application-focused projects are typically more goal-oriented.  Goal oriented questions are great in a number of scenarios, especially in military and industry-oriented projects, but to get funded by the National Science Foundation, your project needs \"Intellectual Merit\", which relates back to answering fundamental scientific questions of interest to the community.  So let's practice</p>"},{"location":"tutorials/misc/developing-a-research-question/#exercise-turn-this-goal-oriented-question-to-a-more-open-ended-question","title":"Exercise: Turn this goal-oriented question to a more open-ended question","text":"<p>Use some of the techniques described above to refocus the given research questions to something more open-ended</p> Goal-Oriented Open-Ended Can I make a jumping robot with liquid crystal actuators? What are the optimal material design parameters to increase the performance of jumping robots How do I make the world's fastest robot?<sup>2</sup>"},{"location":"tutorials/misc/developing-a-research-question/#modular","title":"Modular","text":"<p>While the research question you ask should be rational, achievable, and focused in order to fit within the constraints of a single project or semester, your question should also be able to be assembled into a broader picture.  This helps you as a researcher create a unique narrative around which you can define your academic career.  This is useful for a number of reasons.  First, building up blocks of questions defines you as a domain expert.  People start to associate you with a sub-field, or field, and -- if it is interesting to the community -- you will probably become more sought out to speak, collaborate on proposals or papers, etc..  Second, it gives you a mastery of a research pipeline that allows you to ask newer, related questions better and faster.  Like the gravity in a black hole, the better you are at something, the better you become, and it accelerates.  Finally, having multiple pieces that you can fit together in a variety of ways allows you to reframe your expertise as the field evolves.  While some topics become \"solved\", if you can swap out one piece of your research for another, you can continue to remain relevant, even if some of your topics remain stale.  Who knows, maybe it will become popular again, if something new comes along and makes it relevant again?</p> <p>In summary the process of asking new questions can help you build up a research portfolio that you can remix and reframe as needed.</p>"},{"location":"tutorials/misc/developing-a-research-question/#leverages-your-own-abilities","title":"Leverages your own abilities.","text":"<p>This may be obvious, but you should ask research questions that are both interesting, and that you are best able to answer.  If you are a mechanical engineer asking a research question about game theory, you may fall into some of the above pitfalls of novelty, interest, and focus</p>"},{"location":"tutorials/misc/developing-a-research-question/#demonstrates-your-expertise","title":"Demonstrates your expertise","text":"<p>Finally, a good research question also demonstrates you know enough about your field to make a novel, interesting, and relevant new contribution to the field.</p>"},{"location":"tutorials/misc/developing-a-research-question/#relevant","title":"Relevant","text":"<p>And finally, the question you ask must be answerable with the topics you learn in Foldable Robotics.</p> <ul> <li>Do I use other types of transmissions to solve a tough problem?  How much of my design time am I spending on this<ul> <li>Gears, pulleys, belts, wheels, shafts, etc</li> </ul> </li> <li>Do I use alternate manufacturing methods to achieve success?<ul> <li>3D printing, traditional machining</li> </ul> </li> <li>Is the contribution of the foldable mechanism nontrivial?<ul> <li>Does it transform input motion to output motion in a meaningful way?</li> <li>Does the use of foldable techniques solve a key design problem?</li> <li>Is the foldable portion a mechanism or just a structure? </li> </ul> </li> </ul> <ol> <li> <p>Douglas Adams\u00a0\u21a9</p> </li> <li> <p>This is s`till goal oriented.  I said how, but I don't care why.\u00a0\u21a9</p> </li> </ol>"},{"location":"tutorials/misc/RC%20Servos/","title":"RC Servos","text":""},{"location":"tutorials/misc/RC%20Servos/#what-is-an-rc-servo","title":"What is an RC Servo","text":"<ul> <li>Not just a motor, an \u201cElectromechanical System\u201d</li> </ul>"},{"location":"tutorials/misc/RC%20Servos/#whats-inside","title":"What\u2019s inside","text":"<ul> <li>https://www.sparkfun.com/servos</li> </ul>"},{"location":"tutorials/misc/RC%20Servos/#common-servo-sizes","title":"Common Servo Sizes","text":""},{"location":"tutorials/misc/RC%20Servos/#how-do-you-plug-in-a-servo","title":"How do you plug in a Servo?","text":"<ul> <li>Three wires:</li> <li>Ground - usually black</li> <li>Power - usually red</li> <li>Signal - neither red nor black</li> </ul>"},{"location":"tutorials/misc/RC%20Servos/#other-kinds-of-servos","title":"Other Kinds of Servos","text":"<ul> <li>Linear Servos: Same idea, only you use a lead screw to translate the output rather than rotate</li> <li>Continuous Rotation Servos: The potentiometer is removed, so the control signal just relates to speed</li> <li>Servos with Feedback: Extra wire for position value</li> </ul>"},{"location":"tutorials/misc/RC%20Servos/#servo-mounting-ideas","title":"Servo Mounting Ideas","text":""},{"location":"tutorials/misc/RC%20Servos/#controlling-a-servo","title":"Controlling a Servo","text":"<ul> <li>PWM: Pulse Width Modulation</li> <li>The \u201cvalue\u201d sent by a PWM signal is the proportion of the time on vs the \u201cperiod\u201d, or time between signals</li> <li>frequency = 1/period</li> <li>period = 200ms</li> <li>frequency = ?</li> </ul>"},{"location":"tutorials/misc/RC%20Servos/#servo-calculations","title":"Servo Calculations","text":"<ul> <li>Typical servo pulse timings:<ul> <li>Low = 550 \\(\\mu\\)s</li> <li>High = 2400 \\(\\mu\\)s </li> </ul> </li> <li>The ESP32 uses 10 bits by default for the PWM register, though this can be changed. Refs:<ul> <li>https://docs.micropython.org/en/latest/esp32/tutorial/pwm.html#</li> <li>https://docs.micropython.org/en/latest/esp32/quickref.html#pwm-pulse-width-modulation</li> <li>https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/peripherals/ledc.html</li> <li>https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/peripherals/ledc.html#supported-range-of-frequency-and-duty-resolutions</li> </ul> </li> <li> <p>The calculation for the low and high PWM counts is shown:</p> \\[c_{low}=\\frac{550}{10^6}*f*2^{(\\text{\\# bits})}\\approx28\\] \\[c_{high}=\\frac{2400}{10^6}*f*2^{(\\text{\\# bits})}\\approx122\\] </li> </ul>"},{"location":"tutorials/misc/RC%20Servos/#more-information","title":"More Information","text":"<ul> <li>https://www.sparkfun.com/servos</li> </ul>"},{"location":"tutorials/misc/tracker-tutorial/","title":"Tracker Tutorial","text":"<p>Please visit this page</p>"},{"location":"tutorials/mujoco/01-mujoco-overview/","title":"MuJoCo Overview","text":""},{"location":"tutorials/mujoco/01-mujoco-overview/#xml-mjcf","title":"XML (MJCF)","text":"<ul> <li>Kinematic Tree</li> <li>World &amp; Visualization Params<ul> <li>Scene</li> <li>Lighting</li> <li>Cameras</li> </ul> </li> <li>Contact Settings</li> <li>Actuators</li> <li>Sensors</li> <li>Constraints (equality)</li> <li>Tendons</li> <li>Compiler Flags</li> <li>Options</li> <li>Defaults</li> </ul>"},{"location":"tutorials/mujoco/01-mujoco-overview/#bodies","title":"Bodies","text":"<ul> <li>containers for<ul> <li>joints</li> <li>one or more geoms</li> <li>inertial definitions</li> <li>cameras, lights</li> <li>other bodies</li> </ul> </li> </ul>"},{"location":"tutorials/mujoco/01-mujoco-overview/#specifying-bodies","title":"Specifying bodies","text":"<ul> <li>name</li> <li>pos</li> <li>orientation</li> </ul>"},{"location":"tutorials/mujoco/01-mujoco-overview/#geoms","title":"Geoms","text":"<ul> <li>can be used for specifiying multiple things<ul> <li>visualization</li> <li>contact</li> <li>mass</li> </ul> </li> <li>different types<ul> <li>solid bodies (sphere, box, ,capsule, ellisoid, cylinder)</li> <li>other interesting types: hfield, sdf, mesh</li> </ul> </li> </ul>"},{"location":"tutorials/mujoco/01-mujoco-overview/#specifying-geoms","title":"Specifying Geoms","text":"<ul> <li>name</li> <li>size</li> <li>position</li> <li>color(rgba)</li> <li>mass/density</li> <li>specific contact parameters</li> </ul>"},{"location":"tutorials/mujoco/01-mujoco-overview/#joints","title":"Joints","text":"<p>Different Types</p> <ul> <li>free</li> <li>ball</li> <li>slide</li> <li>hinge</li> </ul>"},{"location":"tutorials/mujoco/01-mujoco-overview/#specifying-joints","title":"Specifying Joints","text":"<ul> <li>name</li> <li>pos</li> <li>axis</li> <li>stiffness, damping</li> <li>limited, range</li> </ul>"},{"location":"tutorials/mujoco/01-mujoco-overview/#inertial","title":"Inertial","text":"<p><code>&lt;inertial&gt;</code> takes precedence if supplied</p> <ul> <li>position</li> <li>orientation</li> <li>mass</li> <li>diaginertia</li> <li>fullinertia</li> </ul>"},{"location":"tutorials/mujoco/01-mujoco-overview/#position","title":"Position","text":"<ul> <li><code>pos</code> parameter</li> <li>x,y,z cartesian values</li> </ul>"},{"location":"tutorials/mujoco/01-mujoco-overview/#orientation","title":"Orientation","text":"<p>Many options</p> <ul> <li>quat: a, bi, cj, dk,</li> <li>axisangle: x,y,z, angle</li> <li>euler: three successive rotations (default: x,y,z)</li> <li>xyaxes: define the two x-y axes.</li> <li>zaxis: define only the z axis</li> </ul> <p>more info</p>"},{"location":"tutorials/mujoco/01-mujoco-overview/#camera","title":"Camera","text":"<p>The camera is looking along the -Z axis of its frame</p> <ul> <li>name</li> <li>mode: fixed, track, trackcom, targetbody,targetbodycom</li> <li>fovy</li> <li>pos</li> <li>orientation</li> <li>target</li> </ul>"},{"location":"tutorials/mujoco/01-mujoco-overview/#lights","title":"Lights","text":"<ul> <li>name</li> <li>mode: fixed, track, trackcom, targetbody,targetbodycom</li> <li>directional</li> <li>castshadow</li> <li>pos</li> <li>orientation</li> <li>target</li> <li>dir</li> <li>colors: diffuse, specular, ambient</li> </ul>"},{"location":"tutorials/mujoco/01-mujoco-overview/#more-on-this","title":"More on this","text":"<p>https://mujoco.readthedocs.io/en/stable/XMLreference.html#body-light</p>"},{"location":"tutorials/mujoco/01-mujoco-overview/#external-references","title":"External References","text":"<ul> <li>https://mujoco.readthedocs.io/en/stable/XMLreference.html#body-geom</li> <li>https://mujoco.readthedocs.io/en/stable/modeling.html#solver-parameters</li> <li>https://mushr.io/tutorials/mujoco/</li> <li>https://pab47.github.io/mujocopy.html</li> </ul>"},{"location":"tutorials/mujoco/02-transformations-example/","title":"Transformations Example","text":""},{"location":"tutorials/mujoco/02-transformations-example/#activity","title":"Activity","text":"<p>See transformations.ipynb notebook</p>"},{"location":"tutorials/mujoco/02-transformations-example/#finishing-the-transformations-example","title":"Finishing the \"transformations\" example","text":""},{"location":"tutorials/mujoco/02-transformations-example/#question","title":"Question","text":"<p>Q: In a body element, which operation is applied first, translation or rotation? A: <code>pos</code> is applied first, then the rotation.</p>"},{"location":"tutorials/mujoco/02-transformations-example/#case-study-1","title":"Case Study 1","text":"<pre><code>&lt;mujoco&gt;\n    &lt;compiler angle=\"degree\" /&gt;\n    &lt;worldbody&gt;\n        &lt;light name=\"light1\" pos=\"0 0 5\" /&gt;\n        &lt;camera name=\"world\" pos=\"0 -5 0\" quat=\".707 .707 0 0\"/&gt;\n        &lt;body pos=\"0 0 0\" axisangle=\"0 1 0 0\"&gt;\n            &lt;geom type=\"box\" size=\".5 .05 .05\" pos=\"0 0 0\" rgba=\"1 0 0 1\"/&gt;\n            &lt;geom type=\"box\" size=\".05 .5 .05\" pos=\"0 0 0\" rgba=\"0 1 0 1\"/&gt;\n            &lt;geom type=\"box\" size=\".05 .05 .5\" pos=\"0 0 0\" rgba=\"0 0 1 1\"/&gt;\n        &lt;/body&gt;\n        &lt;body pos=\"1.5 0 0\" axisangle=\"0 1 0 45\"&gt;\n            &lt;geom type=\"box\" size=\".5 .05 .05\" pos=\"0 0 0\" rgba=\"1 0 0 1\"/&gt;\n            &lt;geom type=\"box\" size=\".05 .5 .05\" pos=\"0 0 0\" rgba=\"0 1 0 1\"/&gt;\n            &lt;geom type=\"box\" size=\".05 .05 .5\" pos=\"0 0 0\" rgba=\"0 0 1 1\"/&gt;\n        &lt;/body&gt;\n    &lt;/worldbody&gt;\n&lt;/mujoco&gt;\n</code></pre> <p>In the xml above are two bodies.  The central body is placed at 0,0,0 and is not rotated, with x,y, and z axes shown by red, green, and blue boxes, respectively.  The second body to its right is translated to point (1.5,0,0) and rotated about the y-axis by 45 degrees.  What we see is that the translation occurred first, in the world frame, and the rotation occurred afterwards.  Otherwise, the second body would have been translated along a 45-degree angle direction as well.</p>"},{"location":"tutorials/mujoco/02-transformations-example/#question_1","title":"Question","text":"<p>Q: How does the parent-child relationship work in mujoco's xml? A: A child's configuration is relative to its parent.</p>"},{"location":"tutorials/mujoco/02-transformations-example/#case-study-2","title":"Case Study 2","text":"<p>In this case study we will look at how transformations in children are affected by parents</p> <pre><code>&lt;mujoco&gt;\n    &lt;compiler angle=\"degree\" /&gt;\n    &lt;worldbody&gt;\n        &lt;light name=\"light1\" pos=\"0 0 5\" /&gt;\n        &lt;camera name=\"world\" pos=\"0 -5 0\" quat=\".707 .707 0 0\"/&gt;\n        &lt;body pos=\"0 0 0\" axisangle=\"0 1 0 0\"&gt;\n            &lt;geom type=\"box\" size=\".5 .05 .05\" pos=\"0 0 0\" rgba=\"1 0 0 1\"/&gt;\n            &lt;geom type=\"box\" size=\".05 .5 .05\" pos=\"0 0 0\" rgba=\"0 1 0 1\"/&gt;\n            &lt;geom type=\"box\" size=\".05 .05 .5\" pos=\"0 0 0\" rgba=\"0 0 1 1\"/&gt;\n        &lt;/body&gt;\n        &lt;body pos=\"0 0 0\" axisangle=\"0 1 0 45\"&gt;\n            &lt;geom type=\"box\" size=\".5 .05 .05\" pos=\"1.5 0 0\" rgba=\"1 0 0 1\"/&gt;\n            &lt;geom type=\"box\" size=\".05 .5 .05\" pos=\"1.5 0 0\" rgba=\"0 1 0 1\"/&gt;\n            &lt;geom type=\"box\" size=\".05 .05 .5\" pos=\"1.5 0 0\" rgba=\"0 0 1 1\"/&gt;\n        &lt;/body&gt;\n    &lt;/worldbody&gt;\n&lt;/mujoco&gt;\n</code></pre> <p></p> <p>In this second case study, the interior geoms of the second body are translated along the x axis by 1.5.  The parent body is rotated as before, with no translation.  This shows us that a child's transformation is relative to its parent's frame, not to the global frame.</p>"},{"location":"tutorials/mujoco/02-transformations-example/#final","title":"Final","text":"<p>Download the final version of today's transformations example</p>"},{"location":"tutorials/mujoco/03-double-pendulum-example/","title":"Double Pendulum Walkthrough","text":""},{"location":"tutorials/mujoco/03-double-pendulum-example/#double-pendulum-example","title":"Double Pendulum Example","text":"<p>Download the double pendulum starter code</p>"},{"location":"tutorials/mujoco/03-double-pendulum-example/#xml-walkthrough","title":"XML Walkthrough","text":"<p>The xml in the attached file above is very straightforward.  Insided the required <code>&lt;mujoco&gt;</code> brackets, all we need is a <code>&lt;worldbody&gt;</code>.  Inside that is a <code>&lt;light&gt;</code> element, added to make the resulting scene look better, and a <code>&lt;body&gt;</code> element named <code>\"A\"</code> at (0,0,0).  Inside that is a <code>&lt;joint&gt;</code> element of type <code>\"hinge\"</code> located at (0,0,0), along the y-axis.  Next is a <code>&lt;geom&gt;</code> element of type <code>\"box\"</code>, with size specified in xml as (.5, .05, .05).  Remember, though, that dimensions in mujoco should be considered like the radius or half-length of an object rather than the diameter, or full length of an object.  So our box's actual size is (1, .1, .1).  We have specified a mass of 1 so that even if our box changes shape, the mass will not change.</p> <p>The next element inside body A is another <code>&lt;body&gt;</code> element, which is a copy of the exterior body with small tweaks.  First, we have changed its name to <code>\"B\"</code>, set its position to (1,0,0), the end of link A, and renamed the joint from <code>\"j1\"</code> to <code>\"j2\"</code>.</p>"},{"location":"tutorials/mujoco/03-double-pendulum-example/#python-code","title":"Python code","text":"<p>The rest of the python code for the double pendulum is fairly straightforward.  We create instances of the model, data, and renderer classes, specify the duration and framerate of our simulation, and step through our simulation, generating new animation frames once every 1/30th of a second.</p> <p>The following sections describe additions that can be made to the code to enhance the simulation.</p>"},{"location":"tutorials/mujoco/03-double-pendulum-example/#parent-child","title":"Parent Child","text":"<ul> <li>difference between embedding a second body in the first or having it separate</li> </ul> <pre><code>&lt;mujoco&gt;\n    &lt;worldbody&gt;\n        &lt;light name=\"top\" pos=\"0 0 1\"/&gt;\n        &lt;body name=\"A\" pos=\"0 0 0\"&gt;\n            &lt;joint name=\"j1\" type=\"hinge\" axis=\"0 1 0\" pos=\"0 0 0\"/&gt;\n            &lt;geom type=\"box\" size=\".5 .05 .05\" pos=\".5 0 0\" rgba=\"1 0 0 1\" mass=\"1\"/&gt;\n            &lt;body name=\"B\" pos=\"1 0 0\"&gt;\n                &lt;joint name=\"j2\" type=\"hinge\" axis=\"0 1 0\" pos=\"0 0 0\"/&gt;\n                &lt;geom type=\"box\" size=\".5 .05 .05\" pos=\".5 0 0\" rgba=\"1 0 0 1\" mass=\"1\"/&gt;\n            &lt;/body&gt;\n        &lt;/body&gt;\n    &lt;/worldbody&gt;\n&lt;/mujoco&gt;\n</code></pre>  your browser does not support this video tag  <pre><code>&lt;mujoco&gt;\n    &lt;worldbody&gt;\n        &lt;light name=\"top\" pos=\"0 0 1\"/&gt;\n        &lt;body name=\"A\" pos=\"0 0 0\"&gt;\n            &lt;joint name=\"j1\" type=\"hinge\" axis=\"0 1 0\" pos=\"0 0 0\"/&gt;\n            &lt;geom type=\"box\" size=\".5 .05 .05\" pos=\".5 0 0\" rgba=\"1 0 0 1\" mass=\"1\"/&gt;\n        &lt;/body&gt;\n        &lt;body name=\"B\" pos=\"1.5 0 0\"&gt;\n            &lt;joint name=\"j2\" type=\"hinge\" axis=\"0 1 0\" pos=\"0 0 0\"/&gt;\n            &lt;geom type=\"box\" size=\".5 .05 .05\" pos=\".5 0 0\" rgba=\"1 0 0 1\" mass=\"1\"/&gt;\n        &lt;/body&gt;\n    &lt;/worldbody&gt;\n&lt;/mujoco&gt;\n</code></pre>  your browser does not support this video tag"},{"location":"tutorials/mujoco/03-double-pendulum-example/#plotting-data","title":"Plotting Data","text":"<p>To extract and plot data from your simulation you need to modify your code in a couple spots.  First, you need to initialize an empty list for time, joint position, joint velocity, and cartesian position before the simulation <code>while</code> loop:</p> <pre><code>x = []\nq = []\nw = []\nt = []\n</code></pre> <p>Then, you need to add code to extract time, position, velocity and cartesian position each time step within the while loop and under the <code>mujoco.mj_step(model,data)</code> line</p> <pre><code>t.append(data.time)\nq.append(data.qpos.copy())\nw.append(data.qvel.copy())\nx.append(data.xpos.copy())\n</code></pre> <p>Note that <code>copy()</code> is needed to ensure that we get a copy of the data within <code>qpos</code>, <code>qvel</code>, and <code>xpos</code>.  This is because these arrays do not change their location in memory, only the values inside change.  This means that if you don't copy the values each step, they will all be the same at the end of the simulaiton.  Time, however, is not an array, just a scalar, and does not need to be copied.</p> <p>After stepping through the simulation, you should convert your lists to arrays.</p> <pre><code>t = numpy.array(t)\nq = numpy.array(q)\nw = numpy.array(w)\nx = numpy.array(x)\n</code></pre> <p>Finally, you can plot the position over time using:</p> <pre><code>artists = plt.plot(t,q)\nplt.legend(artists,['q1','q2'])\n</code></pre> <p>Note that if you save the result of the plot to the <code>artists</code> variable, you can then reference them when creating a legend.</p> <p>You can also plot joint velocities and cartesian positions.  Note, that <code>xpos</code> outputs the position of the body, not its center of mass.  If you want to plot a specific point, you will need to add a <code>sensor</code> at a specific <code>site</code>.</p>"},{"location":"tutorials/mujoco/03-double-pendulum-example/#saving-data-to-a-file","title":"Saving Data to a file","text":"<p>The following code saves our time and joint positions to a file called \"data.yml\" and then reloads those values back into the same variables from the same file.  </p> <pre><code>data = {}\ndata['t']=t.tolist()\ndata['q']=q.tolist()\n\nwith open('data.yml','w') as f:\n    yaml.dump(data,f)\n\nwith open('data.yml') as f:\n    data = yaml.load(f,Loader=yaml.Loader)\n\nq = numpy.array(data['q'])\nt = numpy.array(data['t'])\n</code></pre> <p>don't forget to add the following to the top of your code:</p> <pre><code>import yaml\n</code></pre> <p>To break the steps up more, it</p> <ol> <li>Creates a python <code>dict</code> called data</li> <li>Exports the t and q numpy arrays to lists and saves them in the <code>'t'</code> and <code>'q'</code> keys within <code>data</code>.</li> <li>Opens a file called 'data.yml' for writing, as a variable f.</li> <li>dumps data to the file</li> <li>opens the 'data.yml' file for reading, as a variable f</li> <li>saves the q and t variables as numpy arrays, from the <code>'q'</code> and <code>'t'</code> keys of the data <code>dict</code>, respectively</li> </ol> <p>The benefit of saving a file as a <code>yaml</code> file is that it is human-readable, with the drawback that there can be precision loss in the conversion from a floating point number to a string, and back.</p> <p>You can split the code into two parts to only save your code, or to load code by itself.</p>"},{"location":"tutorials/mujoco/03-double-pendulum-example/#setting-initial-conditions","title":"Setting Initial Conditions","text":"<p>You can specify initial position and orientation of bodies in your xml file using the <code>pos</code> tag and your choice of orientation tags.  This can be useful if there is a consistent configuration your device starts from.</p> <p>If you are planning on re-initializing your structure at different points, however, doing it in XML can lead to confusion, because the XML configuration indicates the system when all joints are equal to zero.</p> <p>Therefore, if you want to ensure that joint states represent a consistent zero point across different initial values, you should initialize your state in code.</p> <p>The added benefit is that you can also specify initial joint velocities.  In the case of our double pendulum, it has two degrees of freedom, one for each hinge joint.  So to fully specify the initial position and velocity, you can use the snippet below</p> <pre><code>data.qpos[0:2] = [45*math.pi/180,45*math.pi/180]\ndata.qvel[0:2] = [-2,1]\n</code></pre> <p>This will initialize the joints to \\(45^\\circ\\) each and the joint velocities to \\(\\begin{bmatrix}-2\\\\1\\end{bmatrix}\\), respectively.</p>"},{"location":"tutorials/mujoco/03-double-pendulum-example/#adding-other-joint-parameters","title":"Adding other Joint parameters","text":"<p>You can add stiffness and damping with by inserting stiffness and damping terms to a joint, as below:</p> <pre><code>&lt;joint name=\"j1\" type=\"hinge\" axis=\"0 1 0\" pos=\"0 0 0\" stiffness=\"100\" damping=\"10\"/&gt;\n</code></pre> <p>You can also add joint limits by specifying them with the <code>limited</code> and <code>range</code> tags.  The <code>limited</code> tag enables the limit, while the <code>range</code> tag indicates the joint limit</p> <pre><code>&lt;joint name=\"j1\" type=\"hinge\" axis=\"0 1 0\" pos=\"0 0 0\" limited=\"true\" range=\"0 45\"/&gt;\n</code></pre> <p>Be sure to clarify your angle specification in xml to match the intended joint range, otherwise it won't behave as expected.  You can do this by including a <code>&lt;compiler&gt;</code> element just inside the <code>&lt;mujoco&gt;</code> element.</p> <pre><code>&lt;compiler angle=\"degree\"/&gt;\n</code></pre> <pre><code>&lt;compiler angle=\"radian\"/&gt;\n</code></pre>"},{"location":"tutorials/mujoco/03-double-pendulum-example/#adding-separate-inertial-tag","title":"Adding separate <code>inertial</code> tag","text":"<p>Adding an inertia element will take precedence over inertia parameters in <code>&lt;geom&gt;</code>, but it is best to remove it from other elements to avoid confusion</p> <p>Specifying inertia separately is useful if you want  your visualization to be different from the actual mass and mass distribution of your link</p> <p>This element should be added within the body you want to describe</p> <pre><code>&lt;inertial mass=\"1\" diaginertia=\"1 1 1\" pos=\".5 0 0\"/&gt;\n</code></pre> <p>Don't forget to make sure the position of your inertial element matches your intended center of mass.  In the case of our pendulum, we want the mass to be offset from the origin of the body, as the origin of the body is at the joint's axis.</p>"},{"location":"tutorials/mujoco/03-double-pendulum-example/#specifying-gravity","title":"Specifying Gravity","text":"<p>Add just below <code>&lt;mujoco&gt;</code></p> <pre><code>&lt;option gravity=\"0 0 -9.81\"&gt;&lt;flag gravity=\"enable\"/&gt;&lt;/option&gt;\n</code></pre> <p>You can enable or disable, as well as change the direction</p>"},{"location":"tutorials/mujoco/03-double-pendulum-example/#specifying-timestep","title":"Specifying Timestep","text":"<p>Add just below <code>&lt;mujoco&gt;</code></p> <pre><code>&lt;option timestep=\".001\"/&gt;\n</code></pre>"},{"location":"tutorials/mujoco/03-double-pendulum-example/#enabling-contact","title":"Enabling Contact","text":"<p>Turn on contact by adding just below <code>&lt;mujoco&gt;</code></p> <pre><code>&lt;option&gt;&lt;flag contact=\"enable\"/&gt;&lt;/option&gt;\n</code></pre> <p>Add a floor by adding a new body inside <code>&lt;worldbody&gt;</code></p> <pre><code>&lt;body name=\"floor\" pos=\"0 0 0\"&gt;\n    &lt;geom pos=\"0 0 -.05\" size=\"5 5 .05\" type=\"plane\" rgba=\"1 0.83 0.61 0.5\"/&gt;\n&lt;/body&gt;\n</code></pre> <p>Shift the pendulum a little up by modifying the position of the A body</p> <pre><code>&lt;body name=\"A\" pos=\"0 0 1\" axisangle=\"0 1 0 0\"&gt;\n</code></pre>"},{"location":"tutorials/mujoco/03-double-pendulum-example/#end-of-day-1","title":"End of Day 1","text":"<p>final code</p>"},{"location":"tutorials/mujoco/03-double-pendulum-example/#changing-render-resolution","title":"Changing Render Resolution","text":"<ul> <li>You need to change the resolution in three spots: in the xml to increase the video buffer's memory, when you define the render, and when you view the rendering.</li> </ul> <pre><code>&lt;visual&gt;&lt;global offwidth=\"800\" offheight=\"600\"/&gt;&lt;/visual&gt;\n</code></pre> <pre><code>renderer = mujoco.Renderer(model,width=800,height=600)\n</code></pre> <pre><code>media.show_video(frames,width=800,height=600,fps = framerate)\n</code></pre>"},{"location":"tutorials/mujoco/03-double-pendulum-example/#outputting-rendering-to-a-file","title":"Outputting rendering to a file","text":"<pre><code>media.write_video('pendulum.mp4',frames,fps=framerate)\n</code></pre>"},{"location":"tutorials/mujoco/03-double-pendulum-example/#actuators","title":"Actuators","text":"<ul> <li>force / torque: Force or torque formulations for actuation are a more natural formulation for rigid body simulation.  Because of the formulation, \\(dv/dt = a = f/m\\), forcing the simulation to adopt a pose or velocity breaks the integration and puts the simulation in a non-physically realizable situation. (You can't move a body to a new position instantaneously or have it change its speed instantaneously either)</li> <li>A motor works like this too...torque applied to a joint is a function of the current flowing through the coil.</li> </ul> <pre><code>&lt;actuator&gt;\n&lt;motor name=\"motor1\" joint=\"j1\"/&gt;\n&lt;/actuator&gt;\n</code></pre> <ul> <li>Position controller.  This actuator uses closed-loop feedback within the simulation step, calculating the goal vs present state and applying a force via a <code>kp</code> value.  Similar to how a servo works.  <code>Kp</code> is similar to a controller \"stiffness\" in the dynamics formulation.  The larger <code>kp</code>, the stiffer the system, the higher the frequency, and sometimes, the less stable it is.</li> </ul> <pre><code>&lt;actuator&gt;\n&lt;position name=\"motor1\" joint=\"j1\" kp=\"1000\"/&gt;\n&lt;/actuator&gt;\n</code></pre>"},{"location":"tutorials/mujoco/03-double-pendulum-example/#controllers","title":"Controllers","text":"<p>A controller is a \"callback\" function that is inserted into the computation sequence of each MuJoCo integration step.  You first define the controller and then attach it using a mujoco function.  A mujoco controller needs two inputs, your MuJoCo Model and Data classes.</p> <p>The simplest torque controller (matching the first xml example above) could look like this:</p> <pre><code>def mycontroller1(model, data):\n    data.ctrl = [30]\n    return\n</code></pre> <p>which would get connected to the simulator like this:</p> <pre><code>mujoco.set_mjcb_control(mycontroller1)\n</code></pre> <p>Alternatively, for a position controlled actuator, it could look something like this:</p> <pre><code>A = .5\nd = 0 \nts = .25\nf = .5\n\ndef mycontroller2(model, data):\n    t = data.time\n    linear_act = t*d/ts\n    if linear_act &lt; d:\n        linear_act = d\n    pos_goal = A*math.sin(2*math.pi*f*t)\n    data.ctrl = [pos_goal]\n    return\n</code></pre> <p>which would get connected to the simulator like this:</p> <pre><code>mujoco.set_mjcb_control(mycontroller2)\n</code></pre> <p>Note: Remember to unset the controller if you are running the mujoco simulation repeatedly in a loop and redefining the controller function.  Put </p> <p><code>python mujoco.set_mjcb_control(None)</code></p> <p>immediately after the loop finishes.  Also, if your simulation errors out, you will want to add that line to any <code>try</code> / <code>except</code> pairs.</p>"},{"location":"tutorials/mujoco/03-double-pendulum-example/#constraints","title":"Constraints","text":"<ul> <li>defined by initial XML config not initial joint pos</li> <li>There are a variety of constraint options.  We will be focusing on <code>&lt;weld&gt;</code> elements for HW3.</li> <li>There are a couple constraints that are more useful for robotics applications<ul> <li><code>&lt;equality&gt;&lt;\u2060connect&gt;</code>: connects two bodies at a point</li> <li><code>&lt;equality&gt;&lt;weld&gt;</code>: connects two bodies to each other or one body to the world</li> <li><code>&lt;equality&gt;&lt;joint&gt;</code>: can be used to create gearing between two moving bodies.</li> </ul> </li> <li>See this for more info: https://mujoco.readthedocs.io/en/stable/XMLreference.html#equality</li> </ul>"},{"location":"tutorials/mujoco/03-double-pendulum-example/#sensors","title":"Sensors","text":"<ul> <li>a wide variety of sensors can be applied to joints, bodies, and sites</li> <li>a site is like a point of interest attached to a body.  you can attach tendons or sensors or other simulation elements to sites.</li> <li>see the folowing for more information<ul> <li>https://mujoco.readthedocs.io/en/stable/XMLreference.html#sensor</li> <li>https://mujoco.readthedocs.io/en/stable/XMLreference.html#body-site</li> </ul> </li> </ul>"},{"location":"tutorials/mujoco/03-double-pendulum-example/#string-templates","title":"String templates","text":"<p>There are a number of valid ways to work with strings.  I like the <code>'{}'.format()</code> approach because it is the most straightforward and clear way, even though it may be more typing.  See the following for more info:</p> <ul> <li>https://docs.python.org/3/library/stdtypes.html#str.format</li> <li>https://docs.python.org/3/library/string.html#formatstrings</li> </ul> <pre><code>xml_template = '''here is some information.  X={my_x_var:e}.  Y={my_y_var}'''\nxml = xml_template.format(my_x_var=.00000000123,my_y_var = 3)\nxml\n</code></pre>"},{"location":"tutorials/mujoco/03-double-pendulum-example/#end-of-day-2","title":"End of Day 2","text":"<p>See the final code here</p>"},{"location":"tutorials/python/01-installing-anaconda-python/","title":"Miniconda/Anaconda (Python) Installation Tutorial","text":"","tags":["python","programming"]},{"location":"tutorials/python/01-installing-anaconda-python/#introduction","title":"Introduction","text":"<p>Anaconda is a distribution of Python that includes the ability to manage packages using the conda package manager as well as the ability to create and manage environments, or collections of packages that work together.  Anaconda ships as a ~500 Mb installer.  This tutorial gets you started with miniconda, a slimmed down installer that allows you to install just the packages you need.  Below are the steps to gettting a working installation of Python with all the packages you need for Foldable Robotics.</p> <p>This tutorial is for installing the anaconda python distribution on windows.</p>","tags":["python","programming"]},{"location":"tutorials/python/01-installing-anaconda-python/#windows-installation","title":"Windows Installation","text":"<p>These installation instructions are for computers that do not have Python or Anaconda installed already. Python and Anaconda do not come installed by default on most computers so if you haven't installed them intentionally, these instructions likely apply to you. If you do have another version of Python installed, then please ask Dr.\u00a0Aukes for further details.</p>","tags":["python","programming"]},{"location":"tutorials/python/01-installing-anaconda-python/#anaconda-instructions","title":"Anaconda Instructions","text":"<p>Note: These instructions are for the smaller \"Miniconda\" distribution, that includes only the <code>conda</code> package manager that you can use to install only the packages that you want.  You can also install the full Anaconda distribution, and follow the same basic instructions.</p> <ol> <li> <p>Download and install miniconda (win64 quick link) with the following options:</p> <p> </p> <ol> <li> <p>Install for \"Just for Me\" </p> <p></p> </li> <li> <p>Accept the the default directory (e.g., C:\\ProgramData\\Miniconda3 )</p> <p></p> </li> <li> <p>Keep the options page default, ensuring the \"Register Miniconda3 as the system Python\" box is checked</p> <p></p> </li> <li> <p>Complete the installation</p> <p></p> <p></p> </li> </ol> </li> <li> <p>Update Conda. In Windows, go to the search bar and type \"anaconda\". Once you see the \"Anaconda Prompt\" app in the list, click on it.</p> <p></p> </li> <li> <p>When the terminal opens, paste each of the following lines (one at a time) at the command prompt and press enter:</p> <pre><code>conda update --all\n</code></pre> </li> <li> <p>Install course-specific packages</p> </li> <li> <p>Install MuJoCo in a separate environment here.</p> </li> </ol>","tags":["python","programming"]},{"location":"tutorials/python/01-installing-anaconda-python/#external-resources","title":"External Resources","text":"<ul> <li>Managing Conda Environments</li> </ul>","tags":["python","programming"]},{"location":"tutorials/python/02-installing-packages/","title":"Installing Packages in Python","text":"<ol> <li> <p>Install additional software packages. In Windows, go to the search bar and type \"anaconda\". Once you see the \"Anaconda Prompt\" app in the list, click on it.</p> <p></p> </li> <li> <p>When the terminal opens, paste each of the following lines (one at a time) at the command prompt and press enter:</p> <pre><code>conda install -y anaconda\nconda install -y pyqtgraph pyopengl pycairo shapely pyserial ffmpeg\nconda update -y --all\npython -m pip install --upgrade pip\npip install meshio pygmsh ezdxf pypdf4 pypoly2tri idealab_tools foldable_robotics\nconda install -c conda-forge wrapt```\npip install esptool thonny```\n</code></pre> </li> <li> <p>But that's not all.  This is just your \"base\" environment.  We will be using MuJoCo later in a separate environment.  See the tutorial here</p> </li> </ol>"},{"location":"tutorials/python/03-google-colab-tutorial/","title":"Google Colab Tutorial","text":""},{"location":"tutorials/python/03-google-colab-tutorial/#resources","title":"Resources","text":"<ul> <li>Introduction to Colab and Python</li> <li>Getting Started with Google Colab</li> <li>External data: Local Files, Drive, Sheets, and Cloud Storage</li> <li>How to Connect Google Colab with Google Drive</li> <li>Embedding your image in google colab markdown</li> </ul>"},{"location":"tutorials/python/03-google-colab-tutorial/#what-is-google-colab","title":"What is Google Colab","text":"<p>\"Colaboratory is a free Jupyter notebook environment that requires no setup and runs entirely in the cloud. With Colaboratory you can write and execute code, save and share your analyses, and access powerful computing resources, all for free from your browser... As the name suggests, Google Colab comes with collaboration backed in the product. In fact, it is a Jupyter notebook that leverages Google Docs collaboration features. It also runs on Google servers and you don\u2019t need to install anything. Moreover, the notebooks are saved to your Google Drive account.\" [source]</p> <p>Advantages over Jupyter Notebook</p> <ul> <li>Simple installation and setup</li> <li>Easy integration with Google Drive and Github</li> <li>Cloud computing (use google servers and GPUs instead of your hardware)</li> <li>Automatically saves progress (in the event of power outage or computer freezes)</li> <li>Collaborative environment for group coding projects</li> <li>Persistent notebook version for all teammates</li> <li>Analogous to using Google Docs instead of Microsoft Word for group reports</li> <li>Plenty of quality of life tools without needing to install extensions</li> <li>Collapsible headings</li> <li>Live markdown preview</li> <li>Table of contents</li> <li>Coding tooltips: autofill defined variables</li> <li>Integrated Widget Cells: forms and sliders for easy data entry</li> <li>Scratch cell: A cell to run test code but which isn\u2019t saved in your notebook.</li> </ul>"},{"location":"tutorials/python/03-google-colab-tutorial/#initial-setup","title":"Initial Setup","text":""},{"location":"tutorials/python/03-google-colab-tutorial/#installing-google-colabatory","title":"Installing Google Colabatory","text":"<ol> <li>In google drive, go to New&gt;More&gt;Connect more apps</li> <li>Search for \"Colaboratory\"</li> <li>Install the drive add on</li> </ol>"},{"location":"tutorials/python/03-google-colab-tutorial/#starting-new-google-colab-notebook","title":"Starting new Google Colab Notebook","text":"<ol> <li>In google drive, go to New&gt;More&gt;Google Colaboratory</li> <li>This opens up a fresh  Google Colab Notebook in the drive directory you were currently in</li> <li>The file will be a <code>.ipynb</code> file and can be downloaded as a Jupyter Notebook to run on a local instance if needed (File&gt;Download .ipynb)</li> </ol>"},{"location":"tutorials/python/03-google-colab-tutorial/#importing-juypiter-notebook-file","title":"Importing Juypiter Notebook File","text":"<ol> <li>In google drive, go to New&gt;File Upload</li> <li>Double click the .ipynb file</li> <li>If it does not open the file with collabatory by default; right click&gt;Open With&gt;Google Collaboratory</li> </ol>"},{"location":"tutorials/python/03-google-colab-tutorial/#installing-dependencies","title":"Installing Dependencies","text":""},{"location":"tutorials/python/03-google-colab-tutorial/#pip-install-recommended","title":"pip Install (Recommended)","text":"<p>Google Colab comes with most standard packages by default but we can install additional packages using an exclamation mark.  In Google Colab, the exclamation mark \"!\" is used for executing commands from the underlying operating system.  This means that we can use this to execute the pip command and install packages for the current notebook.  For example, we can install the standard packages from the Foldable Robotics Website by following the same process but adding the modifier \"!\".</p> <p>RUN PIP INSTALL CODE BLOCK</p> <ol> <li> <p>Install standard packages...</p> <p>!pip install meshio pygmsh ezdxf pandoc-fignos pandoc-eqnos pypdf4 service_identity ftd2xx pygithub twine paho-mqtt !pip install ntplib pygame pysftp pyserial</p> </li> <li> <p>Install foldable-robotics-specific packages.</p> <p>!pip install pypoly2tri idealab_tools foldable_robotics pynamics</p> </li> </ol>"},{"location":"tutorials/python/03-google-colab-tutorial/#manual-install","title":"Manual Install","text":"<p>A package can be manually installed by adding the .whl file to Google Drive and using the pip command on this file. For convenience, it is probably best to add it to the same directory as the Google Colab file in your drive. To pip install a .whl file we just have to run the pip command and referencing the path to that file.</p> <p>Note: To access a file stored in your Google Drive, your google drive must be mounted to the google Colab notebook. For details regarding mounting our drive see the \"Mounting Drive to Google Colab\" section.</p> <p>DO NOT RUN IF ALREADY RAN COD IN PIP INSTALL SECTION</p> <pre><code>from google.colab import drive\n</code></pre> <p>Where the drive will be mounted in the Colab notebook</p> <pre><code>ROOT = '/content/drive'\n</code></pre> <p>Path to the file in YOUR DRIVE.  Will be different for you</p> <pre><code>FILE_PATH = '/MyDrive/GoogleColabExample/pynamics-0.0.8-py2.py3-none-any.whl'\n</code></pre> <p>Accessing a file on your drive</p> <pre><code>drive.mount(ROOT, force_remount=True) # Mount the drive to this notebook\nwith open(ROOT+FILE_PATH,'w') as f: # Open the file in the drive\n!pip install f  # Run the pip install command for the file\n</code></pre> <p>This next command is to unmount my drive from th notebook so that it my personal files will not be made available if this Google Colab File is shared</p> <pre><code>drive.flush_and_unmount()\n</code></pre>"},{"location":"tutorials/python/03-google-colab-tutorial/#verifying-imported-packages","title":"Verifying Imported Packages","text":"<p>RUN THIS CODE BLOCK TO ENSURE ALL PACKAGES ARE INSTALLED</p> <pre><code>import pynamics\nfrom pynamics.frame import Frame\nfrom pynamics.variable_types import Differentiable,Constant\nfrom pynamics.system import System\nfrom pynamics.constraint import Constraint\nfrom pynamics.output import PointsOutput\n\nimport sympy\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.optimize\n\nfrom math import pi\n</code></pre> <p>If there are no errors in the output, the packages have been properly installed</p> <p>Note: Packages that do not come installed by default will have to be reinstalled using the pip command for each new notebook.</p>"},{"location":"tutorials/python/03-google-colab-tutorial/#mounting-drive-to-google-colab","title":"Mounting Drive to Google Colab**","text":"<p>This section is only needed if you need to access external files that are located in your google drive</p> <p>In order for your Google Colab notebook to have access to the files on your Google Drive, you must first \"mount\" your drive to the notebook. This process can only mount the top-level drive to a notebook and it will expose all the files in your drive to the Google Colab notebook until it is unmounted. Therefore, it is recommended to always follow mounting your drive with the unmount command if you do not wish to leave the entirety of your drive accessible by a Google Colab notebook. As long as the variable used to store the imported file is not overwritten later in the script, the imported object will remain saved in the notebook.</p> <p>Note: When running the \"drive.mount(ROOT, force_remount=True)\" mount command, it will ask for authorization to mount the drive associated with the selected google acount.  The output of the code cell will provide instructions to complete this process.</p> <p>Disclaimer: Your drive will remain mounted to the Google Colab notebook until you unmount it.  That means people with access to the notebook will be able to access your drive until it is unmounted. Once unmounted, another party will not be able to access your drive since they would need to perform the authorization process which requires a sign in from your google account.</p>"},{"location":"tutorials/python/03-google-colab-tutorial/#mounting-and-unmounting-a-drive-using-a-code-block-reccomended","title":"Mounting and Unmounting a Drive Using a Code Block (Reccomended)","text":"<pre><code>from google.colab import drive\n</code></pre> <p>Where the drive will be mounted in the Colab notebook</p> <pre><code>ROOT = '/content/drive'\n</code></pre> <p>Path to the file in your drive.  Will be different for you</p> <pre><code>FILE_PATH = '/MyDrive/Folder1/Folder2/file' \n#FILE_PATH = '/Shareddrives/Folder1/Folder2/file'\n</code></pre> <p>Mount the drive to this notebook</p> <pre><code>drive.mount(ROOT, force_remount=True)\n</code></pre> <p>Append full path</p> <pre><code>full_path_to_file = ROOT+FILE_PATH\n</code></pre> <p>Example:</p> <pre><code>############################################\n#### INSERT CODE TO PROCESS/IMPORT FILE ####\n# EX1\nimport csv\ndata = csv.reader(full_path_to_file, delimiter=',')\n</code></pre> <p>Example Code</p> <pre><code># EX2\nimport cv2\nimg = cv2.imread(full_path_to_file)   \n#### INSERT CODE TO PROCESS/IMPORT FILE ####\n############################################\n</code></pre> <p>Unmount Drive</p> <pre><code>drive.flush_and_unmount()\n</code></pre> <p>As long as the variable used to import the file (data/img) is not overwritten or deleted, the variable can be used later in the code with an unmounted drive</p>"},{"location":"tutorials/python/03-google-colab-tutorial/#mounting-and-unmounting-a-drive-using-the-ui","title":"Mounting and Unmounting a Drive Using the UI","text":"<p>Alternatively, you can use the toolbar on the left to mount the drive to a notebook.  This does not require account verification since you are accessing the notebook through your google account. If you do not have any code cells that mount a drive. This can be done by</p> <ol> <li>Selecting the files button (folder icon)</li> <li>Selecting the Mount Drive button (dark folder with google drive icon)</li> <li>Giving permission for the notebook to access your Google Drive</li> </ol> <p>Note: This is not recommended since you will have to manually unmount your drive (using the mount button again) or execute the unmount command in a code block.</p>"},{"location":"tutorials/python/03-google-colab-tutorial/#version-control","title":"Version Control","text":""},{"location":"tutorials/python/03-google-colab-tutorial/#google-colabs-revision-history","title":"Google Colab's Revision History","text":"<p>Google Colab has an integrated version control through the ability to view revision history.  This is the same process as Google Docs in which you can restore any versions that have been automatically saved at regular intervals.  You can view the revision history by going to:</p> <p>File&gt;Revision History</p>"},{"location":"tutorials/python/03-google-colab-tutorial/#pushing-google-colab-notebook-to-github","title":"Pushing Google Colab Notebook to Github","text":"<p>Also, there is a github integration that commits the file to our github repository which automatically does version control for us through its commit history functionality. To commit a google colab file to github:</p> <ol> <li>In colab go to \"File&gt;Save Copy in Github\"</li> <li>Sign into your github account</li> <li>Select the repository where you want your notebook to be saved by using the dropdown box</li> <li> <p>You can append subdirectories in the \"File Path\" dialog box by appending \"folder_name/\" to the notebook's file name \"file_name.ipynb\"\"</p> <pre><code>EX: \"folder/file_name.ipynb\"\n</code></pre> </li> <li> <p>Select \"ok\" and the github repository will be updated with the new notebook</p> </li> </ol>"},{"location":"tutorials/python/03-google-colab-tutorial/#submitting-google-colab-notebook-to-canvas","title":"Submitting Google Colab Notebook to Canvas","text":""},{"location":"tutorials/python/03-google-colab-tutorial/#submitting-a-compiled-ipynb-file","title":"Submitting a Compiled .ipynb File","text":"<ol> <li>Download the Google Colab Notebook as a Jupyter Notebook file (.ipynb file).  From the Google Colab notebook, select File&gt;Download .ipynb</li> <li> <p>Upload file to canvas</p> </li> <li> <p>Referencing images and files can be slightly different in the Colab notebook (through direct html link or mounted drive) than in Jupyter Notebook (can include by referencing local directory).  </p> </li> <li>To the best of my knowledge the notebooks should be functionally identical with the exception of the mounting system</li> <li>I would like to ensure that the a compiled Google Colab Notebook is acceptable for submission before moving forward with it</li> </ol>"},{"location":"tutorials/python/03-google-colab-tutorial/#submitting-a-pdf-file","title":"Submitting a PDF File","text":"<p>I am currently unaware of a way to easily print a Google Colab Notebook using MiKTeX or other LaTeX typesetting system. Google Colab has a print function that is able to generate a PDF through html but I would assume that this would not be up to submission standards.</p> <ol> <li>Download the Google Colab Notebook as a Jupyter Notebook file (.ipynb file).  From the Google Colab notebook, select File&gt;Download .ipynb</li> <li>Open the downloaded file in a Jupyter Notebook Session</li> <li>Export the notebook as PDF.  File&gt;Download as&gt; PDF via LaTeX (.pdf)</li> </ol>"},{"location":"tutorials/python/03-google-colab-tutorial/#adding-images-to-google-colab-notebook","title":"Adding Images to Google Colab Notebook","text":""},{"location":"tutorials/python/03-google-colab-tutorial/#directly-embedding-image-using-copy-paste","title":"Directly Embedding Image using Copy &amp; Paste","text":"<p>Google Colab has a very useful of feature that is able to add an image to a text cell by pasting an image from your clipboard.  Once an image is pasted, Google Colab will insert the proper syntax for displaying an image embed the raw image data directly into the notebook.</p> <p>Note: Although not required, it is reccomended to have a pasted image be in its own markdown cell. This is because the image data in text format is very large and can be difficult to move relative to other text in the same cell. This can be seen by editing the text cell for the image (double click image) in sections 8.1 and 8.2.</p> <ol> <li>Copy image from web, screenclipping, or other source</li> <li>Start a new text cell</li> <li>Paste the image</li> </ol> <p></p>"},{"location":"tutorials/python/03-google-colab-tutorial/#adding-custom-images-from-google-drive-without-mounting","title":"Adding Custom Images from Google Drive without Mounting","text":"<p>Full Tutorial on how to embed images</p> <p>An alternative way to add a custom image to mounting your drive is to get a public link to an image saved on your drive. Once an image has been uploaded into your drive (does not matter where), follow the following steps:</p> <ol> <li>Right click the image in the drive</li> <li>Select \"Get Link\"</li> <li>Change the sharing settings from \"Restricted\" to \"Anyone with the link\"</li> <li> <p>Paste this link into a Google Drive Direct Link Generator (link to generator) or follow the steps below to find the direct link manually     a. Paste the link into any text editor</p> <pre><code>**EX:** https://drive.google.com/file/d/1jh9A3LRK8e3i982GhgzmRb4kYrvdTJti/view?usp=sharing\n</code></pre> <p>b. Copy the image ID (the long string of random alphanumeric characters)</p> <pre><code>**EX:** img_id = 1jh9A3LRK8e3i982GhgzmRb4kYrvdTJti\n</code></pre> <p>c. Append to the direct image link url: https://drive.google.com/uc?export=view&amp;id=\"img_id\"</p> <pre><code>**EX** https://drive.google.com/uc?export=view&amp;id=1jh9A3LRK8e3i982GhgzmRb4kYrvdTJti\n</code></pre> </li> <li> <p>Use markdown to display this image</p> <pre><code>![Image Example](https://drive.google.com/uc?export=view&amp;id=1jh9A3LRK8e3i982GhgzmRb4kYrvdTJti)\n</code></pre> </li> </ol> <p>Thanks to Mason Smith for this tutorial.  It has since been modified to fit the needs of this class</p>"},{"location":"tutorials/python/04-native-mujoco-install/","title":"Mujoco Native Installation","text":"<p>These install instructions assume you have already installed anaconda / miniconda</p>"},{"location":"tutorials/python/04-native-mujoco-install/#windows","title":"Windows","text":"<p>Run these commands line-by-line</p> <pre><code>conda create -y -n mujoco python=3.9\nconda activate mujoco\nconda install -y jupyterlab ffmpeg pip\npip install mujoco mediapy mujoco-python-viewer\npip install pygmsh\nconda env config vars set MUJOCO_GL=glfw PYOPENGL_PLATFORM=glfw\nconda deactivate &amp;&amp; conda activate mujoco\n</code></pre> <p>Note: these installation instructions may not work depending on your available graphics card.  Your other option is to use google colab.</p>"},{"location":"tutorials/python/04-native-mujoco-install/#ubuntu","title":"Ubuntu","text":"<p>Run these commands line-by-line</p> <pre><code>conda create -y -n mujoco\nconda activate mujoco\nconda install -y python pip jupyterlab scipy ffmpeg\nconda install -y -c conda-forge glew\nconda install -y -c conda-forge mesalib\nconda install -y -c anaconda mesa-libgl-cos6-x86_64\nconda install -y -c menpo glfw3\nconda install -y sympy pandas\npip install mujoco mediapy mujoco-python-viewer pygmsh\nconda env config vars set MUJOCO_GL=osmesa PYOPENGL_PLATFORM=osmesa\nconda deactivate &amp;&amp; conda activate mujoco\n</code></pre> <p>MUJOCO_GL=egl and PYOPENGL_PLATFORM=egl is no longer working</p>"},{"location":"tutorials/python/04-native-mujoco-install/#mac","title":"Mac","text":"<pre><code>conda create -y -n mujoco\nconda activate mujoco\nconda install -y python pip jupyterlab scipy ffmpeg pip\nconda install -y sympy pandas\npip install mujoco mediapy mujoco-python-viewer pygmsh\nconda install -y git pandoc #extra tools if you need them\n</code></pre>"},{"location":"tutorials/python/04-native-mujoco-install/#using-mujoco","title":"Using mujoco","text":"<p>Before coding in your new mujoco environment, you will need to activate it.</p> <pre><code>conda activate mujoco\n</code></pre>"},{"location":"tutorials/python/04-native-mujoco-install/#external-resources","title":"External Resources","text":"<ul> <li>Anaconda<ul> <li>https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html</li> </ul> </li> <li>Mujoco<ul> <li>Pytorch instructions for installing mujoco (extremely helpful)</li> <li>Github repository</li> <li>Binary Releases</li> <li>Documentation</li> <li>Mujoco interactive tutorial</li> <li>https://pab47.github.io/mujoco.html<ul> <li>https://pab47.github.io/mujoco2022.html</li> </ul> </li> <li>a comprehensive mujoco tutorial<ul> <li>accompanying blog post</li> </ul> </li> </ul> </li> </ul>"},{"location":"tutorials/python/sympy/","title":"Sympy","text":""},{"location":"tutorials/python/sympy/#enter-sympy","title":"Enter Sympy","text":"<ul> <li><code>Sympy</code> is a package in Python used to represent symbolic variables</li> <li><code>Pynamics</code> is a package written to express dynamic systems using sympy variables.</li> </ul>"},{"location":"tutorials/python/sympy/#sympy-quickstart","title":"Sympy Quickstart","text":"<pre><code>import sympy\na=sympy.Symbol('a')\nb=sympy.Symbol('b')\na+b\n</code></pre>"},{"location":"tutorials/python/sympy/#common-functions-in-sympy","title":"Common functions in Sympy","text":"<ul> <li><code>sympy.Symbol()</code></li> <li><code>sympy.solve()</code></li> <li><code>sympy.Matrix()</code></li> </ul>"},{"location":"tutorials/python/sympy/#applied-to-expressions","title":"Applied to expressions","text":"<ul> <li><code>.atoms()</code></li> <li><code>.simplify()</code><sup>1</sup><ul> <li><code>.expand()</code>, <code>.factor()</code>, and <code>.collect()</code></li> </ul> </li> <li><code>.diff()</code></li> <li><code>.subs()</code></li> <li><code>.evalf()</code></li> </ul>"},{"location":"tutorials/python/sympy/#why-do-we-want-symbolic-variables","title":"Why Do We Want Symbolic Variables?","text":"<ul> <li>So we can directly differentiate and solve  constraints to get kinematics and jacobian.</li> </ul>"},{"location":"tutorials/python/sympy/#be-careful","title":"Be careful","text":"<ul> <li>Functions like sin, cos, theta have \"symbolic\" versions.  Can't use regular math functions on symbols</li> </ul>"},{"location":"tutorials/python/sympy/#example","title":"Example","text":"<ol> <li> <p>for more information see here \u21a9</p> </li> </ol>"},{"location":"tutorials/vscode-setup/","title":"VSCode Setup and Usage","text":"<p>please see this page for vscode information.</p>","tags":["vscode"]}]}